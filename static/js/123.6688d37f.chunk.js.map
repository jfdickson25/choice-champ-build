{"version":3,"file":"static/js/123.6688d37f.chunk.js","mappings":"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","sources":["shared/assets/img/back.svg","Party/pages/CreateParty.js","shared/components/FormElements/Button.js"],"sourcesContent":["var _rect, _path;\nvar _excluded = [\"title\", \"titleId\"];\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\nimport * as React from \"react\";\nfunction SvgBack(_ref, svgRef) {\n  var title = _ref.title,\n    titleId = _ref.titleId,\n    props = _objectWithoutProperties(_ref, _excluded);\n  return /*#__PURE__*/React.createElement(\"svg\", _extends({\n    fill: \"none\",\n    height: 40,\n    viewBox: \"0 0 40 40\",\n    width: 40,\n    xmlns: \"http://www.w3.org/2000/svg\",\n    ref: svgRef,\n    \"aria-labelledby\": titleId\n  }, props), title ? /*#__PURE__*/React.createElement(\"title\", {\n    id: titleId\n  }, title) : null, _rect || (_rect = /*#__PURE__*/React.createElement(\"rect\", {\n    height: 39,\n    rx: 19.5,\n    stroke: \"#fff\",\n    width: 39,\n    x: 0.5,\n    y: 0.5\n  })), _path || (_path = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"m17 20-.7071-.7071-.7071.7071.7071.7071zm5.2929-6.7071-6 6 1.4142 1.4142 6-6zm-6 7.4142 6 6 1.4142-1.4142-6-6z\",\n    fill: \"#fff\"\n  })));\n}\nvar ForwardRef = /*#__PURE__*/React.forwardRef(SvgBack);\nexport default __webpack_public_path__ + \"static/media/back.130646437979786be8370a1fdf68655a.svg\";\nexport { ForwardRef as ReactComponent };","import React, { useEffect, useState, useContext } from 'react';\r\nimport { useNavigate } from 'react-router-dom';\r\n\r\nimport circle from '../../shared/assets/img/circle.png';\r\nimport check from '../../shared/assets/img/check.png';\r\nimport back from '../../shared/assets/img/back.svg';\r\n\r\nimport './CreateParty.css';\r\nimport Button from '../../shared/components/FormElements/Button';\r\n\r\nimport { AuthContext } from '../../shared/context/auth-context';\r\nimport Loading from '../../shared/components/Loading';\r\n\r\nconst CreateParty = props => {\r\n    const auth = useContext(AuthContext);\r\n\r\n    const [collections, setCollections] = useState([]);\r\n    const [mediaType, setMediaType] = useState('movie');\r\n    const [selectAlert, setSelectAlert] = useState(false);\r\n    const [isLoading, setIsLoading] = useState(true);\r\n    const [secretMode, setSecretMode] = useState(false);\r\n    const [includeWatched, setIncludeWatched] = useState(false);\r\n    let navigate = useNavigate();\r\n\r\n    useEffect(() => {\r\n        auth.showFooterHandler(true);\r\n        // Make a fetch post request to collections with the userId and setCollections to the response\r\n        fetch(`https://choice-champ-backend.glitch.me/collections/movie/${auth.userId}`, {\r\n            method: 'GET',\r\n            headers: {\r\n                'Content-Type': 'application/json'\r\n            }\r\n        })\r\n        .then(res => res.json())\r\n        .then(data => {\r\n            setCollections(data.collections);\r\n            setIsLoading(false);\r\n        })\r\n    }, []);\r\n\r\n    const addRemoveItem = (itemId) => {\r\n        if(selectAlert) {\r\n            setSelectAlert(false);\r\n        }\r\n\r\n        // Find the item in the array and toggle the selected value\r\n        const updatedCollections = collections.map(collection => {\r\n            if(collection._id === itemId) {\r\n                collection.selected = !collection.selected;\r\n            }\r\n            return collection;\r\n        });\r\n\r\n        setCollections(updatedCollections);\r\n    }\r\n\r\n    const navToPartyWait = () => {\r\n        const selectedCollections = collections.filter(collection => collection.selected);\r\n\r\n        if (selectedCollections.length === 0) {\r\n            setSelectAlert(true);\r\n            return;\r\n        }\r\n\r\n        // Generate a random 4 digit party code\r\n        const partyCode = Math.floor(1000 + Math.random() * 9000);\r\n\r\n        const collectionIds = selectedCollections.map(collection => collection._id);\r\n\r\n        fetch('https://choice-champ-backend.glitch.me/party', {\r\n            method: 'POST',\r\n            headers: {\r\n                'Content-Type': 'application/json'\r\n            },\r\n            body: JSON.stringify({\r\n                    collections: collectionIds,\r\n                    partyCode: partyCode,\r\n                    mediaType: mediaType,\r\n                    secretMode: secretMode,\r\n                    includeWatched: includeWatched,\r\n            })\r\n        })\r\n        .then(res => {\r\n            // Route to the party page\r\n            navigate(`/party/wait/${partyCode}/owner`);\r\n        });\r\n    }\r\n\r\n    const navBack = () => {\r\n        navigate('/party');\r\n    }\r\n\r\n    const mediaTypeHandler = (event) => {\r\n\r\n        setIsLoading(true);\r\n        setMediaType(event.target.value);\r\n\r\n        // Make a fetch post request to collections with the userId and setCollections to the response\r\n        fetch(`https://choice-champ-backend.glitch.me/collections/${event.target.value}/${auth.userId}`, {\r\n            method: 'GET',\r\n            headers: {\r\n                'Content-Type': 'application/json'\r\n            }\r\n        })\r\n        .then(res => res.json())\r\n        .then(data => {\r\n            setSelectAlert(false);\r\n            setCollections(data.collections);\r\n            setIsLoading(false);\r\n        })\r\n    }\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <div className='content'>\r\n                <img src={back} alt=\"Back symbol\" className=\"top-left\" onClick={navBack} />\r\n                <h2 className='title'>Create Party</h2>\r\n                <div className='create-divider'></div>\r\n                <p className='option-text'>Secret Mode</p>\r\n                <img className='option-img' src={ secretMode ? check : circle } onClick={() => { setSecretMode(!secretMode) }} />\r\n                <p className='option-subtext'>Party members will not see each other's votes</p>                \r\n                <p className='option-text'>Include Watched</p>\r\n                <img className='option-img' src={ includeWatched ? check : circle } onClick={() => { setIncludeWatched(!includeWatched) }} />\r\n                <p className='option-subtext'>Include items that have been marked as watched/played</p>  \r\n                <div className='create-divider'></div>\r\n\r\n                <label className='radio-btn-label' htmlFor=\"movie\">Movies</label>\r\n                <input className='radio-btn' type='radio' name='mediaType' id='movie' value='movie' onChange={mediaTypeHandler} checked={mediaType === 'movie'} /> \r\n                <label className='radio-btn-label' htmlFor=\"tv\">TV Shows</label>\r\n                <input className='radio-btn' type='radio' name='mediaType' id='tv' value='tv' onChange={mediaTypeHandler} checked={mediaType === 'tv'} />\r\n                <label className='radio-btn-label' htmlFor=\"games\">Video Games</label>\r\n                <input className='radio-btn' type='radio' name='mediaType' id='games' value='game' onChange={mediaTypeHandler} checked={mediaType === 'game'} />\r\n                <label className='radio-btn-label' htmlFor=\"games\">Board Games</label>\r\n                <input className='radio-btn' type='radio' name='mediaType' id='board' value='board' onChange={mediaTypeHandler} checked={mediaType === 'board'} />\r\n                \r\n                <p className='option-subtext'>Choose collections to include in party</p>   \r\n                <div className='create-party-collections'>\r\n                    \r\n                { isLoading ? <Loading type='beat' className='list-loading-create' size={20} /> : \r\n                        collections.length > 0 ?\r\n                            collections.map(collection => (\r\n                                <div key={collection._id} className='create-party-collection'>\r\n                                    <img id={ collection._id } src={ collection.selected ? check : circle} className='create-party-selectable' onClick={() => { addRemoveItem(collection._id) }} />\r\n                                    <div className='create-party-collection-name'>{collection.name}</div>\r\n                                </div>\r\n                        ))\r\n                        : <div className='no-collections-found'>No collections found for this media type</div>\r\n                }\r\n                </div>\r\n                <Button type=\"button\" className='create-party-btn' onClick={navToPartyWait}>Create Party</Button>\r\n                { selectAlert && <div className='select-alert'>Please select at least one collection</div> }\r\n            </div>\r\n        </React.Fragment>\r\n    );\r\n}\r\n\r\nexport default CreateParty;","import React from 'react';\r\n\r\nimport './Button.css';\r\n\r\nconst Button = props => {\r\n    return (\r\n        <button \r\n            type={props.type} \r\n            disabled={props.disabled}\r\n            onClick={props.onClick}\r\n            className={props.className}\r\n        >\r\n            {props.children}\r\n        </button>\r\n    );\r\n}\r\n\r\nexport default Button;"],"names":["props","auth","useContext","AuthContext","_useState","useState","_useState2","_slicedToArray","collections","setCollections","_useState3","_useState4","mediaType","setMediaType","_useState5","_useState6","selectAlert","setSelectAlert","_useState7","_useState8","isLoading","setIsLoading","_useState9","_useState10","secretMode","setSecretMode","_useState11","_useState12","includeWatched","setIncludeWatched","navigate","useNavigate","useEffect","showFooterHandler","fetch","concat","userId","method","headers","then","res","json","data","mediaTypeHandler","event","target","value","_jsx","React","children","_jsxs","className","src","back","alt","onClick","check","circle","htmlFor","type","name","id","onChange","checked","Loading","size","length","map","collection","_id","selected","itemId","updatedCollections","addRemoveItem","Button","selectedCollections","filter","partyCode","Math","floor","random","collectionIds","body","JSON","stringify","disabled"],"sourceRoot":""}