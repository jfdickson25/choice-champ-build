{"version":3,"file":"static/js/386.655e2044.chunk.js","mappings":"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","sources":["shared/assets/img/back.svg","Party/pages/Party.js","shared/components/FormElements/Button.js"],"sourcesContent":["var _rect, _path;\nvar _excluded = [\"title\", \"titleId\"];\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\nimport * as React from \"react\";\nfunction SvgBack(_ref, svgRef) {\n  var title = _ref.title,\n    titleId = _ref.titleId,\n    props = _objectWithoutProperties(_ref, _excluded);\n  return /*#__PURE__*/React.createElement(\"svg\", _extends({\n    fill: \"none\",\n    height: 40,\n    viewBox: \"0 0 40 40\",\n    width: 40,\n    xmlns: \"http://www.w3.org/2000/svg\",\n    ref: svgRef,\n    \"aria-labelledby\": titleId\n  }, props), title ? /*#__PURE__*/React.createElement(\"title\", {\n    id: titleId\n  }, title) : null, _rect || (_rect = /*#__PURE__*/React.createElement(\"rect\", {\n    height: 39,\n    rx: 19.5,\n    stroke: \"#fff\",\n    width: 39,\n    x: 0.5,\n    y: 0.5\n  })), _path || (_path = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"m17 20-.7071-.7071-.7071.7071.7071.7071zm5.2929-6.7071-6 6 1.4142 1.4142 6-6zm-6 7.4142 6 6 1.4142-1.4142-6-6z\",\n    fill: \"#fff\"\n  })));\n}\nvar ForwardRef = /*#__PURE__*/React.forwardRef(SvgBack);\nexport default __webpack_public_path__ + \"static/media/back.130646437979786be8370a1fdf68655a.svg\";\nexport { ForwardRef as ReactComponent };","\r\nimport React, { useEffect, useState, useRef, useContext }  from 'react';\r\nimport { useParams, useNavigate } from 'react-router-dom';\r\nimport Button from '../../shared/components/FormElements/Button';\r\nimport Confetti from 'react-confetti';\r\nimport back from '../../shared/assets/img/back.svg';\r\nimport dice from '../../shared/assets/img/dices.png';\r\nimport Loading from '../../shared/components/Loading';\r\nimport $ from 'jquery';\r\n\r\nimport { AuthContext } from '../../shared/context/auth-context';\r\n\r\nimport './Party.css';  \r\n\r\nconst Party = ({ socket }) => {\r\n    const auth = useContext(AuthContext);\r\n    let navigate = useNavigate();\r\n    // Get the party code and user type from the url\r\n    const { code, userType } = useParams();\r\n\r\n    const [collectionItems, setCollectionItems] = useState([]);\r\n    const [mediaType, setMediaType] = useState('movie');\r\n    const [votesNeeded, setVotesNeeded] = useState(1);\r\n    const [secretMode, setSecretMode] = useState(false);\r\n    const [ready, setReady] = useState(false);\r\n    // State to track the number of users that have clicked the voting finished button\r\n    const [usersReadyCount, setUsersReadyCount] = useState(0);\r\n    // State to track the total number of users in the party, this is grabbed from the backend\r\n    // party object. Users may leave, so if anyone reloads the page, the totalUsers will be reset to\r\n    // an incorrect value.\r\n    const [totalUsers, setTotalUsers] = useState(0);\r\n    const [runnerUps, setRunnerUps] = useState([]);\r\n\r\n    const [slideDown, setSlideDown] = useState(false);\r\n    const [randomSelected, setRandomSelected] = useState(false);\r\n\r\n    const collectionPointRef = useRef(collectionItems);\r\n    const votesNeededRef = useRef(votesNeeded);\r\n    const usersReadyCountRef = useRef(usersReadyCount);\r\n    const totalUsersRef = useRef(totalUsers);\r\n  \r\n    // Log the collections passed from the previous page using useEffect\r\n    useEffect(() => {\r\n        auth.showFooterHandler(false);\r\n        // Make a fetch request to the backend to get all the collectionItems for the party\r\n        fetch(`https://choice-champ-backend.glitch.me/party/${code}`,\r\n        {\r\n            method: 'GET',\r\n            headers: {\r\n                'Content-Type': 'application/json'\r\n            }\r\n        })\r\n        .then(response => response.json())\r\n        .then(body => {\r\n            let items = body.party.items.map(item => {\r\n                return {\r\n                    id: item._id,\r\n                    itemId: item.itemId,\r\n                    title: item.title,\r\n                    poster: item.poster,\r\n                    watched: item.watched,\r\n                    votes: 0,\r\n                    voted: false\r\n                }\r\n            });\r\n\r\n            // Find if there are any duplicate itemIds and remove them\r\n            items = items.filter((item, index, self) => {\r\n                return index === self.findIndex((t) => (\r\n                    t.itemId === item.itemId\r\n                ));\r\n            });\r\n\r\n            // If body.party.IncludeWatched is false then filter out the items that have been watched\r\n            if(!body.party.includeWatched) {\r\n                items = items.filter(item => !item.watched);\r\n            }\r\n\r\n            // Randomize the order of the items\r\n            items = items.sort(() => Math.random() - 0.5);\r\n\r\n            setMediaType(body.party.mediaType);\r\n            setSecretMode(body.party.secretMode);\r\n            setTotalUsers(body.party.memberCount);\r\n            totalUsersRef.current = body.party.memberCount;\r\n            setCollectionItems(items);\r\n            collectionPointRef.current = items;\r\n          \r\n            // Join the party room. This will restrict the same movie getting voted in different parties\r\n            socket.emit('join-room', code);\r\n        });\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        socket.on('vote-increment', (id) => {\r\n            // Find item with the id and increment the vote count\r\n            const item = collectionPointRef.current.find(item => item.id == id);\r\n            item.votes += 1;\r\n            setCollectionItems([...collectionPointRef.current]);\r\n        });\r\n\r\n        socket.on('vote-decrement', (id) => {\r\n            // Find item with the id and decrement the vote count\r\n            const item = collectionPointRef.current.find(item => item.id == id);\r\n            item.votes -= 1;\r\n            setCollectionItems([...collectionPointRef.current]);\r\n        });\r\n\r\n        socket.on('votes-needed', (votesNeeded) => {\r\n            setVotesNeeded(votesNeeded);\r\n            votesNeededRef.current = votesNeeded;\r\n        });\r\n\r\n        socket.on('vote-selected', (votesNeeded) => {\r\n            // Filter out the items that have been voted for\r\n            const filteredItems = collectionPointRef.current.filter(item => item.votes >= votesNeeded);\r\n\r\n            // Reset votes and voted for all filtered items\r\n            filteredItems.forEach(item => {\r\n                item.votes = 0;\r\n                item.voted = false;\r\n            });\r\n\r\n            if(filteredItems.length === 1) {\r\n                // Set runners up to the remaining items\r\n                const runnerUps = collectionPointRef.current.filter(item => item.votes < votesNeeded);\r\n                setRunnerUps(runnerUps);\r\n            }\r\n\r\n            setCollectionItems(filteredItems);\r\n            collectionPointRef.current = filteredItems;\r\n        });\r\n\r\n        socket.on('random-selected', (id) => {\r\n            socket.emit('leave-room', code);\r\n\r\n            if(ready) {\r\n                setReady(false);\r\n            }\r\n\r\n            setRandomSelected(true);\r\n\r\n            setTimeout(() => {\r\n                setSlideDown(true);\r\n                setTimeout(() => {\r\n                    // Find the item with the id and set it to the state\r\n                    const item = collectionPointRef.current.find(item => item.id === id);\r\n\r\n                    // Set the rest of the items that are not the random item to be the runner ups\r\n                    const runnerUps = collectionPointRef.current.filter(item => item.id !== id);\r\n                    setRunnerUps(runnerUps);\r\n\r\n                    setCollectionItems([item]);\r\n                    collectionPointRef.current = [item];\r\n                }, 2000);\r\n            }, 1000);\r\n        });\r\n\r\n        socket.on('user-ready', () => {\r\n            usersReadyCountRef.current += 1;\r\n            setUsersReadyCount(usersReadyCountRef.current);\r\n\r\n            // If the usersReadyCount is equal to the totalUsers then filter all the items that have\r\n            // less votes than the votesNeeded. Reset the votes and voted for all filtered items\r\n            if(usersReadyCountRef.current == totalUsersRef.current) {\r\n                setTimeout(() => {\r\n\r\n                    // Set slideDown to true to slide down the ready overlay\r\n                    setSlideDown(true);\r\n                    setTimeout(() => {\r\n                        // Filter out the items that have been voted for\r\n                        const filteredItems = collectionPointRef.current.filter(item => item.votes >= votesNeededRef.current);\r\n\r\n                        // Check to make sure there are items left in the collection\r\n                        if (filteredItems.length === 0) {\r\n                            setReady(false);\r\n                            return;\r\n                        } else if(filteredItems.length === 1) {\r\n                            // Set runners up to the remaining items\r\n                            const runnerUps = collectionPointRef.current.filter(item => item.votes < votesNeededRef.current);\r\n                            setRunnerUps(runnerUps);\r\n                        } else {\r\n                            // Reset votes and voted for all filtered items\r\n                            filteredItems.forEach(item => {\r\n                                item.votes = 0;\r\n                                item.voted = false;\r\n                            });\r\n\r\n                            setUsersReadyCount(0);\r\n                            usersReadyCountRef.current = 0;\r\n                        }\r\n\r\n                        // No matter what set the collection items to the filtered items\r\n                        setCollectionItems(filteredItems);\r\n                        collectionPointRef.current = filteredItems;\r\n\r\n                        // Set ready to false whether there is one or more items left in the collection\r\n                        setReady(false);\r\n                        setSlideDown(false);\r\n                    }, 2000);\r\n                }, 1000);\r\n            }\r\n        });\r\n\r\n        socket.on('user-not-ready', () => {\r\n            usersReadyCountRef.current -= 1;\r\n            setUsersReadyCount(usersReadyCountRef.current);\r\n        });\r\n\r\n        socket.on('party-member-left', () => {\r\n            setTotalUsers(totalUsersRef.current - 1);\r\n            totalUsersRef.current -= 1;\r\n        });\r\n\r\n        socket.on('party-deleted', () => {\r\n            socket.emit('leave-room', code);\r\n            // Redirect to the party page\r\n            navigate('/party');\r\n        });\r\n\r\n        return () => {\r\n            socket.off('vote-increment');\r\n            socket.off('vote-decrement');\r\n            socket.off('votes-needed');\r\n            socket.off('vote-selected');\r\n            socket.off('random-selected');\r\n            socket.off('party-deleted');\r\n            socket.off('clear-votes');\r\n            socket.off('user-ready');\r\n            socket.off('user-not-ready');\r\n            socket.off('party-member-left');\r\n        }\r\n    }, []);\r\n\r\n    const changeCount = (id) => {\r\n        // Find the item with the id and increment vote by one and save it to the state\r\n        const item = collectionItems.find(item => item.id === id);\r\n        // Only increment if the user has not voted\r\n        if (item.voted) {\r\n            item.voted = false;\r\n            item.votes -= 1;\r\n            setCollectionItems([...collectionItems]);\r\n            collectionPointRef.current = [...collectionItems];\r\n            socket.emit('vote-remote-decrement', id, code);\r\n        } else {\r\n            item.voted = true;        \r\n            item.votes += 1;\r\n            setCollectionItems([...collectionItems]);\r\n            collectionPointRef.current = [...collectionItems];\r\n            socket.emit('vote-remote-increment', id, code);\r\n        }\r\n    }\r\n\r\n    const userReady = () => {\r\n        // Set the user to ready\r\n        setReady(true);\r\n        // Increase usersReadyCount by one\r\n        usersReadyCountRef.current += 1;\r\n        setUsersReadyCount(usersReadyCountRef.current)\r\n\r\n        // If the usersReadyCount is equal to the totalUsers then filter all the items that have\r\n        // less votes than the votesNeeded. Reset the votes and voted for all filtered items\r\n        if(usersReadyCountRef.current == totalUsersRef.current) {\r\n            setTimeout(() => {\r\n\r\n                // Set slideDown to true to slide down the ready overlay\r\n                setSlideDown(true);\r\n                setTimeout(() => {\r\n                    // Filter out the items that have been voted for\r\n                    const filteredItems = collectionItems.filter(item => item.votes >= votesNeededRef.current);\r\n\r\n                    // Check to make sure there are items left in the collection\r\n                    if (filteredItems.length === 0) {\r\n                        setReady(false);\r\n                        return;\r\n                    } else if(filteredItems.length === 1) {\r\n                        // Set runners up to the remaining items\r\n                        const runnerUps = collectionItems.filter(item => item.votes < votesNeededRef.current);\r\n                        setRunnerUps(runnerUps);\r\n\r\n                        // Make a fetch request to delete the party from the database\r\n                        fetch(`https://choice-champ-backend.glitch.me/party/${code}`,\r\n                        {\r\n                            method: 'DELETE',\r\n                            headers: {\r\n                                'Content-Type': 'application/json'\r\n                            }\r\n                        });\r\n                    } else {\r\n                        // Reset votes and voted for all filtered items\r\n                        filteredItems.forEach(item => {\r\n                            item.votes = 0;\r\n                            item.voted = false;\r\n                        });\r\n\r\n                        setUsersReadyCount(0);\r\n                        usersReadyCountRef.current = 0;\r\n                    }\r\n\r\n                    setCollectionItems(filteredItems);\r\n                    collectionPointRef.current = filteredItems;\r\n\r\n                    setReady(false);\r\n                    setSlideDown(false);\r\n                }, 2000);\r\n            }, 1000);\r\n        }\r\n\r\n        // Emit event to the server that the user is ready\r\n        socket.emit('user-ready-remote', code);\r\n    }\r\n\r\n    const userNotReady = () => {\r\n        // Set the user to not ready\r\n        setReady(false);\r\n\r\n        // Decrease usersReadyCount by one\r\n        usersReadyCountRef.current -= 1;\r\n        setUsersReadyCount(usersReadyCountRef.current);\r\n\r\n        // Emit event to the server that the user is not ready\r\n        socket.emit('user-not-ready-remote', code);\r\n    }\r\n\r\n    const navToParty = () => {\r\n        if(userType === 'owner' && collectionItems.length > 1) {\r\n            // Make a fetch request to the backend to get all the collectionItems for the party\r\n            fetch(`https://choice-champ-backend.glitch.me/party/${code}`,\r\n            {\r\n                method: 'DELETE',\r\n                headers: {\r\n                    'Content-Type': 'application/json'\r\n                }\r\n            })\r\n            .then(response => {\r\n                socket.emit('leave-room', code);\r\n                socket.emit('party-remote-deleted', code);\r\n                // Redirect to the home page\r\n                navigate('/party');\r\n            });\r\n        }\r\n        else {\r\n            socket.emit('user-leave-party', code);\r\n            socket.emit('leave-room', code);\r\n            navigate('/party');\r\n        }\r\n    }\r\n\r\n    const selectRandom = () => {\r\n        // Don't do anything if there is only one item in the collection\r\n        if (collectionItems.length === 1) {\r\n            return;\r\n        }\r\n\r\n        setRandomSelected(true);\r\n\r\n        // Randomly select on of the items in the collection and remove the rest\r\n        const randomIndex = Math.floor(Math.random() * collectionItems.length);\r\n        const randomItem = collectionItems[randomIndex];\r\n        // Reset votes and voted for all filtered items\r\n        randomItem.votes = 0;\r\n        randomItem.voted = false;\r\n\r\n        // Set the rest of the items that are not the random item to be the runner ups\r\n        const runnerUps = collectionItems.filter(item => item.id !== randomItem.id);\r\n\r\n        setTimeout(() => {\r\n            setSlideDown(true);\r\n            setTimeout(() => {\r\n                setRunnerUps(runnerUps);\r\n                setCollectionItems([randomItem]);\r\n                collectionPointRef.current = [randomItem];\r\n\r\n                fetch(`https://choice-champ-backend.glitch.me/party/${code}`,\r\n                {\r\n                    method: 'DELETE',\r\n                    headers: {\r\n                        'Content-Type': 'application/json'\r\n                    }\r\n                });\r\n            }, 2000);\r\n        }, 1000);\r\n\r\n        socket.emit('random-remote-selected', randomItem.id, code);\r\n    }\r\n\r\n  return (\r\n    <div className='content'>\r\n        { collectionItems.length === 1 && ( <Confetti height={window.outerHeight + window.innerHeight}/> )}\r\n        <img src={back} alt=\"Back symbol\" onClick={navToParty} className='top-left'/>\r\n        { (userType === 'owner' && collectionItems.length > 1) ? (\r\n            <div className='votes-needed-section'>\r\n                <p className='votes-needed-title'>Votes Needed</p>\r\n                <input \r\n                    type='number'\r\n                    className='votes-needed-input'\r\n                    value={votesNeeded}\r\n                    min={1}\r\n                    onChange={e => {\r\n                        setVotesNeeded(e.target.value);\r\n                        votesNeededRef.current = e.target.value;\r\n                        // Check if e.target.value is a number\r\n                        if (isNaN(e.target.value) || e.target.value === '') {\r\n                            return;\r\n                        } else {\r\n                            socket.emit('votes-needed-remote', e.target.value, code);\r\n                        }\r\n                    }}\r\n                />\r\n            </div>)\r\n            : <div className='guest-banner'></div>\r\n        }\r\n        { (userType === 'owner' && collectionItems.length > 1) && (<img src={dice} className=\"edit\" alt='Dice' onClick={selectRandom} />) }\r\n        <div className={mediaType === 'game' ? 'collection-content-game' : 'collection-content-other' }>\r\n            { \r\n                collectionItems.length === 1 ? (\r\n                    <div className='winner'>\r\n                        <p className='winner-banner'>\r\n                            CHOICE CHAMPION!\r\n                        </p>\r\n                        <img\r\n                            className={ mediaType === 'game' ? 'winner-img-game' :'winner-img' }\r\n                            src={collectionItems[0].poster}\r\n                        />\r\n                        <p className='winner-title'>{collectionItems[0].title}</p>\r\n                        <p className='runner-up-title'>\r\n                            Runner Ups\r\n                        </p>\r\n                        { runnerUps.length > 0 && (\r\n                            runnerUps.map(item => (\r\n                                <p className='runner-up' key={item.id}>\r\n                                    { item.title }\r\n                                </p>\r\n                            ))\r\n                        )}\r\n                    </div>\r\n                ) : [...collectionItems].reverse().map(item => (\r\n                    <div className='item-section' key={item.id} >\r\n                        <img \r\n                            className='item-img' \r\n                            src={item.poster} \r\n                            onClick={changeCount.bind(this, item.id)}\r\n                            style={item.voted ? { border: '5px solid #FCB016' } : null}\r\n                        />\r\n                        {(mediaType === 'game' || mediaType === 'board') && <p style={item.voted ? { borderLeft: '5px solid #FCB016', borderRight: '5px solid #FCB016', borderBottom: '5px solid #FCB016', borderRadius: '0px 0px 9px 9px' } : null}>{item.title}</p>}\r\n                        { (item.votes > 0 && !secretMode) && <div className='item-votes'>{item.votes}</div> }\r\n                    </div>\r\n                ))\r\n            }\r\n        </div>\r\n        { \r\n            (collectionItems.length > 1) && ( \r\n                !ready ? ( !randomSelected ? <Button className='finish-voting-btn' onClick={userReady}>Finish Voting</Button> : null )\r\n                : <div \r\n                    className='ready-overlay' \r\n                    onClick={ totalUsers > 1 ? userNotReady : null} \r\n                    style={ \r\n                        // If slide down is true translate the overlay down 100vh make the transition smooth over 2 seconds\r\n                        slideDown ? { transform: 'translateY(100vh)', transition: 'transform 2s ease-in-out' } : null\r\n                    }\r\n                >\r\n                    {totalUsers === 1 \r\n                        ? \r\n                            <React.Fragment>\r\n                            <h1 className='ready-text' style={{marginBottom: '30px'}}>Filtering Items</h1>\r\n                            <Loading type='beat' className='ready-loading' size={20} speed={.5} />\r\n                            </React.Fragment>\r\n                        : \r\n                            <React.Fragment>\r\n                            <h1 className='ready-text'>Ready!</h1>\r\n                            <p className='waiting-text'>Waiting on other party members...</p>\r\n                            <p className='waiting-text-cancel'>Click to return to voting</p>\r\n                            <Loading type='sync' className='ready-loading' size={20} speed={.5} />\r\n                            </React.Fragment>\r\n                    }\r\n                </div> \r\n            ) \r\n        }\r\n        {\r\n            randomSelected && (\r\n                <div \r\n                    className='ready-overlay'\r\n                    style={ \r\n                        // If slide down is true translate the overlay down 100vh make the transition smooth over 2 seconds\r\n                        slideDown ? { transform: 'translateY(100vh)', transition: 'transform 2s ease-in-out' } : null\r\n                    }\r\n                >\r\n                    <img src={dice} className='random-selected-dice' alt='Dice' />\r\n                </div>\r\n            )\r\n        }\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Party;","import React from 'react';\r\n\r\nimport './Button.css';\r\n\r\nconst Button = props => {\r\n    return (\r\n        <button \r\n            type={props.type} \r\n            disabled={props.disabled}\r\n            onClick={props.onClick}\r\n            className={props.className}\r\n        >\r\n            {props.children}\r\n        </button>\r\n    );\r\n}\r\n\r\nexport default Button;"],"names":["_ref","socket","auth","useContext","AuthContext","navigate","useNavigate","_useParams","useParams","code","userType","_useState","useState","_useState2","_slicedToArray","collectionItems","setCollectionItems","_useState3","_useState4","mediaType","setMediaType","_useState5","_useState6","votesNeeded","setVotesNeeded","_useState7","_useState8","secretMode","setSecretMode","_useState9","_useState10","ready","setReady","_useState11","_useState12","usersReadyCount","setUsersReadyCount","_useState13","_useState14","totalUsers","setTotalUsers","_useState15","_useState16","runnerUps","setRunnerUps","_useState17","_useState18","slideDown","setSlideDown","_useState19","_useState20","randomSelected","setRandomSelected","collectionPointRef","useRef","votesNeededRef","usersReadyCountRef","totalUsersRef","useEffect","showFooterHandler","fetch","concat","method","headers","then","response","json","body","items","party","map","item","id","_id","itemId","title","poster","watched","votes","voted","filter","index","self","findIndex","t","includeWatched","sort","Math","random","memberCount","current","emit","on","find","_toConsumableArray","filteredItems","forEach","length","setTimeout","off","changeCount","_jsxs","className","children","_jsx","Confetti","height","window","outerHeight","innerHeight","src","back","alt","onClick","type","value","min","onChange","e","target","isNaN","dice","randomIndex","floor","randomItem","reverse","bind","style","border","borderLeft","borderRight","borderBottom","borderRadius","transform","transition","React","marginBottom","Loading","size","speed","Button","props","disabled"],"sourceRoot":""}