{"version":3,"file":"static/js/610.0003f707.chunk.js","mappings":"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","sources":["shared/components/FormElements/Button.js","user/pages/Auth.js"],"sourcesContent":["import React from 'react';\r\n\r\nimport './Button.css';\r\n\r\nconst Button = props => {\r\n    return (\r\n        <button \r\n            type={props.type} \r\n            disabled={props.disabled}\r\n            onClick={props.onClick}\r\n            className={props.className}\r\n        >\r\n            {props.children}\r\n        </button>\r\n    );\r\n}\r\n\r\nexport default Button;","import React, {useContext, useState} from 'react';\r\nimport { useForm } from \"react-hook-form\";\r\nimport { useNavigate } from \"react-router-dom\";\r\n\r\nimport logo from '../../shared/assets/img/logo.png'\r\nimport Button from '../../shared/components/FormElements/Button';\r\n\r\nimport { AuthContext } from '../../shared/context/auth-context';\r\n\r\nimport './Auth.css';\r\n\r\nconst Auth = props => {\r\n    // useContext is used to access the context object created in auth-context.js\r\n    // with this we can access the isLoggedIn state and the login and logout functions\r\n    const auth = useContext(AuthContext);\r\n    const navigate = useNavigate();\r\n    // State to change between login and create\r\n    const [isLoginMode, setIsLoginMode] = useState(true);\r\n    const [errorMessage, setErrorMessage] = useState('');\r\n\r\n    // Allow for validation of input\r\n    const { register, handleSubmit, setValue, formState: { errors } } = useForm();\r\n\r\n    const onSubmit = data => {\r\n        let status; \r\n\r\n        // Either login or create account\r\n        if(isLoginMode) {\r\n            fetch('https://choice-champ-backend.glitch.me/user/signIn', {\r\n                method: 'POST',\r\n                headers: {\r\n                    'Content-Type': 'application/json'\r\n                },\r\n                body: JSON.stringify({\r\n                    username: data.usernameRequired,\r\n                    password: data.passwordRequired\r\n                })\r\n            })\r\n            .then(response => {\r\n                status = response.status;\r\n                return response.json()\r\n            })\r\n            .then(body => {\r\n                if(status === 200) {\r\n                    auth.login();\r\n                    // Save user id to context so it can be used in other backend calls\r\n                    auth.userIdSetter(body.userId);\r\n                    // Set the userId to local storage so it can be used in other backend calls\r\n                    localStorage.setItem('userId', body.userId);\r\n                    navigate('/collections');\r\n                } else {\r\n                    setErrorMessage(body.errMsg);\r\n                }\r\n            })\r\n            .catch(err => {\r\n                console.log(err);\r\n            });\r\n        } else {\r\n            fetch('https://choice-champ-backend.glitch.me/user', {\r\n                method: 'POST',\r\n                headers: {\r\n                    'Content-Type': 'application/json'\r\n                },\r\n                body: JSON.stringify({\r\n                    username: data.usernameRequired,\r\n                    password: data.passwordRequired\r\n                })\r\n            })\r\n            .then(response => {\r\n                status = response.status;\r\n                return response.json()\r\n            })\r\n            .then(body => {\r\n                if(status === 200) {\r\n                auth.login();\r\n                auth.userIdSetter(body.userId);\r\n\r\n                // Set the userId to local storage so it can be used in other backend calls\r\n                localStorage.setItem('userId', body.userId);\r\n\r\n                navigate('/welcome/info');\r\n                } else {\r\n                    setErrorMessage(body.errMsg);\r\n                }\r\n            })\r\n            .catch(err => {\r\n                console.log(err);\r\n            });\r\n        }\r\n    }\r\n\r\n    const switchModeHandler = () => {\r\n        setIsLoginMode(prevMode => !prevMode);\r\n        setErrorMessage('');\r\n        setValue('usernameRequired', '');\r\n        setValue('passwordRequired', '');\r\n\r\n        // Clean useForm errors\r\n        errors.usernameRequired = false;\r\n        errors.passwordRequired = false;\r\n    }\r\n\r\n    const navJoin = () => {\r\n        navigate('/party/joinParty');\r\n    }\r\n\r\n    return (\r\n        <div className='center'>\r\n            <form onSubmit={handleSubmit(onSubmit)}>\r\n                \r\n                <img src='https://cdn.glitch.global/7cdfb78e-767d-42ef-b9ca-2f58981eb393/choice-champ-logo.PNG?v=1694138179997' alt=\"Movie Match Logo\" id=\"logo\" />\r\n                \r\n                <div className='seperator' />\r\n                \r\n                {\r\n                    isLoginMode && (\r\n                        <div>\r\n                            <h3>Welcome Back</h3>\r\n                            <h4>Login to account</h4>\r\n                        </div>\r\n                    )\r\n                }\r\n                {\r\n                    !isLoginMode && (\r\n                        <div>\r\n                            <h3>Welcome!</h3>\r\n                            <h4>Create account</h4>\r\n                        </div>\r\n                    )\r\n                }\r\n                <input id=\"username\" placeholder=\"Username\" {...register(\"usernameRequired\", { required: true, minLength: 5, maxLength: 20 }) }/>\r\n                {errors.usernameRequired && <p className='error'>A username of at least 5 characters is required</p>}\r\n                <input type='password' id=\"password\" placeholder=\"Password\" {...register(\"passwordRequired\", { required: true, minLength: 5 }) }/>\r\n                {errors.passwordRequired && <p className='error'>A password of at lease 5 characters is required</p>}\r\n                {\r\n                    isLoginMode && (\r\n                        <Button type=\"submit\">Login</Button>\r\n                    )\r\n                }\r\n                {\r\n                    !isLoginMode && (\r\n                        <Button type=\"submit\">Create</Button>\r\n                    )\r\n                }\r\n                <p className='auth-error-msg'>{errorMessage}</p>\r\n                <div className='switch'>\r\n                    { isLoginMode && (\r\n                        <div>\r\n                            <p>Don't have an account?</p>\r\n                            <p onClick={switchModeHandler} className=\"switch-link\">Create Account</p>\r\n                            <p onClick={navJoin} className=\"switch-link\">Join Code</p>\r\n                        </div>\r\n                    )}\r\n                    { !isLoginMode && (\r\n                    <div>\r\n                        <p>Already have an account?</p>\r\n                        <p onClick={switchModeHandler} className=\"switch-link\">Login</p>\r\n                    </div>\r\n                    )}\r\n\r\n                </div>\r\n            </form>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Auth;"],"names":["props","_jsx","type","disabled","onClick","className","children","auth","useContext","AuthContext","navigate","useNavigate","_useState","useState","_useState2","_slicedToArray","isLoginMode","setIsLoginMode","_useState3","_useState4","errorMessage","setErrorMessage","_useForm","useForm","register","handleSubmit","setValue","errors","formState","switchModeHandler","prevMode","usernameRequired","passwordRequired","_jsxs","onSubmit","data","status","fetch","method","headers","body","JSON","stringify","username","password","then","response","json","login","userIdSetter","userId","localStorage","setItem","errMsg","catch","err","console","log","src","alt","id","_objectSpread","placeholder","required","minLength","maxLength","Button"],"sourceRoot":""}