{"version":3,"file":"static/js/699.07a558cf.chunk.js","mappings":"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","sources":["shared/assets/img/back.svg","collection/pages/Collection.js"],"sourcesContent":["var _rect, _path;\nvar _excluded = [\"title\", \"titleId\"];\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\nimport * as React from \"react\";\nfunction SvgBack(_ref, svgRef) {\n  var title = _ref.title,\n    titleId = _ref.titleId,\n    props = _objectWithoutProperties(_ref, _excluded);\n  return /*#__PURE__*/React.createElement(\"svg\", _extends({\n    fill: \"none\",\n    height: 40,\n    viewBox: \"0 0 40 40\",\n    width: 40,\n    xmlns: \"http://www.w3.org/2000/svg\",\n    ref: svgRef,\n    \"aria-labelledby\": titleId\n  }, props), title ? /*#__PURE__*/React.createElement(\"title\", {\n    id: titleId\n  }, title) : null, _rect || (_rect = /*#__PURE__*/React.createElement(\"rect\", {\n    height: 39,\n    rx: 19.5,\n    stroke: \"#fff\",\n    width: 39,\n    x: 0.5,\n    y: 0.5\n  })), _path || (_path = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"m17 20-.7071-.7071-.7071.7071.7071.7071zm5.2929-6.7071-6 6 1.4142 1.4142 6-6zm-6 7.4142 6 6 1.4142-1.4142-6-6z\",\n    fill: \"#fff\"\n  })));\n}\nvar ForwardRef = /*#__PURE__*/React.forwardRef(SvgBack);\nexport default __webpack_public_path__ + \"static/media/back.130646437979786be8370a1fdf68655a.svg\";\nexport { ForwardRef as ReactComponent };","import React, { useEffect, useMemo, useState, useContext, useRef } from 'react';\r\nimport { useParams, useNavigate, useLocation } from 'react-router-dom';\r\nimport { AuthContext } from '../../shared/context/auth-context';\r\nimport Loading from '../../shared/components/Loading';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faArrowDownAZ, faClock } from '@fortawesome/free-solid-svg-icons';\r\n\r\nimport back from '../../shared/assets/img/back.svg';\r\nimport add from '../../shared/assets/img/add.png';\r\nimport edit from '../../shared/assets/img/edit.png';\r\nimport editing from '../../shared/assets/img/editing.png';\r\n\r\nimport './Collection.css';\r\n\r\nconst Collection = ({ socket }) => {\r\n    const auth = useContext(AuthContext);\r\n    let navigate = useNavigate();\r\n    /************************************************************\r\n     * Initial load and data needed. Here we grab the info we need\r\n     * from the params and set edit and our items list\r\n     ***********************************************************/\r\n    // Grab the collection type, name and id from the parameters\r\n    let collectionType = useParams().type;\r\n    let collectionId = useParams().id;\r\n    let collectionNameParam = useParams().name;\r\n\r\n    const [items, setItems] = useState([]);\r\n    const [isEdit, setIsEdit] = useState(false);\r\n    const [shareCode, setShareCode] = useState(0);\r\n    const [isLoading, setIsLoading] = useState(true);\r\n    const [collectionName, setCollectionName] = useState(useParams().name);\r\n    const [showAlphabetical, setShowAlphabetical] = useState(false);\r\n    const [navingBack, setNavingBack] = useState(false);\r\n    const [navingAdd, setNavingAdd] = useState(false);\r\n\r\n    const itemsRef = useRef(items);\r\n    const { hash } = useLocation();\r\n\r\n    useEffect(() => {\r\n        auth.showFooterHandler(true);\r\n        // Make a fetch get request to get all the items in a collection\r\n        fetch(`https://choice-champ-backend.glitch.me/collections/items/${collectionId}`, {\r\n            method: 'GET',\r\n            headers: {\r\n                'Content-Type': 'application/json'\r\n            }\r\n        })\r\n        .then(res => res.json())\r\n        .then(data => {\r\n            setItems(data.items);\r\n            itemsRef.current = data.items;\r\n            setShareCode(data.shareCode);\r\n\r\n            // Give a little time for the items to load\r\n            setTimeout(() => {\r\n                setIsLoading(false);\r\n\r\n                // If there is a hash in the url, scroll to that element\r\n                if(hash) {\r\n                    // Add a little more time for the items to load\r\n                    setTimeout(() => {\r\n                        // If there is a hash in the url, scroll to that element\r\n                            const element = document.getElementById(hash.substring(1));\r\n                            element.scrollIntoView({ behavior: \"smooth\" });\r\n                    }, 500);\r\n                }\r\n            }, 500);\r\n\r\n            // Join room with the collection id\r\n            socket.emit('join-room', collectionId);\r\n        });\r\n    }, [auth, collectionId, socket]);\r\n\r\n    useEffect(() => {\r\n        socket.on('remove-item', (id) => {\r\n            // Find item with the id and remove it from the list\r\n            itemsRef.current = itemsRef.current.filter(item => item._id !== id);\r\n            setItems(itemsRef.current);\r\n        });\r\n\r\n        socket.on('watched-item', (id) => {\r\n            // Update the item with the given id to be watched\r\n            itemsRef.current = itemsRef.current.map(item => {\r\n                if(item._id === id && item.watched === false) {\r\n                    item.watched = true;\r\n                } else if(item._id === id && item.watched === true) {\r\n                    item.watched = false;\r\n                }\r\n\r\n                return item;\r\n            });\r\n\r\n            setItems(itemsRef.current);\r\n        });\r\n\r\n        socket.on('add-items', (newItems) => {\r\n            // Push all newItems onto itemsRef.current\r\n            let newArray = [...itemsRef.current, ...newItems];\r\n            itemsRef.current = newArray;\r\n            setItems(itemsRef.current);\r\n        });\r\n\r\n        return () => {\r\n            socket.off('remove-item');\r\n            socket.off('watched-item');\r\n            socket.off('add-items');\r\n        }\r\n    }, [socket]);\r\n\r\n    /************************************************************\r\n     * Logic for setting edit state and removing items\r\n     ***********************************************************/\r\n    const isEditHandler = () => {\r\n        if(isEdit) {\r\n            // Check to make sure the collection name is not empty\r\n            if(collectionName !== '') {\r\n                // If collection name has changed make a fetch post request to update the collection name\r\n                if(collectionName !== collectionNameParam) {\r\n                    fetch(`https://choice-champ-backend.glitch.me/collections/name/${collectionId}`, {\r\n                        method: 'POST',\r\n                        headers: {\r\n                            'Content-Type': 'application/json'\r\n                        },\r\n                        body: JSON.stringify({\r\n                            name: collectionName\r\n                        })\r\n                    })\r\n                    .then(res => {\r\n                        setIsEdit(false);\r\n                    });\r\n                } else {\r\n                    setIsEdit(false);\r\n                }\r\n            } else {\r\n                alert('Collection name cannot be empty');\r\n            }\r\n        } else {\r\n            setIsEdit(true);\r\n        }\r\n    }\r\n\r\n    const removeItem = (id) => {\r\n        // Make a fetch delete request to remove an item from a collection\r\n        fetch(`https://choice-champ-backend.glitch.me/collections/items/${collectionId}/${id}`, {\r\n            method: 'DELETE',\r\n            headers: {\r\n                'Content-Type': 'application/json'\r\n            }\r\n        })\r\n        .then(res => {\r\n            setItems(items.filter(item => item._id !== id));\r\n            itemsRef.current = items;\r\n            // Emit to the server that an item has been removed\r\n            socket.emit('remove-remote-item', id, collectionId);\r\n        });\r\n    }\r\n\r\n    const navBack = () => {\r\n        socket.emit('leave-room', collectionId);\r\n        setNavingBack(true);\r\n        setTimeout(() => {\r\n            setNavingBack(false);\r\n            navigate(`/collections/${collectionType}`);\r\n        }, 1000);\r\n    }\r\n\r\n    const navAdd = () => {\r\n        setNavingAdd(true);\r\n        setTimeout(() => {\r\n            setNavingAdd(false);\r\n            navigate(`/collections/${collectionType}/${collectionName}/${collectionId}/add`);\r\n        }, 1000);\r\n    }\r\n\r\n    const navDetails = (id) => {\r\n        navigate(`/collections/${collectionType}/${collectionName}/${collectionId}/details/${id}`);\r\n    }\r\n\r\n    const updateWatched = (id, watched) => {\r\n        // Make a fetch post request to update the watched status of an item\r\n        fetch(`https://choice-champ-backend.glitch.me/collections/items/${collectionId}/${id}`, {\r\n            method: 'POST',\r\n            headers: {\r\n                'Content-Type': 'application/json'\r\n            },\r\n            body: JSON.stringify({\r\n                watched: !watched\r\n            })\r\n        })\r\n        .then(res => {\r\n            // Update the item with the given id to be watched\r\n            setItems(items.map(item => {\r\n                if(item._id === id && item.watched === false) {\r\n                    item.watched = true;\r\n                } else if(item._id === id && item.watched === true) {\r\n                    item.watched = false;\r\n                }\r\n\r\n                return item;\r\n            }));\r\n\r\n            itemsRef.current = items;\r\n\r\n            // Emit to the server that an item has been watched\r\n            socket.emit('watched-remote-item', id, collectionId);\r\n        });\r\n    }\r\n\r\n    /************************************************************\r\n     * Logic for creating a query from the search bar. I received\r\n     * help and direction from this youtube video Web dev simplified\r\n     * https://youtu.be/E1cklb4aeXA\r\n     ***********************************************************/\r\n    const [query, setQuery] = useState('');\r\n\r\n    // Q: Why do we use useMemo here?\r\n    // A: useMemo is used to optimize the filtering of items. It will only filter the items\r\n    // when the query changes. This is important because if we didn't use useMemo the items\r\n    // would be filtered on every render. This would be a waste of resources.\r\n    const filteredItems = useMemo(() => {\r\n        return items.filter(item => {\r\n            return item.title.toLowerCase().includes(query.toLowerCase());\r\n        })\r\n    }, [items, query]);\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <div className='content'>\r\n                { \r\n                    /* \r\n                        Q: What is the difference between a link and navlink?\r\n                        A: A link is used to navigate to a different page. \r\n                           A navlink is used to navigate to a different page\r\n                           but it also allows you to style the link based on\r\n                           if it is active or not.\r\n                    */ \r\n                }\r\n                <img src={back} alt=\"Back symbol\" className=\"top-left clickable\" onClick={navBack} \r\n                    style={navingBack ? {animation: 'button-press .75s'} : null}\r\n                />\r\n                { isEdit \r\n                    ? (<input className='title' style={{gridColumn:\"5/14\", marginBottom: \"10px\"}} value={collectionName} onChange={e => setCollectionName(e.target.value)} />)\r\n                    : (<h2 className='title'>{collectionName}</h2>)\r\n                }\r\n\r\n                <img src={ isEdit ? editing :  edit } className=\"edit clickable\" alt='Edit icon' onClick={isEditHandler} />\r\n                <div className='share-code'>share code: {shareCode}</div>\r\n                <img src={add} alt='Add icon' className='add clickable' onClick={navAdd} \r\n                    style={navingAdd ? {animation: 'button-press .75s'} : null}\r\n                />\r\n                <input className='search-bar' placeholder='Search Collection' value={query} onChange={e => setQuery(e.target.value)}/>\r\n                <FontAwesomeIcon icon={faArrowDownAZ} size=\"xl\" onClick={() => {setShowAlphabetical(true)}} className={showAlphabetical ? 'active-categorize clickable' : 'clickable'} />\r\n                <FontAwesomeIcon icon={faClock} size=\"xl\" onClick={() => {setShowAlphabetical(false)}} className={!showAlphabetical ? 'active-categorize clickable' : 'clickable'} />\r\n                {\r\n                    isLoading ? <Loading type='beat' className='list-loading' size={20} /> : \r\n                        (\r\n                            <div className={collectionType === 'game' ? 'collection-content-game' : 'collection-content'}>\r\n                                {\r\n                                    (filteredItems.length === 0 && query === '') && <p className='no-items'>No items in this collection</p>\r\n                                }\r\n                                {\r\n                                    (filteredItems.length === 0 && query !== '') && <p className='no-items'>No items match search</p>\r\n                                }\r\n                                {\r\n                                    // Logic to check if we should show the items in alphabetical order or not\r\n                                    showAlphabetical ? (\r\n                                        [...filteredItems].sort((a, b) => a.title.localeCompare(b.title)).map(item => (\r\n                                           // Only show if the item is not watched\r\n                                           !item.watched ?\r\n                                                (<div className='item-section' id={item.itemId} key={item.itemId} onClick={ !isEdit ? () => { navDetails(item.itemId) } : null } >\r\n                                                    { \r\n                                                        !isEdit ? \r\n                                                            <img alt={`${item.title} poster`} className={collectionType === 'movie' || collectionType === 'tv' ? 'item-img clickable' : collectionType === 'game' ? 'game-img clickable' : 'board-img clickable'} src={item.poster} />\r\n                                                            :\r\n                                                            <img alt={`${item.title} poster`} className={collectionType === 'movie' || collectionType === 'tv' ? 'item-img' : collectionType === 'game' ? 'game-img' : 'board-img'} src={item.poster} />\r\n                                                    } \r\n                                                    { (collectionType === 'game' || collectionType === 'board') && <p>{item.title}</p>}\r\n                                                    { isEdit ? (<img src={'https://cdn.glitch.global/7cdfb78e-767d-42ef-b9ca-2f58981eb393/remove.png?v=1682136649433'} alt={`${item.title} poster`} className={ collectionType === 'game' ? 'item-action-game clickable' : 'item-action clickable'} onClick={() => { removeItem(item._id) }} />) : null }\r\n                                                    { isEdit ? (<img src={item.watched ? 'https://cdn.glitch.global/7cdfb78e-767d-42ef-b9ca-2f58981eb393/watched.png?v=1682136650141' : 'https://cdn.glitch.global/7cdfb78e-767d-42ef-b9ca-2f58981eb393/unwatched.png?v=1682136649813'} alt={`${item.title} poster`} className={ collectionType === 'game' ? 'item-action-watched-game clickable' : 'item-action-watched clickable'} onClick={() => {updateWatched(item._id)}} />) : null }\r\n                                                </div>\r\n                                                )\r\n                                            :   null\r\n                                        )) \r\n                                    ) : (\r\n                                        /* \r\n                                            Received help from this article: https://bobbyhadz.com/blog/react-map-array-reverse \r\n                                            We use the spread operator here because we want to make a copy of filteredItems. We don't want\r\n                                            to modify it\r\n                                        */ \r\n                                        [...filteredItems].reverse().map(item => (\r\n                                            // Only show if the item is not watched\r\n                                            !item.watched ?\r\n                                                (<div className='item-section' id={item.itemId} key={item.itemId} onClick={ !isEdit ? () => { navDetails(item.itemId) } : null } >\r\n                                                    { \r\n                                                        !isEdit ? \r\n                                                            <img alt={`${item.title} poster`} className={collectionType === 'movie' || collectionType === 'tv' ? 'item-img clickable' : collectionType === 'game' ? 'game-img clickable' : 'board-img clickable'} src={item.poster} />\r\n                                                            :\r\n                                                            <img alt={`${item.title} poster`} className={collectionType === 'movie' || collectionType === 'tv' ? 'item-img' : collectionType === 'game' ? 'game-img' : 'board-img'} src={item.poster} />\r\n                                                    }\r\n                                                    { (collectionType === 'game' || collectionType === 'board') && <p>{item.title}</p>}\r\n                                                    { isEdit ? (<img src={'https://cdn.glitch.global/7cdfb78e-767d-42ef-b9ca-2f58981eb393/remove.png?v=1682136649433'} alt={`${item.title} poster`} className={ collectionType === 'game' ? 'item-action-game clickable' : 'item-action clickable'} onClick={() => { removeItem(item._id) }} />) : null }\r\n                                                    { isEdit ? (<img src={item.watched ? 'https://cdn.glitch.global/7cdfb78e-767d-42ef-b9ca-2f58981eb393/watched.png?v=1682136650141' : 'https://cdn.glitch.global/7cdfb78e-767d-42ef-b9ca-2f58981eb393/unwatched.png?v=1682136649813'} alt={`${item.title} poster`} className={ collectionType === 'game' ? 'item-action-watched-game clickable' : 'item-action-watched clickable'} onClick={() => {updateWatched(item._id)}} />) : null }\r\n                                                </div>\r\n                                                )\r\n                                            :   null\r\n                                        ))\r\n                                    )\r\n                                }\r\n                                { \r\n                                    // Add a divider if there are watched items\r\n                                    filteredItems.filter(item => item.watched).length > 0 ? <div className={ collectionType === 'game' ? 'divider-game' : 'divider-other'}></div> : null \r\n                                }\r\n                                {\r\n                                    // Logic to check if we should show the items in alphabetical order or not\r\n                                    showAlphabetical ? (\r\n                                        [...filteredItems].sort((a, b) => a.title.localeCompare(b.title)).map(item => (\r\n                                                // Only show if the item is watched\r\n                                                item.watched ?\r\n                                                (\r\n                                                    <div className='item-section' id={item.itemId} key={item.itemId} onClick={ !isEdit ? () => { navDetails(item.itemId) } : null } >\r\n                                                        <img alt={`${item.title} poster`} className={collectionType === 'movie' || collectionType === 'tv' ? 'item-img' : collectionType === 'game' ? 'game-img' : 'board-img'} src={item.poster} />\r\n                                                        { (collectionType === 'game' || collectionType === 'board') && <p>{item.title}</p>}\r\n                                                        { isEdit ? (<img src={'https://cdn.glitch.global/7cdfb78e-767d-42ef-b9ca-2f58981eb393/remove.png?v=1682136649433'} alt={`${item.title} poster`} className={ collectionType === 'game' ? 'item-action-game clickable' : 'item-action clickable'} onClick={() => { removeItem(item._id) }} />) : null }\r\n                                                        { isEdit ? (<img src={item.watched ? 'https://cdn.glitch.global/7cdfb78e-767d-42ef-b9ca-2f58981eb393/watched.png?v=1682136650141' : 'https://cdn.glitch.global/7cdfb78e-767d-42ef-b9ca-2f58981eb393/unwatched.png?v=1682136649813' } alt={`${item.title} poster`} className={ collectionType === 'game' ? 'item-action-watched-game clickable' : 'item-action-watched clickable'} onClick={() => {updateWatched(item._id, item.watched)}} />) : null }\r\n                                                    </div>\r\n                                                )\r\n                                            : null\r\n                                        ))\r\n                                    ) : (\r\n\r\n                                        [...filteredItems].reverse().map(item => (\r\n                                            // Only show if the item is watched\r\n                                            item.watched ?\r\n                                                (\r\n                                                    <div className='item-section' id={item.itemId} key={item.itemId} onClick={ !isEdit ? () => { navDetails(item.itemId) } : null } >\r\n                                                        <img alt={`${item.title} poster`} className={collectionType === 'movie' || collectionType === 'tv' ? 'item-img' : collectionType === 'game' ? 'game-img' : 'board-img'} src={item.poster} />\r\n                                                        { (collectionType === 'game' || collectionType === 'board') && <p>{item.title}</p>}\r\n                                                        { isEdit ? (<img src={'https://cdn.glitch.global/7cdfb78e-767d-42ef-b9ca-2f58981eb393/remove.png?v=1682136649433'} alt={`${item.title} poster`} className={ collectionType === 'game' ? 'item-action-game clickable' : 'item-action clickable'} onClick={() => { removeItem(item._id) }} />) : null }\r\n                                                        { isEdit ? (<img src={item.watched ? 'https://cdn.glitch.global/7cdfb78e-767d-42ef-b9ca-2f58981eb393/watched.png?v=1682136650141' : 'https://cdn.glitch.global/7cdfb78e-767d-42ef-b9ca-2f58981eb393/unwatched.png?v=1682136649813' } alt={`${item.title} poster`} className={ collectionType === 'game' ? 'item-action-watched-game clickable' : 'item-action-watched clickable'} onClick={() => {updateWatched(item._id, item.watched)}} />) : null }\r\n                                                    </div>\r\n                                                )\r\n                                            : null\r\n                                        ))\r\n                                    )\r\n                                }\r\n                            </div>\r\n                        )\r\n                }\r\n            </div>\r\n        </React.Fragment>\r\n    );\r\n}\r\n\r\nexport default Collection;"],"names":["_ref","socket","auth","useContext","AuthContext","navigate","useNavigate","collectionType","useParams","type","collectionId","id","collectionNameParam","name","_useState","useState","_useState2","_slicedToArray","items","setItems","_useState3","_useState4","isEdit","setIsEdit","_useState5","_useState6","shareCode","setShareCode","_useState7","_useState8","isLoading","setIsLoading","_useState9","_useState10","collectionName","setCollectionName","_useState11","_useState12","showAlphabetical","setShowAlphabetical","_useState13","_useState14","navingBack","setNavingBack","_useState15","_useState16","navingAdd","setNavingAdd","itemsRef","useRef","hash","useLocation","useEffect","showFooterHandler","fetch","concat","method","headers","then","res","json","data","current","setTimeout","document","getElementById","substring","scrollIntoView","behavior","emit","on","filter","item","_id","map","watched","newItems","newArray","_toConsumableArray","off","removeItem","navDetails","updateWatched","body","JSON","stringify","_useState17","_useState18","query","setQuery","filteredItems","useMemo","title","toLowerCase","includes","_jsx","React","children","_jsxs","className","src","back","alt","onClick","style","animation","gridColumn","marginBottom","value","onChange","e","target","editing","edit","alert","add","placeholder","FontAwesomeIcon","icon","faArrowDownAZ","size","faClock","Loading","length","sort","a","b","localeCompare","itemId","poster","reverse"],"sourceRoot":""}