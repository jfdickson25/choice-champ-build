{"version":3,"file":"static/js/699.41bf8d88.chunk.js","mappings":"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","sources":["shared/assets/img/back.svg","collection/pages/Collection.js"],"sourcesContent":["var _rect, _path;\nvar _excluded = [\"title\", \"titleId\"];\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\nimport * as React from \"react\";\nfunction SvgBack(_ref, svgRef) {\n  var title = _ref.title,\n    titleId = _ref.titleId,\n    props = _objectWithoutProperties(_ref, _excluded);\n  return /*#__PURE__*/React.createElement(\"svg\", _extends({\n    fill: \"none\",\n    height: 40,\n    viewBox: \"0 0 40 40\",\n    width: 40,\n    xmlns: \"http://www.w3.org/2000/svg\",\n    ref: svgRef,\n    \"aria-labelledby\": titleId\n  }, props), title ? /*#__PURE__*/React.createElement(\"title\", {\n    id: titleId\n  }, title) : null, _rect || (_rect = /*#__PURE__*/React.createElement(\"rect\", {\n    height: 39,\n    rx: 19.5,\n    stroke: \"#fff\",\n    width: 39,\n    x: 0.5,\n    y: 0.5\n  })), _path || (_path = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"m17 20-.7071-.7071-.7071.7071.7071.7071zm5.2929-6.7071-6 6 1.4142 1.4142 6-6zm-6 7.4142 6 6 1.4142-1.4142-6-6z\",\n    fill: \"#fff\"\n  })));\n}\nvar ForwardRef = /*#__PURE__*/React.forwardRef(SvgBack);\nexport default __webpack_public_path__ + \"static/media/back.130646437979786be8370a1fdf68655a.svg\";\nexport { ForwardRef as ReactComponent };","import React, { useEffect, useMemo, useState, useContext, useRef } from 'react';\r\nimport { useParams, useNavigate } from 'react-router-dom';\r\nimport { AuthContext } from '../../shared/context/auth-context';\r\nimport Loading from '../../shared/components/Loading';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faArrowDownAZ, faClock } from '@fortawesome/free-solid-svg-icons';\r\n\r\nimport back from '../../shared/assets/img/back.svg';\r\nimport add from '../../shared/assets/img/add.png';\r\nimport edit from '../../shared/assets/img/edit.png';\r\nimport editing from '../../shared/assets/img/editing.png';\r\n\r\nimport './Collection.css';\r\n\r\nconst Collection = ({ socket }) => {\r\n    const auth = useContext(AuthContext);\r\n    let navigate = useNavigate();\r\n    /************************************************************\r\n     * Initial load and data needed. Here we grab the info we need\r\n     * from the params and set edit and our items list\r\n     ***********************************************************/\r\n    // Grab the collection type, name and id from the parameters\r\n    let collectionType = useParams().type;\r\n    let collectionId = useParams().id;\r\n    let collectionNameParam = useParams().name;\r\n\r\n    const [items, setItems] = useState([]);\r\n    const [isEdit, setIsEdit] = useState(false);\r\n    const [shareCode, setShareCode] = useState(0);\r\n    const [isLoading, setIsLoading] = useState(true);\r\n    const [collectionName, setCollectionName] = useState(useParams().name);\r\n    const [showAlphabetical, setShowAlphabetical] = useState(false);\r\n\r\n    const itemsRef = useRef(items);\r\n\r\n    useEffect(() => {\r\n        auth.showFooterHandler(true);\r\n        // Make a fetch get request to get all the items in a collection\r\n        fetch(`https://choice-champ-backend.glitch.me/collections/items/${collectionId}`, {\r\n            method: 'GET',\r\n            headers: {\r\n                'Content-Type': 'application/json'\r\n            }\r\n        })\r\n        .then(res => res.json())\r\n        .then(data => {\r\n            setItems(data.items);\r\n            itemsRef.current = data.items;\r\n            setShareCode(data.shareCode);\r\n            setIsLoading(false);\r\n\r\n            // Join room with the collection id\r\n            socket.emit('join-room', collectionId);\r\n        });\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        socket.on('remove-item', (id) => {\r\n            // Find item with the id and remove it from the list\r\n            itemsRef.current = itemsRef.current.filter(item => item._id !== id);\r\n            setItems(itemsRef.current);\r\n        });\r\n\r\n        socket.on('watched-item', (id) => {\r\n            // Update the item with the given id to be watched\r\n            itemsRef.current = itemsRef.current.map(item => {\r\n                if(item._id === id && item.watched === false) {\r\n                    item.watched = true;\r\n                } else if(item._id === id && item.watched === true) {\r\n                    item.watched = false;\r\n                }\r\n\r\n                return item;\r\n            });\r\n\r\n            setItems(itemsRef.current);\r\n        });\r\n\r\n        socket.on('add-items', (newItems) => {\r\n            // Push all newItems onto itemsRef.current\r\n            let newArray = [...itemsRef.current, ...newItems];\r\n            itemsRef.current = newArray;\r\n            setItems(itemsRef.current);\r\n        });\r\n\r\n        return () => {\r\n            socket.off('remove-item');\r\n            socket.off('watched-item');\r\n            socket.off('add-items');\r\n        }\r\n    }, []);\r\n\r\n    /************************************************************\r\n     * Logic for setting edit state and removing items\r\n     ***********************************************************/\r\n    const isEditHandler = () => {\r\n        if(isEdit) {\r\n            // Check to make sure the collection name is not empty\r\n            if(collectionName !== '') {\r\n                // If collection name has changed make a fetch post request to update the collection name\r\n                if(collectionName !== collectionNameParam) {\r\n                    fetch(`https://choice-champ-backend.glitch.me/collections/name/${collectionId}`, {\r\n                        method: 'POST',\r\n                        headers: {\r\n                            'Content-Type': 'application/json'\r\n                        },\r\n                        body: JSON.stringify({\r\n                            name: collectionName\r\n                        })\r\n                    })\r\n                    .then(res => {\r\n                        setIsEdit(false);\r\n                    });\r\n                } else {\r\n                    setIsEdit(false);\r\n                }\r\n            } else {\r\n                alert('Collection name cannot be empty');\r\n            }\r\n        } else {\r\n            setIsEdit(true);\r\n        }\r\n    }\r\n\r\n    const removeItem = (id) => {\r\n        // Make a fetch delete request to remove an item from a collection\r\n        fetch(`https://choice-champ-backend.glitch.me/collections/items/${collectionId}/${id}`, {\r\n            method: 'DELETE',\r\n            headers: {\r\n                'Content-Type': 'application/json'\r\n            }\r\n        })\r\n        .then(res => {\r\n            setItems(items.filter(item => item._id !== id));\r\n            itemsRef.current = items;\r\n            // Emit to the server that an item has been removed\r\n            socket.emit('remove-remote-item', id, collectionId);\r\n        });\r\n    }\r\n\r\n    const navBack = () => {\r\n        socket.emit('leave-room', collectionId);\r\n        navigate(`/collections/${collectionType}`);\r\n    }\r\n\r\n    const navAdd = () => {\r\n        navigate(`/collections/${collectionType}/${collectionName}/${collectionId}/add`);\r\n    }\r\n\r\n    const navDetails = (id) => {\r\n        navigate(`/collections/${collectionType}/${collectionName}/${collectionId}/details/${id}`);\r\n    }\r\n\r\n    const updateWatched = (id, watched) => {\r\n        // Make a fetch post request to update the watched status of an item\r\n        fetch(`https://choice-champ-backend.glitch.me/collections/items/${collectionId}/${id}`, {\r\n            method: 'POST',\r\n            headers: {\r\n                'Content-Type': 'application/json'\r\n            },\r\n            body: JSON.stringify({\r\n                watched: !watched\r\n            })\r\n        })\r\n        .then(res => {\r\n            // Update the item with the given id to be watched\r\n            setItems(items.map(item => {\r\n                if(item._id === id && item.watched === false) {\r\n                    item.watched = true;\r\n                } else if(item._id === id && item.watched === true) {\r\n                    item.watched = false;\r\n                }\r\n\r\n                return item;\r\n            }));\r\n\r\n            itemsRef.current = items;\r\n\r\n            // Emit to the server that an item has been watched\r\n            socket.emit('watched-remote-item', id, collectionId);\r\n        });\r\n    }\r\n\r\n    /************************************************************\r\n     * Logic for creating a query from the search bar. I received\r\n     * help and direction from this youtube video Web dev simplified\r\n     * https://youtu.be/E1cklb4aeXA\r\n     ***********************************************************/\r\n    const [query, setQuery] = useState('');\r\n\r\n    // Q: Why do we use useMemo here?\r\n    // A: useMemo is used to optimize the filtering of items. It will only filter the items\r\n    // when the query changes. This is important because if we didn't use useMemo the items\r\n    // would be filtered on every render. This would be a waste of resources.\r\n    const filteredItems = useMemo(() => {\r\n        return items.filter(item => {\r\n            return item.title.toLowerCase().includes(query.toLowerCase());\r\n        })\r\n    }, [items, query]);\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <div className='content'>\r\n                { \r\n                    /* \r\n                        Q: What is the difference between a link and navlink?\r\n                        A: A link is used to navigate to a different page. \r\n                           A navlink is used to navigate to a different page\r\n                           but it also allows you to style the link based on\r\n                           if it is active or not.\r\n                    */ \r\n                }\r\n                <img src={back} alt=\"Back symbol\" className=\"top-left\" onClick={navBack} />\r\n                { isEdit \r\n                    ? (<input className='title' style={{gridColumn:\"5/14\", marginBottom: \"10px\"}} value={collectionName} onChange={e => setCollectionName(e.target.value)} />)\r\n                    : (<h2 className='title'>{collectionName}</h2>)\r\n                }\r\n\r\n                <img src={ isEdit ? editing :  edit } className=\"edit\" alt='Edit icon' onClick={isEditHandler} />\r\n                <div className='share-code'>share code: {shareCode}</div>\r\n                <img src={add} alt='Add icon' className='add' onClick={navAdd} />\r\n                <input className='search-bar' placeholder='Search Collection' value={query} onChange={e => setQuery(e.target.value)}/>\r\n                <FontAwesomeIcon icon={faArrowDownAZ} size=\"xl\" onClick={() => {setShowAlphabetical(true)}} className={showAlphabetical ? 'active-categorize' : ''} />\r\n                <FontAwesomeIcon icon={faClock} size=\"xl\" onClick={() => {setShowAlphabetical(false)}} className={!showAlphabetical ? 'active-categorize' : ''} />\r\n                {\r\n                    isLoading ? <Loading type='beat' className='list-loading' size={20} /> : \r\n                        (\r\n                            <div className={collectionType === 'game' ? 'collection-content-game' : 'collection-content'}>\r\n                                { /* \r\n                                    Received help from this article: https://bobbyhadz.com/blog/react-map-array-reverse \r\n                                    We use the spread operator here because we want to make a copy of filteredItems. We don't want\r\n                                    to modify it\r\n                                */ \r\n                                }\r\n                                {\r\n                                    // TODO: Modify this logic to show a message for filtering and for when there are no items in the collection\r\n                                    // Add a message if there are no items in the collection\r\n                                    filteredItems.length === 0 && <p style={{textAlign: 'center', gridColumn: '1/3', fontWeight: 'bold'}}>No items in this collection</p>\r\n                                }\r\n                                {\r\n                                    // Logic to check if we should show the items in alphabetical order or not\r\n                                    showAlphabetical ? (\r\n                                        [...filteredItems].sort((a, b) => a.title.localeCompare(b.title)).map(item => (\r\n                                           // Only show if the item is not watched\r\n                                           !item.watched ?\r\n                                                (<div className='item-section' key={item.itemId} onClick={ !isEdit ? () => { navDetails(item.itemId) } : null } >\r\n                                                    <img className='item-img' src={item.poster} />{(collectionType === 'game' || collectionType === 'board') && <p>{item.title}</p>}\r\n                                                    { isEdit ? (<img src={'https://cdn.glitch.global/7cdfb78e-767d-42ef-b9ca-2f58981eb393/remove.png?v=1682136649433'} alt={`${item.title} poster`} className='item-action' onClick={() => { removeItem(item._id) }} />) : null }\r\n                                                    { isEdit ? (<img src={item.watched ? 'https://cdn.glitch.global/7cdfb78e-767d-42ef-b9ca-2f58981eb393/watched.png?v=1682136650141' : 'https://cdn.glitch.global/7cdfb78e-767d-42ef-b9ca-2f58981eb393/unwatched.png?v=1682136649813'} alt={`${item.title} poster`} className='item-action-watched' onClick={() => {updateWatched(item._id)}} />) : null }\r\n                                                </div>\r\n                                                )\r\n                                            :   null\r\n                                        )) \r\n                                    ) : (\r\n                                        [...filteredItems].reverse().map(item => (\r\n                                            // Only show if the item is not watched\r\n                                            !item.watched ?\r\n                                                (<div className='item-section' key={item.itemId} onClick={ !isEdit ? () => { navDetails(item.itemId) } : null } >\r\n                                                    <img className='item-img' src={item.poster} />{(collectionType === 'game' || collectionType === 'board') && <p>{item.title}</p>}\r\n                                                    { isEdit ? (<img src={'https://cdn.glitch.global/7cdfb78e-767d-42ef-b9ca-2f58981eb393/remove.png?v=1682136649433'} alt={`${item.title} poster`} className='item-action' onClick={() => { removeItem(item._id) }} />) : null }\r\n                                                    { isEdit ? (<img src={item.watched ? 'https://cdn.glitch.global/7cdfb78e-767d-42ef-b9ca-2f58981eb393/watched.png?v=1682136650141' : 'https://cdn.glitch.global/7cdfb78e-767d-42ef-b9ca-2f58981eb393/unwatched.png?v=1682136649813'} alt={`${item.title} poster`} className='item-action-watched' onClick={() => {updateWatched(item._id)}} />) : null }\r\n                                                </div>\r\n                                                )\r\n                                            :   null\r\n                                        ))\r\n                                    )\r\n                                }\r\n                                { \r\n                                    // Add a divider if there are watched items\r\n                                    filteredItems.filter(item => item.watched).length > 0 ? <div className={ collectionType === 'game' ? 'divider-game' : 'divider-other'}></div> : null \r\n                                }\r\n                                {\r\n                                    // Logic to check if we should show the items in alphabetical order or not\r\n                                    showAlphabetical ? (\r\n                                        [...filteredItems].sort((a, b) => a.title.localeCompare(b.title)).map(item => (\r\n                                                // Only show if the item is watched\r\n                                                item.watched ?\r\n                                                (\r\n                                                    <div className='item-section' key={item.itemId} >\r\n                                                        <img className='item-img' src={item.poster} />{(collectionType === 'game' || collectionType === 'board') && <p>{item.title}</p>}\r\n                                                        { isEdit ? (<img src={'https://cdn.glitch.global/7cdfb78e-767d-42ef-b9ca-2f58981eb393/remove.png?v=1682136649433'} alt={`${item.title} poster`} className='item-action' onClick={() => { removeItem(item._id) }} />) : null }\r\n                                                        { isEdit ? (<img src={item.watched ? 'https://cdn.glitch.global/7cdfb78e-767d-42ef-b9ca-2f58981eb393/watched.png?v=1682136650141' : 'https://cdn.glitch.global/7cdfb78e-767d-42ef-b9ca-2f58981eb393/unwatched.png?v=1682136649813' } alt={`${item.title} poster`} className='item-action-watched' onClick={() => {updateWatched(item._id, item.watched)}} />) : null }\r\n                                                    </div>\r\n                                                )\r\n                                            : null\r\n                                        ))\r\n                                    ) : (\r\n\r\n                                        [...filteredItems].reverse().map(item => (\r\n                                            // Only show if the item is watched\r\n                                            item.watched ?\r\n                                                (\r\n                                                    <div className='item-section' key={item.itemId} >\r\n                                                        <img className='item-img' src={item.poster} />{(collectionType === 'game' || collectionType === 'board') && <p>{item.title}</p>}\r\n                                                        { isEdit ? (<img src={'https://cdn.glitch.global/7cdfb78e-767d-42ef-b9ca-2f58981eb393/remove.png?v=1682136649433'} alt={`${item.title} poster`} className='item-action' onClick={() => { removeItem(item._id) }} />) : null }\r\n                                                        { isEdit ? (<img src={item.watched ? 'https://cdn.glitch.global/7cdfb78e-767d-42ef-b9ca-2f58981eb393/watched.png?v=1682136650141' : 'https://cdn.glitch.global/7cdfb78e-767d-42ef-b9ca-2f58981eb393/unwatched.png?v=1682136649813' } alt={`${item.title} poster`} className='item-action-watched' onClick={() => {updateWatched(item._id, item.watched)}} />) : null }\r\n                                                    </div>\r\n                                                )\r\n                                            : null\r\n                                        ))\r\n                                    )\r\n                                }\r\n                            </div>\r\n                        )\r\n                }\r\n            </div>\r\n        </React.Fragment>\r\n    );\r\n}\r\n\r\nexport default Collection;"],"names":["_ref","socket","auth","useContext","AuthContext","navigate","useNavigate","collectionType","useParams","type","collectionId","id","collectionNameParam","name","_useState","useState","_useState2","_slicedToArray","items","setItems","_useState3","_useState4","isEdit","setIsEdit","_useState5","_useState6","shareCode","setShareCode","_useState7","_useState8","isLoading","setIsLoading","_useState9","_useState10","collectionName","setCollectionName","_useState11","_useState12","showAlphabetical","setShowAlphabetical","itemsRef","useRef","useEffect","showFooterHandler","fetch","concat","method","headers","then","res","json","data","current","emit","on","filter","item","_id","map","watched","newItems","newArray","_toConsumableArray","off","removeItem","navDetails","updateWatched","body","JSON","stringify","_useState13","_useState14","query","setQuery","filteredItems","useMemo","title","toLowerCase","includes","_jsx","React","children","_jsxs","className","src","back","alt","onClick","style","gridColumn","marginBottom","value","onChange","e","target","editing","edit","alert","add","placeholder","FontAwesomeIcon","icon","faArrowDownAZ","size","faClock","Loading","length","textAlign","fontWeight","sort","a","b","localeCompare","itemId","poster","reverse"],"sourceRoot":""}