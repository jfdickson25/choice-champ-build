{"version":3,"file":"static/js/474.937dddd6.chunk.js","mappings":"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","sources":["shared/assets/img/back.svg","collection/pages/Search.js"],"sourcesContent":["var _rect, _path;\nvar _excluded = [\"title\", \"titleId\"];\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\nimport * as React from \"react\";\nfunction SvgBack(_ref, svgRef) {\n  var title = _ref.title,\n    titleId = _ref.titleId,\n    props = _objectWithoutProperties(_ref, _excluded);\n  return /*#__PURE__*/React.createElement(\"svg\", _extends({\n    fill: \"none\",\n    height: 40,\n    viewBox: \"0 0 40 40\",\n    width: 40,\n    xmlns: \"http://www.w3.org/2000/svg\",\n    ref: svgRef,\n    \"aria-labelledby\": titleId\n  }, props), title ? /*#__PURE__*/React.createElement(\"title\", {\n    id: titleId\n  }, title) : null, _rect || (_rect = /*#__PURE__*/React.createElement(\"rect\", {\n    height: 39,\n    rx: 19.5,\n    stroke: \"#fff\",\n    width: 39,\n    x: 0.5,\n    y: 0.5\n  })), _path || (_path = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"m17 20-.7071-.7071-.7071.7071.7071.7071zm5.2929-6.7071-6 6 1.4142 1.4142 6-6zm-6 7.4142 6 6 1.4142-1.4142-6-6z\",\n    fill: \"#fff\"\n  })));\n}\nvar ForwardRef = /*#__PURE__*/React.forwardRef(SvgBack);\nexport default __webpack_public_path__ + \"static/media/back.130646437979786be8370a1fdf68655a.svg\";\nexport { ForwardRef as ReactComponent };","import React, { useRef, useState, useEffect, useContext } from 'react';\r\nimport { useParams, useNavigate } from 'react-router-dom';\r\nimport { AuthContext } from '../../shared/context/auth-context';\r\nimport Loading from '../../shared/components/Loading';\r\nimport _ from 'lodash';\r\n\r\nimport './Search.css';\r\n\r\nimport back from '../../shared/assets/img/back.svg';\r\nimport circle from '../../shared/assets/img/circle.png';\r\nimport filledCircle from '../../shared/assets/img/filled-circle.png';\r\nimport check from '../../shared/assets/img/check.png';\r\nimport { set } from 'react-hook-form';\r\n\r\nconst Search = ({ socket }) => {\r\n    const auth = useContext(AuthContext);\r\n    let navigate = useNavigate();\r\n\r\n    /************************************************************\r\n     * Initial load and data needed. Here we grab the info we need\r\n     * from the params and set edit and our movies list\r\n     ***********************************************************/\r\n    // Grab the collection name and id from the parameters\r\n    let collectionType = useParams().type;\r\n    let collectionName = useParams().name;\r\n    let collectionId = useParams().id;\r\n\r\n    const [items, setItems] = useState([]);\r\n    const [collection, setCollection] = useState([]);\r\n    const [isLoading, setIsLoading] = useState(false);\r\n    const [navingBack, setNavingBack] = useState(false);\r\n\r\n    // Create a ref of collection\r\n    const collectionRef = useRef(collection);\r\n\r\n    useEffect(() => {\r\n        auth.showFooterHandler(false);\r\n        // Get all the items in the collection to check if any items in the search are already in the collection\r\n        fetch(`https://choice-champ-backend.glitch.me/collections/items/${collectionId}`, {\r\n            method: 'GET',\r\n            headers: {\r\n                'Content-Type': 'application/json'\r\n            }\r\n        })\r\n        .then(res => res.json())\r\n        .then(data => {\r\n            // Verify that data.items is not undefined\r\n            if(data.items) {\r\n                // Set collection to the items in the collection but only the id\r\n                collectionRef.current = data.items.map(item => {\r\n                    return {\r\n                        itemId: item.itemId,\r\n                        mongoId: item._id\r\n                    }\r\n                });\r\n\r\n                setCollection(collectionRef.current);\r\n            }\r\n        });\r\n    }, [auth, collectionType, collectionId]);\r\n\r\n    const updateList = (search) => {\r\n        if (search === '' || search === undefined || search === null) {\r\n            setItems([]);\r\n            setIsLoading(false);\r\n            return;\r\n        }\r\n\r\n        // Make a fetch request to get all movies that match the search\r\n        fetch(`https://choice-champ-backend.glitch.me/media/${collectionType}/${search}/1`)\r\n        .then(res => res.json())\r\n        .then(res => {\r\n            // Reset the items to populate with updated value\r\n            setItems([]);\r\n\r\n                res.media.results.forEach(mediaItem => {\r\n\r\n                // Make sure the item is not already in the collection\r\n                let inCollection = false;\r\n\r\n                // Check if item exists in collection ref\r\n                collectionRef.current.forEach(item => {\r\n                    if(item.itemId === mediaItem.id) {\r\n                        inCollection = true;\r\n                    }\r\n                });\r\n\r\n                if (collectionType === 'movie') {\r\n                    setItems(prevState => [...prevState, {\r\n                        id: mediaItem.id,\r\n                        title: mediaItem.title,\r\n                        poster: `https://image.tmdb.org/t/p/w500${mediaItem.poster_path}`,\r\n                        selected: false,\r\n                        inCollection: inCollection,\r\n                        loadingUpdate: false\r\n                    }]);\r\n\r\n                    setIsLoading(false);\r\n                } else if (collectionType === 'tv') {\r\n                    setItems(prevState => [...prevState, {\r\n                        id: mediaItem.id,\r\n                        title: mediaItem.name,\r\n                        poster: `https://image.tmdb.org/t/p/w500${mediaItem.poster_path}`,\r\n                        selected: false,\r\n                        inCollection: inCollection,\r\n                        loadingUpdate: false\r\n                    }]);\r\n\r\n                    setIsLoading(false);\r\n                } else if (collectionType === 'game') {\r\n                    setItems(prevState => [...prevState, {\r\n                        id: mediaItem.id,\r\n                        title: mediaItem.name,\r\n                        poster: mediaItem.background_image,\r\n                        selected: false,\r\n                        inCollection: inCollection,\r\n                        loadingUpdate: false\r\n                    }]);\r\n\r\n                    setIsLoading(false);\r\n                } else if (collectionType === 'board') {\r\n                    setItems(prevState => [...prevState, {\r\n                        id: mediaItem.id,\r\n                        title: mediaItem.name,\r\n                        selected: false,\r\n                        inCollection: inCollection,\r\n                        loadingUpdate: false\r\n                    }]);\r\n\r\n                    setIsLoading(false);\r\n                }\r\n            });\r\n        });\r\n    };\r\n\r\n    // useRef is used to create a mutable ref object whose .current property is initialized \r\n    // to the passed argument (initialValue). The returned object will persist for the full lifetime of the component.\r\n    // Debounce is a function to limit the number of times a function can be called in a given time period\r\n    let debounced = useRef(_.debounce(updateList, 2000, {'search' : ''})).current;\r\n\r\n    // Functions for handling change to input\r\n    const changeHandler = (event) => {\r\n        setIsLoading(true);\r\n        // Debounce example from web dev simplified (TODO: Watch rest on throttle)\r\n        // https://www.youtube.com/watch?v=cjIswDCKgu0\r\n        debounced(event.target.value);\r\n    }\r\n\r\n    const removeItem = (itemId) => {\r\n        // Find the collection item with the itemId and remove it from the collection\r\n        const collectionItem = collectionRef.current.find(item => item.itemId === itemId);\r\n\r\n        // Find the item with the id and set loadingUpdate to true\r\n        const loadingSetItems = items.map(item => {\r\n            if(item.id === itemId) {\r\n                item.loadingUpdate = true;\r\n            }\r\n            return item;\r\n        });\r\n        setItems(loadingSetItems);\r\n\r\n        fetch(`https://choice-champ-backend.glitch.me/collections/items/${collectionId}/${collectionItem.mongoId}`, {\r\n            method: 'DELETE',\r\n            headers: {\r\n                'Content-Type': 'application/json'\r\n            }\r\n        });\r\n\r\n        // Find the item with the id and set inCollection to false\r\n        const updatedItems = items.map(item => {\r\n            if(item.id === itemId) {\r\n                item.inCollection = false;\r\n                item.loadingUpdate = false;\r\n            }\r\n            return item;\r\n        });\r\n\r\n        setItems(updatedItems);\r\n\r\n        // Remove the item from the collection\r\n        const updatedCollection = collectionRef.current.filter(item => item.itemId !== itemId);\r\n        collectionRef.current = updatedCollection;\r\n        setCollection(collectionRef.current);\r\n\r\n        // Emit to the server that an item has been removed\r\n        socket.emit('remove-remote-item', collectionItem.mongoId, collectionId);\r\n    }\r\n\r\n    const addItem = (itemId, itemTitle, itemPoster) => {\r\n        // Find the item with the id and set loadingUpdate to true\r\n        const loadingSetItems = items.map(item => {\r\n            if(item.id === itemId) {\r\n                item.loadingUpdate = true;\r\n            }\r\n            return item;\r\n        });\r\n        setItems(loadingSetItems);\r\n\r\n        // Make a fetch post request to add an item to a collection\r\n        fetch(`https://choice-champ-backend.glitch.me/collections/items/${collectionId}`, {\r\n            method: 'POST',\r\n            headers: {\r\n                'Content-Type': 'application/json'\r\n            },\r\n            body: JSON.stringify([{\r\n                title: itemTitle,\r\n                id: itemId,\r\n                poster: itemPoster\r\n            }])\r\n        })\r\n        .then(res => res.json())\r\n        .then(data => {\r\n            collectionRef.current.push({itemId: itemId, mongoId: data.newItems[0]._id});\r\n            setCollection(collectionRef.current);\r\n\r\n            socket.emit('add-remote-item', {title: itemTitle, itemId: itemId, poster: itemPoster, _id: data.newItems[0]._id, watched: false}, collectionId);\r\n\r\n            // Update the items inCollection value\r\n            const updatedItems = items.map(item => {\r\n                if(item.id === itemId) {\r\n                    item.inCollection = true;\r\n                    item.loadingUpdate = false;\r\n                }\r\n                return item;\r\n            });\r\n            setItems(updatedItems);\r\n        });\r\n    }\r\n\r\n    const navBack = () => {\r\n        setNavingBack(true);\r\n        setTimeout(() => {\r\n            setNavingBack(false);\r\n            navigate(`/collections/${collectionType}/${collectionName}/${collectionId}`);\r\n        }, 1000);\r\n    }\r\n\r\n    return (\r\n        <div className='content'>\r\n            <img src={back} alt=\"Back symbol\" className=\"top-left clickable\" onClick={navBack} \r\n                style={navingBack ? {animation: 'button-press .75s'} : null}\r\n            />\r\n            <h2 className='title'>{collectionName}</h2>\r\n            <input className='search-bar' placeholder='Search' onChange={changeHandler} />\r\n            {\r\n                isLoading ? <Loading type='sync' className='list-loading' size={15} speed={.5} /> :\r\n                (<div className={collectionType === 'game' ? 'collection-content-game' : 'collection-content'}>\r\n                    {items.map(item => (\r\n                        <div className='item-section' key={item.id} onClick={() => {\r\n                            if(!item.inCollection) {\r\n                                if(collectionType === 'board') {\r\n                                    addItem(item.id, item.title);\r\n                                } else {\r\n                                    addItem(item.id, item.title, item.poster);\r\n                                }\r\n                            } else {\r\n                                removeItem(item.id);\r\n                            }\r\n                        }}>\r\n\r\n                            { \r\n                                collectionType !== 'board' ?\r\n                                <img src={item.poster} alt={`${item.title} poster`} className={collectionType === 'movie' || collectionType === 'tv' ? 'item-img' : 'game-img'} /> \r\n                                :\r\n                                <div className='board-img-search' /> \r\n                            }\r\n                            { (collectionType !== 'movie' && collectionType !== 'tv') && ( <p className={ collectionType === 'board' ? 'item-title' : undefined }>{item.title}</p> ) }                      \r\n                            {\r\n                                item.loadingUpdate ? \r\n                                (\r\n                                    <Loading type='beat' size={15} speed={.5} className='loading-save' />\r\n                                ) :\r\n                                (\r\n                                    item.inCollection ? \r\n                                    (<img src={check} alt={`${item.title} saved`} style={collectionType === 'game' ? {width: '15%'} : null} className={collectionType === 'game' ? 'item-action-game clickable' : 'item-action clickable'} />) :\r\n                                    (<img id={item.id} src={circle} alt={`${item.title} unselected`} className={collectionType === 'game' ? 'item-action-game clickable' : 'item-action clickable'} />)\r\n                                )\r\n                            }\r\n                            </div>\r\n                    ))}\r\n                </div>)\r\n            }\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Search;"],"names":["_ref","socket","auth","useContext","AuthContext","navigate","useNavigate","collectionType","useParams","type","collectionName","name","collectionId","id","_useState","useState","_useState2","_slicedToArray","items","setItems","_useState3","_useState4","collection","setCollection","_useState5","_useState6","isLoading","setIsLoading","_useState7","_useState8","navingBack","setNavingBack","collectionRef","useRef","useEffect","showFooterHandler","fetch","concat","method","headers","then","res","json","data","current","map","item","itemId","mongoId","_id","debounced","_","search","undefined","media","results","forEach","mediaItem","inCollection","prevState","_toConsumableArray","title","poster","poster_path","selected","loadingUpdate","background_image","addItem","itemTitle","itemPoster","loadingSetItems","body","JSON","stringify","push","newItems","emit","watched","updatedItems","_jsxs","className","children","_jsx","src","back","alt","onClick","setTimeout","style","animation","placeholder","onChange","event","target","value","Loading","size","speed","collectionItem","find","updatedCollection","filter","removeItem","check","width","circle"],"sourceRoot":""}