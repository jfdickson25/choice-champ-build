{"version":3,"file":"static/js/667.31949f55.chunk.js","mappings":"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","sources":["collections/pages/Collections.js","shared/components/FormElements/Button.js"],"sourcesContent":["import React, { useEffect, useRef, useState, useContext } from 'react';\r\nimport { useParams, useNavigate, Link } from 'react-router-dom';\r\nimport { Dialog } from '@mui/material';\r\nimport Loading from '../../shared/components/Loading';\r\n\r\nimport edit from '../../shared/assets/img/edit.png';\r\nimport editing from '../../shared/assets/img/editing.png';\r\n\r\nimport './Collections.css';\r\nimport { AuthContext } from '../../shared/context/auth-context';\r\nimport Button from '../../shared/components/FormElements/Button';\r\n\r\nconst Collections = props => {\r\n    const auth = useContext(AuthContext);\r\n    let navigate = useNavigate();\r\n\r\n    /************************************************************\r\n     * Initial load and data needed. Here we grab the info we need\r\n     * from the params and set edit and our collections list\r\n     ***********************************************************/\r\n    // Grab the type from the parameters\r\n    let collectionsType = useParams().type;\r\n\r\n    // Variable for title depending on the category\r\n    const [title, setTitle] = useState('');\r\n    // State for collections\r\n    const [collections, setCollections] = useState([]);\r\n    const [isEdit, setIsEdit] = useState(false);\r\n    const [isLoading, setIsLoading] = useState(true);\r\n\r\n    // State for error messages\r\n    const [nameError, setNameError] = useState(null);\r\n    const [nameErrorText, setNameErrorText] = useState('');\r\n    const [joinError, setJoinError] = useState('');\r\n    const [navingBack, setNavingBack] = useState(false);\r\n    const [pressingBtn, setPressingBtn] = useState(false);\r\n    const [collectionTypeColor, setCollectionTypeColor] = useState('#FCB016');\r\n\r\n    // Empty array will only run on the initial render\r\n    useEffect(() => {\r\n        auth.showFooterHandler(true);\r\n        \r\n        // Set the title depending on the type\r\n        if(collectionsType === 'movie') {\r\n            setTitle('Movie Collections')\r\n            setCollectionTypeColor('#FCB016');\r\n        } else if(collectionsType === 'tv') {\r\n            setTitle('TV Collections')\r\n            setCollectionTypeColor('#FF4D4D');\r\n        } else if(collectionsType === 'game') {\r\n            setTitle('Game Collections')\r\n            setCollectionTypeColor('#2482C5');\r\n        } else if(collectionsType === 'board') {\r\n            setTitle('Board Game Collections')\r\n            setCollectionTypeColor('#45B859');\r\n        }\r\n        \r\n        // Make a fetch post request to collections with the userId and setCollections to the response\r\n        fetch(`https://choice-champ-backend.glitch.me/collections/${collectionsType}/${auth.userId}`, {\r\n            method: 'GET',\r\n            headers: {\r\n                'Content-Type': 'application/json'\r\n            }\r\n        })\r\n        .then(res => res.json())\r\n        .then(data => {\r\n            setCollections(data.collections);\r\n            setIsLoading(false);\r\n        });\r\n    }, [auth, collectionsType]);\r\n\r\n    /************************************************************\r\n     * Logic for setting edit state and removing movies\r\n     ***********************************************************/\r\n     const isEditHandler = () => isEdit ? setIsEdit(false) : setIsEdit(true);\r\n\r\n     const handleRemoveCollection = (id) => {\r\n            // Send a fetch delete request to collections with the userId and the collection id\r\n            fetch(`https://choice-champ-backend.glitch.me/collections/${collectionsType}/${auth.userId}/${id}`, {\r\n                method: 'DELETE',\r\n                headers: {\r\n                    'Content-Type': 'application/json'\r\n                }\r\n            })\r\n            .then(data => {\r\n                // Remove the collection from the collections array\r\n                setCollections(collections.filter(collection => collection._id !== id));\r\n            })\r\n            .catch(err => {\r\n                console.log(err);\r\n            }\r\n        )\r\n     }\r\n\r\n\r\n    /************************************************************\r\n     * Logic for our dialog, including adding new categories\r\n     ***********************************************************/\r\n    // Modal state and functions\r\n    const [open, setOpen] = useState(false);\r\n    // Modal input state and function\r\n    const inputCollectionRef = useRef();\r\n    const inputJoinRef = useRef();\r\n    const handleOpen = () => setOpen(true);\r\n\r\n    const handleClose = () => {\r\n        // Reset the value in the input\r\n        inputCollectionRef.current.value = '';\r\n        inputJoinRef.current.value = null;\r\n        setNameError(false);\r\n        setJoinError('');\r\n        setOpen(false);\r\n    }\r\n\r\n    const changeCollectionHandler = (event) => {\r\n        const value = event.target.value;\r\n\r\n        inputCollectionRef.current.value = value;\r\n    }\r\n\r\n    const changeJoinCodeHandler = (event) => {\r\n        const value = event.target.value;\r\n\r\n        inputJoinRef.current.value = value;\r\n    }\r\n\r\n    const handleAddCollection = () => {\r\n\r\n        // Only add if the input is not empty and the collection does not already exist\r\n        if(inputCollectionRef.current.value === '') {\r\n            setNameError(true);\r\n            setNameErrorText('Collection must have a name');\r\n            return;\r\n        } else if (collections.find(collection => collection.name === inputCollectionRef.current.value)) {\r\n            setNameError(true);\r\n            setNameErrorText('Collection with that name already exists');\r\n            return;\r\n        }\r\n\r\n        // Send a fetch post request to collections with the userId and the new collection name\r\n        fetch(`https://choice-champ-backend.glitch.me/collections/${auth.userId}`, {\r\n            method: 'POST',\r\n            headers: {\r\n                'Content-Type': 'application/json'\r\n            },\r\n            body: JSON.stringify({\r\n                name: inputCollectionRef.current.value,\r\n                type: collectionsType\r\n            })\r\n        })\r\n        .then(res => res.json())\r\n        .then(data => {\r\n            // Add the new collection to the collections array\r\n            setCollections([...collections, data.collection]);\r\n        })\r\n        .catch(err => {\r\n            console.log(err);\r\n        });\r\n\r\n\r\n        // Close the modal\r\n        handleClose();\r\n    }\r\n\r\n    const handleJoinCollection = () => {\r\n\r\n        // Check that the code is five digits long\r\n        if(inputJoinRef.current.value.length !== 5) {\r\n            setJoinError('Code must be 5 digits long');\r\n            return;\r\n        }\r\n\r\n        // Send a fetch post request to collections with the userId and the new collection name\r\n        fetch(`https://choice-champ-backend.glitch.me/collections/join/${inputJoinRef.current.value}/${collectionsType}/${auth.userId}`, {\r\n            method: 'GET',\r\n            headers: {\r\n                'Content-Type': 'application/json'\r\n            }\r\n        })\r\n        .then(res => res.json())\r\n        .then(data => {\r\n            if (data.errMsg) {\r\n                setJoinError(data.errMsg);\r\n                return;\r\n            } else {\r\n                // Add the new collection to the collections array\r\n                setCollections([...collections, data.collection]);\r\n                // Close the modal\r\n                handleClose();\r\n            }\r\n        })\r\n        .catch(err => {\r\n            console.log(err);\r\n        });\r\n    }\r\n\r\n    const navBack = () => {\r\n        setNavingBack(true);\r\n        setTimeout(() => {\r\n            setNavingBack(false);\r\n            navigate('/collections');\r\n        }, 1000);\r\n    }\r\n\r\n    const moveLeft = (id) => {\r\n        // Find the collection with the id parameter\r\n        const collection = collections.find(collection => collection._id === id);\r\n        // Move the collection to the left in the collections array\r\n        const index = collections.indexOf(collection);\r\n        if(index === 0) {\r\n            return;\r\n        }\r\n        const newCollections = [...collections];\r\n        newCollections.splice(index, 1);\r\n        newCollections.splice(index - 1, 0, collection);\r\n        setCollections(newCollections);\r\n\r\n        // Send a fetch post request with the userId and the collection id to move the collection left\r\n        fetch(`https://choice-champ-backend.glitch.me/collections/moveLeft/${collectionsType}/${auth.userId}/${id}`, {\r\n            method: 'POST',\r\n            headers: {\r\n                'Content-Type': 'application/json'\r\n            }\r\n        })\r\n        .then(data => {\r\n            setCollections(newCollections);\r\n        })\r\n        .catch(err => {\r\n            console.log(err);\r\n        });\r\n    }\r\n\r\n    const moveRight = (id) => {\r\n        // Find the collection with the id parameter\r\n        const collection = collections.find(collection => collection._id === id);\r\n        // Move the collection to the right in the collections array\r\n        const index = collections.indexOf(collection);\r\n        if(index === collections.length - 1) {\r\n            return;\r\n        }\r\n        const newCollections = [...collections];\r\n        newCollections.splice(index, 1);\r\n        newCollections.splice(index + 1, 0, collection);\r\n        setCollections(newCollections);\r\n\r\n        // Send a fetch post with the userId and collection id to move the collection to the right\r\n        fetch(`https://choice-champ-backend.glitch.me/collections/moveRight/${collectionsType}/${auth.userId}/${id}`, {\r\n            method: 'POST',\r\n            headers: {\r\n                'Content-Type': 'application/json'\r\n            }\r\n        })\r\n        .then(data => {\r\n            setCollections(newCollections);\r\n        })\r\n        .catch(err => {\r\n            console.log(err);\r\n        });\r\n    }\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <div className='content'>\r\n                {\r\n                    navingBack ? \r\n                    (<img src=\"https://cdn.glitch.global/ebf12691-ad1e-4a83-81e2-641b9d7c5f64/back-button-active.png?v=1702137193420\" alt=\"Back symbol\" className=\"top-left clickable\" style={{animation: 'button-press .75s'}} />) : \r\n                    (<img src=\"https://cdn.glitch.global/ebf12691-ad1e-4a83-81e2-641b9d7c5f64/back-button.png?v=1702137134668\" alt=\"Back symbol\" className=\"top-left clickable\" onClick={navBack} />)\r\n                }\r\n                <h2 className={`title color-${collectionsType}`}>{title}</h2>\r\n                <img src={ isEdit ? editing :  edit } className=\"edit clickable\" alt='Edit icon' onClick={isEditHandler} style={isEdit ? {animation: 'button-press .75s'} : null} />\r\n                {\r\n                    pressingBtn ?\r\n                    <button \r\n                        className={`add-btn backgroundColor-${collectionsType} backgroundColorPressed-${collectionsType}`}\r\n                        style={{animation: 'button-press .75s'}}>Add Collection</button>\r\n                    :\r\n                    <button \r\n                        className={`add-btn backgroundColor-${collectionsType} clickable`}\r\n                        onClick={() => {\r\n                            setPressingBtn(true);\r\n                            setTimeout(() => {\r\n                                handleOpen();\r\n                                setPressingBtn(false);\r\n                            }, 750);\r\n                        }}>Add Collection</button>\r\n                }\r\n\r\n                {\r\n                    isLoading ? <Loading color={collectionTypeColor} type='beat' className='list-loading' size={20} /> : \r\n                    (<div className='collections-content'>\r\n                        {\r\n                            collections.length > 0 ? collections.map((collection, index) => (\r\n                                isEdit ? (\r\n                                    <div className='collections-item' key={collection._id}>\r\n                                        <img className='remove' alt=\"Remove Icon\" onClick={() => { handleRemoveCollection(collection._id) }} src='https://cdn.glitch.global/7cdfb78e-767d-42ef-b9ca-2f58981eb393/remove.png?v=1682136649433' />\r\n                                        { index !== 0 && <img className='left' alt=\"left arrow\" onClick={() => { moveLeft(collection._id) }} src='https://cdn.glitch.global/7cdfb78e-767d-42ef-b9ca-2f58981eb393/left.png?v=1692161740511' /> }\r\n                                        <div className={`collection-text-${collectionsType} collection-text`}>\r\n                                            {collection.name}\r\n                                        </div>\r\n                                        { index !== collections.length - 1 && <img className='right' alt=\"right arrow\" onClick={ () => { moveRight(collection._id) } } src='https://cdn.glitch.global/7cdfb78e-767d-42ef-b9ca-2f58981eb393/right.png?v=1692161745669' /> }\r\n                                    </div>\r\n                                ) : (\r\n                                    <Link to={`/collections/${collectionsType}/${collection._id}`} className='collections-item' key={collection._id} >\r\n                                        <div className={`collection-text-${collectionsType} collection-text`}>\r\n                                            {collection.name}\r\n                                        </div>\r\n                                    </Link>\r\n                                )\r\n                            )) : <div className='no-collections-txt'>No Collections</div>\r\n                        }\r\n                    </div>)\r\n                }\r\n            </div>\r\n            <Dialog open={open} onClose={handleClose} fullWidth maxWidth='lg'>\r\n                <div className='dialog-content'>\r\n                    <div className='dialog-sub-content'>\r\n                        <input type=\"text\" placeholder={\"collection name\"} onChange={changeCollectionHandler} ref={inputCollectionRef}/>\r\n                        <Button backgroundColor={collectionTypeColor} onClick={handleAddCollection}>Create Collection</Button>\r\n                        {nameError && <p className='error' style={{textAlign: 'center'}}>{nameErrorText}</p>}\r\n                        <p className='or'>OR</p>\r\n                        <input type=\"number\" min={10000} max={99999} placeholder={\"share code\"} onChange={changeJoinCodeHandler} ref={inputJoinRef}/>\r\n                        <Button backgroundColor={collectionTypeColor} onClick={handleJoinCollection}>Join Collection</Button>\r\n                        <p className='error' style={{textAlign: 'center'}}>{joinError}</p>\r\n                    </div>\r\n                </div>\r\n            </Dialog>\r\n        </React.Fragment>\r\n    );\r\n}\r\n\r\nexport default Collections;","import React, { useState } from 'react';\r\n\r\nimport './Button.css';\r\n\r\nconst Button = props => {\r\n    const [bounce, setBounce] = useState(false);\r\n\r\n    const action = () => {\r\n        if (props.onClick) {\r\n            setBounce(true);\r\n            setTimeout(() => {\r\n                setBounce(false);\r\n                props.onClick();\r\n            }, 1000);\r\n        }\r\n    }\r\n\r\n    return (\r\n        <React.Fragment>\r\n            { \r\n                bounce ? (\r\n                    <button \r\n                        type={props.type} \r\n                        disabled={props.disabled}\r\n                        className={props.className}\r\n                        style={ props.backgroundColor ? {animation: 'button-press .75s', backgroundColor: `${props.backgroundColor}`} : {animation: 'button-press .75s', backgroundColor: '#dd9b14' }}\r\n                    >\r\n                        {props.children}\r\n                    </button>\r\n                ) : (\r\n                    <button \r\n                        type={props.type} \r\n                        disabled={props.disabled}\r\n                        onClick={action}\r\n                        className={props.className}\r\n                        style={ props.backgroundColor ? {backgroundColor: `${props.backgroundColor}`} : null }\r\n                    >\r\n                        {props.children}\r\n                    </button>\r\n\r\n            )}\r\n        </React.Fragment>\r\n    );\r\n}\r\n\r\nexport default Button;"],"names":["props","auth","useContext","AuthContext","navigate","useNavigate","collectionsType","useParams","type","_useState","useState","_useState2","_slicedToArray","title","setTitle","_useState3","_useState4","collections","setCollections","_useState5","_useState6","isEdit","setIsEdit","_useState7","_useState8","isLoading","setIsLoading","_useState9","_useState10","nameError","setNameError","_useState11","_useState12","nameErrorText","setNameErrorText","_useState13","_useState14","joinError","setJoinError","_useState15","_useState16","navingBack","setNavingBack","_useState17","_useState18","pressingBtn","setPressingBtn","_useState19","_useState20","collectionTypeColor","setCollectionTypeColor","useEffect","showFooterHandler","fetch","concat","userId","method","headers","then","res","json","data","_useState21","_useState22","open","setOpen","inputCollectionRef","useRef","inputJoinRef","handleClose","current","value","_jsxs","React","children","className","_jsx","src","alt","style","animation","onClick","setTimeout","editing","edit","Loading","color","size","length","map","collection","index","id","_id","filter","catch","err","console","log","find","indexOf","newCollections","_toConsumableArray","splice","moveLeft","name","moveRight","Link","to","Dialog","onClose","fullWidth","maxWidth","placeholder","onChange","event","target","ref","Button","backgroundColor","body","JSON","stringify","textAlign","min","max","errMsg","bounce","setBounce","disabled"],"sourceRoot":""}