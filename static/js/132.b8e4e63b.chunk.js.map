{"version":3,"file":"static/js/132.b8e4e63b.chunk.js","mappings":"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","sources":["collection/pages/Details.js"],"sourcesContent":["import React, { useState, useEffect, useContext } from 'react';\r\nimport { useParams, useNavigate } from 'react-router-dom';\r\nimport { AuthContext } from '../../shared/context/auth-context';\r\nimport Loading from '../../shared/components/Loading';\r\nimport Showdown from 'showdown';\r\n\r\nimport './Details.css';\r\nimport circle from '../../shared/assets/img/circle.png';\r\nimport check from '../../shared/assets/img/check.png';\r\n\r\nconst Details = () => {\r\n    const auth = useContext(AuthContext);\r\n    let navigate = useNavigate();\r\n\r\n    /************************************************************\r\n     * Initial load and data needed. Here we grab the info we need\r\n     * from the params and set edit and our movies list\r\n     ***********************************************************/\r\n    // Grab the collection name and id from the parameters\r\n    let collectionType = useParams().type;\r\n    let collectionName = useParams().name;\r\n    let collectionId = useParams().collectionId;\r\n    let itemId = useParams().itemId;\r\n\r\n\r\n    // Grab filter query parameters from the url\r\n    const search = window.location.search;\r\n    const params = new URLSearchParams(search);\r\n    const filter = params.get('filter');\r\n\r\n    const [details, setDetails] = useState({});\r\n    const [providers, setProviders] = useState({}); // List of providers to watch\r\n    const [loading, setLoading] = useState(false); // Loading state for when we are fetching data\r\n    const [navingBack, setNavingBack] = useState(false);\r\n    const [collectionList, setCollectionList] = useState([]);\r\n    const [loadingCollectionList, setLoadingCollectionList] = useState(false);\r\n    const [currentCollectionExists, setCurrentCollectionExists] = useState(true);\r\n    const [collectionTypeColor, setCollectionTypeColor] = useState('#FCB016');\r\n\r\n    useEffect(() => {\r\n        auth.showFooterHandler(true);\r\n\r\n        if(collectionType === 'movie') {\r\n            setCollectionTypeColor('#FCB016');\r\n        } else if (collectionType === 'tv') {\r\n            setCollectionTypeColor('#FF4D4D');\r\n        } else if (collectionType === 'game') {\r\n            setCollectionTypeColor('#2482C5');\r\n        } else if (collectionType === 'board') {\r\n            setCollectionTypeColor('#45B859');\r\n        }\r\n\r\n        setLoading(true);\r\n        setLoadingCollectionList(true);\r\n        // Get all the items in the collection to check if any items in the search are already in the collection\r\n        fetch(`https://choice-champ-backend.glitch.me/media/getInfo/${collectionType}/${itemId}`, {\r\n            method: 'GET',\r\n            headers: {\r\n                'Content-Type': 'application/json'\r\n            }\r\n        })\r\n        .then(res => res.json())\r\n        .then(data => {\r\n            // Remove all the html tags from the overview string\r\n            // This is specifically for board games because the overview is in html\r\n            if(collectionType === 'board') {\r\n                data.media.details.overview = new Showdown.Converter().makeHtml(data.media.details.overview);\r\n            }\r\n\r\n            if(collectionType === 'game') {\r\n                data.media.details.title = data.media.details.name;\r\n                data.media.details.name = undefined;\r\n            }\r\n\r\n            setDetails(data.media.details);\r\n\r\n            if(collectionType !== 'board' || collectionType !== 'game') {\r\n                // Set the providers to the providers object\r\n                setProviders(data.media.providers);\r\n            } \r\n            \r\n            if (collectionType === 'game') {\r\n                setProviders({\r\n                    platforms: data.media.providers.platforms\r\n                });\r\n            }\r\n\r\n            setLoading(false);\r\n        });\r\n\r\n        fetch(`https://choice-champ-backend.glitch.me/collections/collectionList/${collectionType}/${itemId}/${auth.userId}`, {\r\n            method: 'GET',\r\n            headers: {\r\n                'Content-Type': 'application/json'\r\n            }\r\n        })\r\n        .then(res => res.json())\r\n        .then(data => {\r\n            setCollectionList([...data.collections]);\r\n            setLoadingCollectionList(false);\r\n        });\r\n    }, []);\r\n\r\n    const navBack = () => {\r\n        setNavingBack(true);\r\n        setTimeout(() => {\r\n            setNavingBack(false);\r\n            if(currentCollectionExists) {\r\n                if(filter) {\r\n                    navigate(`/collections/${collectionType}/${collectionName}/${collectionId}?hash=${itemId}&filter=${filter}`);\r\n                } else {\r\n                    navigate(`/collections/${collectionType}/${collectionName}/${collectionId}?hash=${itemId}`);\r\n                }\r\n            } else {\r\n                navigate(`/collections/${collectionType}/${collectionName}/${collectionId}`);\r\n            }\r\n        }, 1000);\r\n    }\r\n\r\n    const addToCollection = (addCollectionId, index) => {\r\n\r\n        let tempId = itemId;\r\n\r\n        // For collections that are not games or board games, we need to parse the id to an int\r\n        // this is because we grab the id from the url and it is a string\r\n        if(collectionType !== 'board' && collectionType !== 'game') {\r\n            tempId = parseInt(tempId);\r\n        }\r\n\r\n        // Make a fetch post request to add an item to a collection\r\n        fetch(`https://choice-champ-backend.glitch.me/collections/items/${addCollectionId}`, {\r\n            method: 'POST',\r\n            headers: {\r\n                'Content-Type': 'application/json'\r\n            },\r\n            body: JSON.stringify([{\r\n                title: details.title,\r\n                id: tempId,\r\n                poster: details.poster\r\n            }])\r\n        })\r\n        .then(res => res.json())\r\n        .then(data => {\r\n            // Create a temp collection list to update the collection list\r\n            // Update the collection list with the new item id\r\n            let tempCollection = [...collectionList];\r\n            tempCollection[index].itemId = data.newItems[0]._id;\r\n            setCollectionList([...tempCollection]);\r\n        });\r\n    }\r\n\r\n    const removeFromCollection = (removeCollectionId, removeItemId) => {\r\n        // Make a fetch delete request to remove an item from a collection\r\n        fetch(`https://choice-champ-backend.glitch.me/collections/items/${removeCollectionId}/${removeItemId}`, {\r\n            method: 'DELETE',\r\n            headers: {\r\n                'Content-Type': 'application/json'\r\n            }\r\n        });\r\n    }\r\n\r\n    return (\r\n        <div className='content'>\r\n            {\r\n                navingBack ? \r\n                (<img src=\"https://cdn.glitch.global/ebf12691-ad1e-4a83-81e2-641b9d7c5f64/back-button-active.png?v=1702137193420\" alt=\"Back symbol\" className=\"top-left clickable\" style={{animation: 'button-press .75s'}} />) : \r\n                (<img src=\"https://cdn.glitch.global/ebf12691-ad1e-4a83-81e2-641b9d7c5f64/back-button.png?v=1702137134668\" alt=\"Back symbol\" className=\"top-left clickable\" onClick={navBack} />)\r\n            }\r\n            { \r\n                loading ? <Loading color={collectionTypeColor} type='beat' className='list-loading' size={20} /> : \r\n                <React.Fragment>\r\n                    <div id=\"content-details\">\r\n                        <img\r\n                            className='details-img'\r\n                            src={details.poster}\r\n                        />\r\n                        <div className={`details-title color-${collectionType}`}>{details.title}</div>\r\n                        {\r\n                            collectionType !== 'game' &&\r\n                                <div className='details-section'>\r\n                                    <span className={`details-section-title color-${collectionType}`}>\r\n                                        { collectionType === 'board' && ' Play Time:' } \r\n                                        { collectionType === 'movie' && ' Runtime:' }\r\n                                        { collectionType === 'tv' && ' Seasons:' }\r\n                                    </span> \r\n                                    {\r\n                                        details.runtime > 0 ? details.runtime : 'N/A'\r\n                                    }\r\n                                    { (collectionType === 'movie' || collectionType === 'board') && ' minute' } \r\n                                    { collectionType === 'tv' && ' season' }\r\n                                    { details.runtime > 1 && 's' }\r\n                                </div>\r\n                        }\r\n                        {\r\n                            collectionType === 'board' && (\r\n                                <React.Fragment>\r\n                                    <div className='details-section'>\r\n                                        <span className={`details-section-title color-${collectionType}`}>Min Players:</span> {details.minPlayers}\r\n                                    </div>\r\n                                    <div className='details-section'>\r\n                                        <span className={`details-section-title color-${collectionType}`}>Max Players:</span> {details.maxPlayers}\r\n                                    </div>\r\n                                </React.Fragment>\r\n                            )\r\n                        }\r\n                        {\r\n                            (collectionType === 'movie' || collectionType === 'tv') && (\r\n                                <React.Fragment>\r\n                                    <div className='details-section'>\r\n                                        <span className={`details-section-title color-${collectionType}`}>Rating: </span>\r\n                                        {details.rating} / 10\r\n                                    </div>\r\n                                </React.Fragment>\r\n                            )\r\n                        }\r\n                        <div className='details-section'>\r\n                            <div className={`details-section-title color-${collectionType}`}>Overview:</div>\r\n                            <div className='details-overview' dangerouslySetInnerHTML={{ __html: details.overview }}></div>\r\n                        </div>\r\n\r\n                        { \r\n                            \r\n                            (collectionType === 'movie' || collectionType === 'tv') && \r\n                            (\r\n                                <React.Fragment>\r\n                                    <div className={`details-provider-title color-${collectionType}`}>Stream:</div>\r\n                                    { \r\n                                        // Q: How can I check to see if the providers.stream array is empty?\r\n                                        // A: Use providers.stream.length\r\n                                        providers.stream ?\r\n                                        (\r\n                                            <div className='details-provider-list-section'>\r\n                                                {\r\n                                                    providers.stream.map(provider => (\r\n                                                        <img key={provider.provider_name} className='provider-img-section' src={`https://image.tmdb.org/t/p/w500${provider.logo_path}`} alt={provider.provider_name} />\r\n                                                    ))\r\n                                                }\r\n                                            </div>\r\n                                        ) : (\r\n                                            <div className='providers-not-available'>Not available to stream</div>\r\n                                        )\r\n                                    }\r\n                                </React.Fragment>\r\n                            )\r\n                        }\r\n                        { \r\n                            \r\n                            (collectionType === 'game') && \r\n                            (\r\n                                <React.Fragment>\r\n                                    <div className='details-provider-title'>Platforms</div>\r\n                                    <div className='details-platforms'>\r\n                                        {\r\n                                            providers.platforms && (\r\n                                                providers.platforms.map((platform, index) => (\r\n                                                    (<span key={platform.name}>\r\n                                                        {\r\n                                                            index === providers.platforms.length - 1 ? (\r\n                                                                platform.name\r\n                                                            ) : \r\n                                                                platform.name + ', '\r\n                                                        }\r\n                                                    </span>)\r\n                                                ))\r\n                                            )\r\n                                        }\r\n                                    </div>\r\n                                        \r\n                                </React.Fragment>\r\n                            )\r\n                        }\r\n                    </div>\r\n                </React.Fragment>\r\n            }\r\n            {\r\n                !loadingCollectionList ?\r\n                    (\r\n                        <div className='collections-list'>\r\n                            <div className={`collections-list-title color-${collectionType}`}>Collections:</div>\r\n                            {\r\n                                collectionList.map((collection, index) => (\r\n                                    <div className='collection-item' key={collection._id} onClick={() => { \r\n                                        let tempCollectionList = [...collectionList];\r\n\r\n                                        if(collection.exists) {\r\n                                            tempCollectionList[index].exists = false;\r\n                                            if(tempCollectionList[index].collectionId === collectionId) {\r\n                                                setCurrentCollectionExists(false); \r\n                                            }\r\n\r\n                                            removeFromCollection(tempCollectionList[index].collectionId, tempCollectionList[index].itemId);\r\n                                        } else {\r\n                                            tempCollectionList[index].exists = true;\r\n                                            if(tempCollectionList[index].collectionId === collectionId) {\r\n                                                setCurrentCollectionExists(true); \r\n                                            }\r\n\r\n                                            addToCollection(tempCollectionList[index].collectionId, index); \r\n                                        }\r\n\r\n                                        setCollectionList([...tempCollectionList]);\r\n                                    }}>\r\n                                        <div className='collection-item-title'>{collection.name}</div>\r\n                                        <img src={ collection.exists ? check : circle} className='colleciton-item-status' />\r\n                                    </div>\r\n                                ))\r\n                            }\r\n                        </div>\r\n                    ) : null\r\n            }\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Details;"],"names":["auth","useContext","AuthContext","navigate","useNavigate","collectionType","useParams","type","collectionName","name","collectionId","itemId","search","window","location","filter","URLSearchParams","get","_useState","useState","_useState2","_slicedToArray","details","setDetails","_useState3","_useState4","providers","setProviders","_useState5","_useState6","loading","setLoading","_useState7","_useState8","navingBack","setNavingBack","_useState9","_useState10","collectionList","setCollectionList","_useState11","_useState12","loadingCollectionList","setLoadingCollectionList","_useState13","_useState14","currentCollectionExists","setCurrentCollectionExists","_useState15","_useState16","collectionTypeColor","setCollectionTypeColor","useEffect","showFooterHandler","fetch","concat","method","headers","then","res","json","data","media","overview","Showdown","makeHtml","title","undefined","platforms","userId","_toConsumableArray","collections","_jsxs","className","children","_jsx","src","alt","style","animation","onClick","setTimeout","Loading","color","size","React","id","poster","runtime","minPlayers","maxPlayers","rating","dangerouslySetInnerHTML","__html","stream","map","provider","logo_path","provider_name","platform","index","length","collection","removeCollectionId","removeItemId","tempCollectionList","exists","addCollectionId","tempId","parseInt","body","JSON","stringify","tempCollection","newItems","_id","addToCollection","check","circle"],"sourceRoot":""}