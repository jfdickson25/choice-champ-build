{"version":3,"file":"static/js/961.5471e28c.chunk.js","mappings":"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","sources":["shared/assets/img/search.svg","collection/pages/Search.js"],"sourcesContent":["var _g;\nvar _excluded = [\"title\", \"titleId\"];\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\nimport * as React from \"react\";\nfunction SvgSearch(_ref, svgRef) {\n  var title = _ref.title,\n    titleId = _ref.titleId,\n    props = _objectWithoutProperties(_ref, _excluded);\n  return /*#__PURE__*/React.createElement(\"svg\", _extends({\n    fill: \"none\",\n    height: 24,\n    viewBox: \"0 0 24 24\",\n    width: 24,\n    xmlns: \"http://www.w3.org/2000/svg\",\n    ref: svgRef,\n    \"aria-labelledby\": titleId\n  }, props), title ? /*#__PURE__*/React.createElement(\"title\", {\n    id: titleId\n  }, title) : null, _g || (_g = /*#__PURE__*/React.createElement(\"g\", {\n    stroke: \"#fff\",\n    strokeWidth: 1.2\n  }, /*#__PURE__*/React.createElement(\"circle\", {\n    cx: 11,\n    cy: 11,\n    r: 6\n  }), /*#__PURE__*/React.createElement(\"g\", {\n    strokeLinecap: \"round\"\n  }, /*#__PURE__*/React.createElement(\"path\", {\n    d: \"m11 8c-.394 0-.7841.0776-1.14805.22836-.36398.15077-.69469.37174-.97327.65032s-.49955.60929-.65032.97327c-.15076.36395-.22836.75405-.22836 1.14805\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"m20 20-3-3\"\n  })))));\n}\nvar ForwardRef = /*#__PURE__*/React.forwardRef(SvgSearch);\nexport default __webpack_public_path__ + \"static/media/search.1769d7a66264f66c9ae9cfe98c03017d.svg\";\nexport { ForwardRef as ReactComponent };","import React, { useRef, useState, useEffect, useContext } from 'react';\r\nimport { useParams, useNavigate } from 'react-router-dom';\r\nimport { AuthContext } from '../../shared/context/auth-context';\r\nimport Loading from '../../shared/components/Loading';\r\nimport _ from 'lodash';\r\n\r\nimport { Dialog } from '@mui/material';\r\nimport { ToastContainer, toast } from 'react-toastify';\r\nimport 'react-toastify/dist/ReactToastify.css';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faXmark } from '@fortawesome/free-solid-svg-icons';\r\n\r\nimport './Search.css';\r\n\r\nimport circle from '../../shared/assets/img/circle.png';\r\nimport check from '../../shared/assets/img/check.png';\r\nimport searchIcon from '../../shared/assets/img/search.svg';\r\nimport { set } from 'react-hook-form';\r\n\r\nconst Search = ({ socket }) => {\r\n    const auth = useContext(AuthContext);\r\n    let navigate = useNavigate();\r\n\r\n    const infoImg = 'https://cdn.glitch.global/ebf12691-ad1e-4a83-81e2-641b9d7c5f64/info-1.png?v=1720119048801';\r\n\r\n    /************************************************************\r\n     * Initial load and data needed. Here we grab the info we need\r\n     * from the params and set edit and our movies list\r\n     ***********************************************************/\r\n    // Grab the collection name and id from the parameters\r\n    let collectionType = useParams().type;\r\n    let collectionName = useParams().name;\r\n    let collectionId = useParams().id;\r\n\r\n    const [items, setItems] = useState([]);\r\n    const [collection, setCollection] = useState([]);\r\n    const [isLoading, setIsLoading] = useState(false);\r\n    const [navingBack, setNavingBack] = useState(false);\r\n    const [noMatch, setNoMatch] = useState(false);\r\n    const [open, setOpen] = useState(false);\r\n    const [loadingInfo, setLoadingInfo] = useState(false);\r\n    const [activeSearch, setActiveSearch] = useState(false);\r\n    const searchRef = useRef('');\r\n\r\n    const [activeItem, setActiveItem] = useState({});\r\n\r\n    // Create a ref of collection\r\n    const collectionRef = useRef(collection);\r\n\r\n    const notify = () => toast.success(`Item saved to ${collectionName} collection`, {\r\n        position: \"bottom-center\",\r\n        autoClose: 1500,\r\n        hideProgressBar: false,\r\n        closeOnClick: true,\r\n        pauseOnHover: true,\r\n        draggable: true,\r\n        progress: undefined,\r\n        theme: \"dark\",\r\n    });\r\n\r\n    const notifyRemove = () => toast(`Item removed from ${collectionName} collection`, {\r\n        position: \"bottom-center\",\r\n        autoClose: 1500,\r\n        hideProgressBar: false,\r\n        closeOnClick: true,\r\n        pauseOnHover: true,\r\n        draggable: true,\r\n        progress: undefined,\r\n        theme: \"dark\",\r\n    });\r\n\r\n    useEffect(() => {\r\n        auth.showFooterHandler(true);\r\n        // Get all the items in the collection to check if any items in the search are already in the collection\r\n        fetch(`https://choice-champ-backend.glitch.me/collections/items/${collectionId}`, {\r\n            method: 'GET',\r\n            headers: {\r\n                'Content-Type': 'application/json'\r\n            }\r\n        })\r\n        .then(res => res.json())\r\n        .then(data => {\r\n            // Verify that data.items is not undefined\r\n            if(data.items) {\r\n                // Set collection to the items in the collection but only the id\r\n                collectionRef.current = data.items.map(item => {\r\n                    return {\r\n                        itemId: item.itemId,\r\n                        mongoId: item._id\r\n                    }\r\n                });\r\n\r\n                setCollection(collectionRef.current);\r\n            }\r\n        });\r\n    }, [auth, collectionType, collectionId]);\r\n\r\n    const updateList = (search) => {\r\n        if (search === '' || search === undefined || search === null) {\r\n            setItems([]);\r\n            setNoMatch(false);\r\n            setIsLoading(false);\r\n            setActiveSearch(false);\r\n            return;\r\n        }\r\n\r\n        // Make a fetch request to get all movies that match the search\r\n        fetch(`https://choice-champ-backend.glitch.me/media/${collectionType}/${search}/1`)\r\n        .then(res => res.json())\r\n        .then(res => {\r\n            if(res.media.results.length === 0) {\r\n                setItems([]);\r\n                setIsLoading(false);\r\n                setNoMatch(true);\r\n                return;\r\n            }\r\n\r\n            // Reset the items to populate with updated value\r\n            setItems([]);\r\n\r\n            res.media.results.forEach(mediaItem => {\r\n\r\n                // Make sure the item is not already in the collection\r\n                let inCollection = false;\r\n\r\n                // Check if item exists in collection ref\r\n                collectionRef.current.forEach(item => {\r\n                    if(collectionType !== 'game' && item.itemId === mediaItem.id) {\r\n                        inCollection = true;\r\n                    } else if (collectionType === 'game' && item.itemId === mediaItem.guid) {\r\n                        inCollection = true;\r\n                    }\r\n                });\r\n\r\n                if (collectionType === 'movie') {\r\n\r\n                    if (mediaItem.poster_path === null || mediaItem.poster_path === undefined || mediaItem.poster_path === '') {\r\n                        mediaItem.poster_path = 'https://cdn.glitch.global/ebf12691-ad1e-4a83-81e2-641b9d7c5f64/image-not-found-500-750.png?v=1720192338848';\r\n                    } else {\r\n                        mediaItem.poster_path = `https://image.tmdb.org/t/p/w500${mediaItem.poster_path}`;\r\n                    }\r\n\r\n                    setItems(prevState => [...prevState, {\r\n                        id: mediaItem.id,\r\n                        title: mediaItem.title,\r\n                        poster: mediaItem.poster_path,\r\n                        selected: false,\r\n                        inCollection: inCollection,\r\n                        loadingUpdate: false\r\n                    }]);\r\n\r\n                    setIsLoading(false);\r\n                } else if (collectionType === 'tv') {\r\n\r\n                    if (mediaItem.poster_path === null || mediaItem.poster_path === undefined || mediaItem.poster_path === '') {\r\n                        mediaItem.poster_path = 'https://cdn.glitch.global/ebf12691-ad1e-4a83-81e2-641b9d7c5f64/image-not-found-500-750.png?v=1720192338848';\r\n                    } else {\r\n                        mediaItem.poster_path = `https://image.tmdb.org/t/p/w500${mediaItem.poster_path}`;\r\n                    }\r\n\r\n                    setItems(prevState => [...prevState, {\r\n                        id: mediaItem.id,\r\n                        title: mediaItem.name,\r\n                        poster: `https://image.tmdb.org/t/p/w500${mediaItem.poster_path}`,\r\n                        selected: false,\r\n                        inCollection: inCollection,\r\n                        loadingUpdate: false\r\n                    }]);\r\n\r\n                    setIsLoading(false);\r\n                } else if (collectionType === 'game') {\r\n\r\n                    if (mediaItem.image.original_url === null || mediaItem.image.original_url === undefined || mediaItem.image.original_url === '') {\r\n                        mediaItem.image.original_url = 'https://cdn.glitch.global/ebf12691-ad1e-4a83-81e2-641b9d7c5f64/image-not-found-500-750.png?v=1720192338848';\r\n                    }\r\n                    \r\n                    setItems(prevState => [...prevState, {\r\n                        id: mediaItem.guid,\r\n                        title: mediaItem.name,\r\n                        poster: mediaItem.image.original_url,\r\n                        selected: false,\r\n                        inCollection: inCollection,\r\n                        loadingUpdate: false\r\n                    }]);\r\n\r\n                    setIsLoading(false);\r\n                } else if (collectionType === 'board') {\r\n                    setItems(prevState => [...prevState, {\r\n                        id: mediaItem.id,\r\n                        title: mediaItem.name,\r\n                        selected: false,\r\n                        inCollection: inCollection,\r\n                        loadingUpdate: false\r\n                    }]);\r\n\r\n                    setIsLoading(false);\r\n                }\r\n            });\r\n        })\r\n        .catch(err => {\r\n            console.log(err);\r\n            setIsLoading(false);\r\n        });\r\n    };\r\n\r\n    // useRef is used to create a mutable ref object whose .current property is initialized \r\n    // to the passed argument (initialValue). The returned object will persist for the full lifetime of the component.\r\n    // Debounce is a function to limit the number of times a function can be called in a given time period\r\n    let debounced = useRef(_.debounce(updateList, 2000, {'search' : ''})).current;\r\n\r\n    // Functions for handling change to input\r\n    const changeHandler = (event) => {\r\n        setActiveSearch(true)\r\n        setIsLoading(true);\r\n        setNoMatch(false);\r\n        // Debounce example from web dev simplified (TODO: Watch rest on throttle)\r\n        // https://www.youtube.com/watch?v=cjIswDCKgu0\r\n        debounced(event.target.value);\r\n    }\r\n\r\n    const removeItem = (itemId, board) => {\r\n        // Find the collection item with the itemId and remove it from the collection\r\n        const collectionItem = collectionRef.current.find(item => item.itemId === itemId);\r\n\r\n        if(!board) {\r\n            // Find the item with the id and set loadingUpdate to true\r\n            const loadingSetItems = items.map(item => {\r\n                if(item.id === itemId) {\r\n                    item.loadingUpdate = true;\r\n                }\r\n                return item;\r\n            });\r\n            setItems(loadingSetItems);\r\n        } else {\r\n            setActiveItem({\r\n                ...activeItem,\r\n                loadingUpdate: true\r\n            });\r\n        }\r\n\r\n        fetch(`https://choice-champ-backend.glitch.me/collections/items/${collectionId}/${collectionItem.mongoId}`, {\r\n            method: 'DELETE',\r\n            headers: {\r\n                'Content-Type': 'application/json'\r\n            }\r\n        })\r\n        .then(res => {\r\n            if(!board) {\r\n                // Find the item with the id and set inCollection to false\r\n                const updatedItems = items.map(item => {\r\n                    if(item.id === itemId) {\r\n                        item.inCollection = false;\r\n                        item.loadingUpdate = false;\r\n                    }\r\n                    return item;\r\n                });\r\n\r\n                setItems(updatedItems);\r\n            } else {\r\n                setActiveItem({\r\n                    ...activeItem,\r\n                    collectionStatus: false,\r\n                    loadingUpdate: false\r\n                });\r\n\r\n                 // Find the item with the id and set inCollection to false\r\n                 const updatedItems = items.map(item => {\r\n                    if(item.id === itemId) {\r\n                        item.inCollection = false;\r\n                    }\r\n                    return item;\r\n                });\r\n\r\n                setItems(updatedItems);\r\n            }\r\n\r\n            // Remove the item from the collection\r\n            const updatedCollection = collectionRef.current.filter(item => item.itemId !== itemId);\r\n            collectionRef.current = updatedCollection;\r\n            setCollection(collectionRef.current);\r\n\r\n            notifyRemove();\r\n\r\n            // Emit to the server that an item has been removed\r\n            socket.emit('remove-remote-item', collectionItem.mongoId, collectionId);\r\n        });\r\n    }\r\n\r\n    const addItem = (itemId, itemTitle, itemPoster, board) => {\r\n\r\n        if(!board) {\r\n            // Find the item with the id and set loadingUpdate to true\r\n            const loadingSetItems = items.map(item => {\r\n                if(item.id === itemId) {\r\n                    item.loadingUpdate = true;\r\n                }\r\n                return item;\r\n            });\r\n            setItems(loadingSetItems);\r\n        } else {\r\n            setActiveItem({\r\n                ...activeItem,\r\n                loadingUpdate: true\r\n            });\r\n        }\r\n\r\n        // Make a fetch post request to add an item to a collection\r\n        fetch(`https://choice-champ-backend.glitch.me/collections/items/${collectionId}`, {\r\n            method: 'POST',\r\n            headers: {\r\n                'Content-Type': 'application/json'\r\n            },\r\n            body: JSON.stringify([{\r\n                title: itemTitle,\r\n                id: itemId,\r\n                poster: itemPoster\r\n            }])\r\n        })\r\n        .then(res => res.json())\r\n        .then(data => {\r\n            collectionRef.current.push({itemId: itemId, mongoId: data.newItems[0]._id});\r\n            setCollection(collectionRef.current);\r\n\r\n            socket.emit('add-remote-item', {title: itemTitle, itemId: itemId, poster: itemPoster, _id: data.newItems[0]._id, watched: false}, collectionId);\r\n\r\n            if(!board) {\r\n                // Update the items inCollection value\r\n                const updatedItems = items.map(item => {\r\n                    if(item.id === itemId) {\r\n                        item.inCollection = true;\r\n                        item.loadingUpdate = false;\r\n                    }\r\n                    return item;\r\n                });\r\n                setItems(updatedItems);\r\n            } else {\r\n                setActiveItem({\r\n                    ...activeItem,\r\n                    collectionStatus: true,\r\n                    loadingUpdate: false\r\n                });\r\n\r\n                // Update the items inCollection value\r\n                const updatedItems = items.map(item => {\r\n                    if(item.id === itemId) {\r\n                        item.inCollection = true;\r\n                    }\r\n                    return item;\r\n                });\r\n                setItems(updatedItems);\r\n            }\r\n\r\n            notify();\r\n        });\r\n    }\r\n\r\n    const getActiveItem = (itemId, status) => {\r\n        setLoadingInfo(true);\r\n        setOpen(true);\r\n        \r\n        // Get all the items in the collection to check if any items in the search are already in the collection\r\n        fetch(`https://choice-champ-backend.glitch.me/media/getInfo/${collectionType}/${itemId}`, {\r\n            method: 'GET',\r\n            headers: {\r\n                'Content-Type': 'application/json'\r\n            }\r\n        })\r\n        .then(res => res.json())\r\n        .then(data => {\r\n            if(collectionType === 'board') { \r\n                setActiveItem({\r\n                    id: itemId,\r\n                    title: data.media.details.title,\r\n                    poster: data.media.details.poster,\r\n                    maxPlayers: data.media.details.maxPlayers,\r\n                    minPlayers: data.media.details.minPlayers,\r\n                    playingTime: data.media.details.runtime,\r\n                    collectionStatus: status,\r\n                    loadingUpdate: false\r\n                });\r\n            } else if(collectionType === 'movie' || collectionType === 'tv') {\r\n                setActiveItem({\r\n                    id: itemId,\r\n                    title: data.media.details.title,\r\n                    poster: data.media.details.poster,\r\n                    watchTime: data.media.details.runtime,\r\n                    rating: data.media.details.rating,\r\n                    providers: data.media.providers.stream,\r\n                    overview: data.media.details.overview\r\n                });\r\n            } else if(collectionType === 'game') {\r\n                setActiveItem({\r\n                    id: itemId,\r\n                    title: data.media.details.name,\r\n                    poster: data.media.details.poster,\r\n                    runtime: data.media.details.runtime,\r\n                    platforms: data.media.providers.platforms,\r\n                    overview: data.media.details.overview\r\n                });\r\n            \r\n            }\r\n\r\n            setLoadingInfo(false);\r\n        });\r\n    }\r\n\r\n    const navBack = () => {\r\n        setNavingBack(true);\r\n        setTimeout(() => {\r\n            setNavingBack(false);\r\n            navigate(`/collections/${collectionType}/${collectionName}/${collectionId}`);\r\n        }, 1000);\r\n    }\r\n\r\n    return (\r\n        <div className='content'>\r\n            <ToastContainer />\r\n            {\r\n                navingBack ? \r\n                (<img src=\"https://cdn.glitch.global/ebf12691-ad1e-4a83-81e2-641b9d7c5f64/back-button-active.png?v=1702137193420\" alt=\"Back symbol\" className=\"top-left clickable\" style={{animation: 'button-press .75s'}} />) : \r\n                (<img src=\"https://cdn.glitch.global/ebf12691-ad1e-4a83-81e2-641b9d7c5f64/back-button.png?v=1702137134668\" alt=\"Back symbol\" className=\"top-left clickable\" onClick={navBack} />)\r\n            }\r\n            <h2 className={`title color-${collectionType}`}>{collectionName}</h2>\r\n            <div className='search-bar-container'>\r\n                <img src={searchIcon} alt='Search icon' className='search-icon' />\r\n                <input className='search-bar' id='search' placeholder='Search' onChange={changeHandler} ref={searchRef} />\r\n                {\r\n                    activeSearch &&\r\n                    <FontAwesomeIcon icon={faXmark} size=\"lg\" className='clear-search clickable' onClick={() => { searchRef.current.value = ''; updateList(''); setActiveSearch(false) }} />\r\n                }\r\n            </div>\r\n            { noMatch && <p className='no-match'>No matches found</p>}\r\n            {\r\n                isLoading ? <Loading type='sync' className='list-loading' size={15} speed={.5} /> :\r\n                (<div className='collection-content'>\r\n                    {items.map(item => (\r\n                        <div className='item-section' key={item.id} onClick={() => {\r\n                            if(!item.loadingUpdate && collectionType !== 'board') {\r\n                                if(!item.inCollection) {\r\n                                        addItem(item.id, item.title, item.poster, false);\r\n                                } else {\r\n                                    removeItem(item.id, false);\r\n                                }\r\n                            } else if (collectionType === 'board') {\r\n                                getActiveItem(item.id, item.inCollection);\r\n                                setOpen(true);\r\n                            }\r\n                        }}>\r\n\r\n                            { \r\n                                collectionType !== 'board' ?\r\n                                <img src={item.poster} alt={`${item.title} poster`} className='item-img' /> \r\n                                :\r\n                                <div className='board-img-search' /> \r\n                            }\r\n                            { collectionType === 'board' && ( <p className='item-title'>{item.title}</p> ) }                      \r\n                            {\r\n                                collectionType !== \"board\" && (\r\n                                    <React.Fragment>\r\n                                    {\r\n                                        item.loadingUpdate ? \r\n                                        (\r\n                                            <Loading type='beat' size={15} speed={.5} className='loading-save' />\r\n                                        ) :\r\n                                        (\r\n                                            item.inCollection ? \r\n                                            (<img src={check} alt={`${item.title} saved`} className='item-action clickable' />) :\r\n                                            (<img id={item.id} src={circle} alt={`${item.title} unselected`} className='item-action clickable' />)\r\n                                        )\r\n                                    }\r\n                                    <img src={infoImg} alt={'More info'} onClick={(e) => { e.stopPropagation(); getActiveItem(item.id, item.inCollection); setOpen(true); }} className='more-info clickable' />\r\n                                    </React.Fragment>\r\n                                )\r\n                            }\r\n                        </div>\r\n                    ))}\r\n                </div>)\r\n            }\r\n            <Dialog open={open} onClose={() => { setOpen(false) }} fullWidth maxWidth='lg'>\r\n                <div className='dialog-content'>\r\n                    {\r\n                        loadingInfo ?\r\n                        (<Loading type='beat' className='board-details-loading' size={20} />) :\r\n                        (\r\n                            <React.Fragment>\r\n                            <div id='status-icon'>\r\n                                {\r\n                                    collectionType === 'board' ?\r\n                                    (\r\n                                        activeItem.loadingUpdate ? \r\n                                        (\r\n                                            <Loading type='beat' size={15} speed={.5} className='loading-save-modal' />\r\n                                        ) :\r\n                                        (\r\n                                            activeItem.collectionStatus ? \r\n                                                (<img src={check} alt={`${activeItem.title} saved`} className='item-action-board clickable' onClick={ () => { removeItem(activeItem.id, true ) }} />) :\r\n                                                (<img id={activeItem.id} src={circle} alt={`${activeItem.title} unselected`} className='item-action-board clickable' onClick={ () => { addItem(activeItem.id, activeItem.title, activeItem.poster, true)} } />)\r\n                                        )\r\n                                    ) : null\r\n                                }\r\n                            </div>\r\n                            <img src={activeItem.poster} alt={`${activeItem.title} poster`} className='modal-poster' style={ collectionType !== 'board' ? { marginTop: '30px'} : null} />\r\n                                <div className='modal-header'>\r\n                                    { activeItem.title }\r\n                                </div>\r\n                                <div className='modal-details'>\r\n                                    {\r\n                                        collectionType === 'board' ?\r\n                                        (\r\n                                            <React.Fragment>\r\n                                                <p><span className='label'>Min Players:</span> {activeItem.minPlayers}</p>\r\n                                                <p><span className='label'>Max Players:</span> {activeItem.maxPlayers}</p>\r\n                                                <p><span className='label'>Play Time:</span> {activeItem.playingTime} min</p>\r\n                                            </React.Fragment>\r\n                                        ) : (\r\n                                            collectionType === 'game' ?\r\n                                            (\r\n                                                <React.Fragment>\r\n                                                    <p><span className='label'>Platforms:</span> {\r\n                                                        activeItem.platforms && (\r\n                                                            activeItem.platforms.map((platform, index) => (\r\n                                                                (<span key={platform.name}>\r\n                                                                    {\r\n                                                                        index === activeItem.platforms.length - 1 ? (\r\n                                                                            platform.name\r\n                                                                        ) : \r\n                                                                            platform.name + ', '\r\n                                                                    }\r\n                                                                </span>)\r\n                                                            ))\r\n                                                        )\r\n                                                    }\r\n                                                    </p>\r\n                                                    <p><span className='label'>Overview:</span><br /> {activeItem.overview}</p>\r\n                                                </React.Fragment>\r\n                                            ) : (\r\n                                                <React.Fragment>\r\n                                                    {\r\n                                                        collectionType === 'tv' ? (\r\n                                                            <p><span className='label'>Seasons:</span> {\r\n                                                                activeItem.watchTime > 1 ? (\r\n                                                                    activeItem.watchTime + ' seasons'\r\n                                                                ) : activeItem.watchTime + ' season'\r\n                                                            }</p>\r\n                                                        ) : (\r\n                                                            <p><span className='label'>Watch Time:</span> {activeItem.watchTime} min</p>\r\n                                                        )\r\n                                                    }\r\n                                                    <p><span className='label'>Rating:</span> {activeItem.rating}</p>\r\n                                                    <React.Fragment>\r\n                                                    <span className='label'>Stream:</span>\r\n                                                    {\r\n                                                        activeItem.providers ?\r\n                                                        (\r\n                                                            <div className='details-provider-list'>\r\n                                                                {\r\n                                                                    activeItem.providers.map(provider => (\r\n                                                                            <img key={provider.provider_name} className='provider-img' src={`https://image.tmdb.org/t/p/w500${provider.logo_path}`} alt={provider.provider_name} />)\r\n                                                                    )\r\n                                                                }\r\n                                                            </div>\r\n                                                        ) : (\r\n                                                            <div className='providers-not-available'>Not available to stream</div>\r\n                                                        )\r\n                                                    }\r\n                                                </React.Fragment>\r\n                                                    <p><span className='label'>Overview:</span><br /> {activeItem.overview}</p>\r\n                                                </React.Fragment>\r\n                                            )\r\n                                        )\r\n                                    }\r\n                                </div>\r\n                            </React.Fragment>\r\n                        )\r\n                    }\r\n                </div>\r\n            </Dialog>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Search;"],"names":["_ref","socket","auth","useContext","AuthContext","navigate","useNavigate","collectionType","useParams","type","collectionName","name","collectionId","id","_useState","useState","_useState2","_slicedToArray","items","setItems","_useState3","_useState4","collection","setCollection","_useState5","_useState6","isLoading","setIsLoading","_useState7","_useState8","navingBack","setNavingBack","_useState9","_useState10","noMatch","setNoMatch","_useState11","_useState12","open","setOpen","_useState13","_useState14","loadingInfo","setLoadingInfo","_useState15","_useState16","activeSearch","setActiveSearch","searchRef","useRef","_useState17","_useState18","activeItem","setActiveItem","collectionRef","useEffect","showFooterHandler","fetch","concat","method","headers","then","res","json","data","current","map","item","itemId","mongoId","_id","updateList","search","undefined","media","results","length","forEach","mediaItem","inCollection","guid","poster_path","prevState","_toConsumableArray","title","poster","selected","loadingUpdate","image","original_url","catch","err","console","log","debounced","_","removeItem","board","collectionItem","find","_objectSpread","loadingSetItems","collectionStatus","updatedItems","updatedCollection","filter","toast","position","autoClose","hideProgressBar","closeOnClick","pauseOnHover","draggable","progress","theme","emit","addItem","itemTitle","itemPoster","body","JSON","stringify","push","newItems","watched","success","getActiveItem","status","details","maxPlayers","minPlayers","playingTime","runtime","watchTime","rating","providers","stream","overview","platforms","_jsxs","className","children","_jsx","ToastContainer","src","alt","style","animation","onClick","setTimeout","searchIcon","placeholder","onChange","event","target","value","ref","FontAwesomeIcon","icon","faXmark","size","Loading","speed","React","check","circle","e","stopPropagation","Dialog","onClose","fullWidth","maxWidth","marginTop","platform","index","provider","logo_path","provider_name"],"sourceRoot":""}