{"version":3,"file":"static/js/610.68c97ddd.chunk.js","mappings":"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","sources":["shared/components/FormElements/Button.js","user/pages/Auth.js"],"sourcesContent":["import React, { useState } from 'react';\r\n\r\nimport './Button.css';\r\n\r\nconst Button = props => {\r\n    const [bounce, setBounce] = useState(false);\r\n\r\n    const action = () => {\r\n        if (props.onClick) {\r\n            setBounce(true);\r\n            setTimeout(() => {\r\n                setBounce(false);\r\n                props.onClick();\r\n            }, 1000);\r\n        }\r\n    }\r\n\r\n    return (\r\n        <React.Fragment>\r\n            { \r\n                bounce ? (\r\n                    <button \r\n                        type={props.type} \r\n                        disabled={props.disabled}\r\n                        className={props.className}\r\n                        style={ props.backgroundColor ? {animation: 'button-press .75s', backgroundColor: `${props.backgroundColor}`} : {animation: 'button-press .75s', backgroundColor: '#dd9b14' }}\r\n                    >\r\n                        {props.children}\r\n                    </button>\r\n                ) : (\r\n                    <button \r\n                        type={props.type} \r\n                        disabled={props.disabled}\r\n                        onClick={action}\r\n                        className={props.className}\r\n                        style={ props.backgroundColor ? {backgroundColor: `${props.backgroundColor}`} : null }\r\n                    >\r\n                        {props.children}\r\n                    </button>\r\n\r\n            )}\r\n        </React.Fragment>\r\n    );\r\n}\r\n\r\nexport default Button;","import React, {useContext, useState} from 'react';\r\nimport { useForm } from \"react-hook-form\";\r\nimport { useNavigate } from \"react-router-dom\";\r\n\r\nimport logo from '../../shared/assets/img/logo.png'\r\nimport Button from '../../shared/components/FormElements/Button';\r\n\r\nimport { AuthContext } from '../../shared/context/auth-context';\r\n\r\nimport './Auth.css';\r\n\r\nconst Auth = props => {\r\n    // useContext is used to access the context object created in auth-context.js\r\n    // with this we can access the isLoggedIn state and the login and logout functions\r\n    const auth = useContext(AuthContext);\r\n    const navigate = useNavigate();\r\n    // State to change between login and create\r\n    const [isLoginMode, setIsLoginMode] = useState(true);\r\n    const [errorMessage, setErrorMessage] = useState('');\r\n\r\n    // Allow for validation of input\r\n    const { register, handleSubmit, setValue, formState: { errors } } = useForm();\r\n\r\n    const onSubmit = data => {\r\n        let status; \r\n\r\n        // Either login or create account\r\n        if(isLoginMode) {\r\n            fetch('https://choice-champ-backend.glitch.me/user/signIn', {\r\n                method: 'POST',\r\n                headers: {\r\n                    'Content-Type': 'application/json'\r\n                },\r\n                body: JSON.stringify({\r\n                    username: data.usernameRequired,\r\n                    password: data.passwordRequired\r\n                })\r\n            })\r\n            .then(response => {\r\n                status = response.status;\r\n                return response.json()\r\n            })\r\n            .then(body => {\r\n                if(status === 200) {\r\n                    auth.login();\r\n                    // Save user id to context so it can be used in other backend calls\r\n                    auth.userIdSetter(body.userId);\r\n                    // Set the userId to local storage so it can be used in other backend calls\r\n                    localStorage.setItem('userId', body.userId);\r\n                    navigate('/collections');\r\n                } else {\r\n                    setErrorMessage(body.errMsg);\r\n                }\r\n            })\r\n            .catch(err => {\r\n                console.log(err);\r\n            });\r\n        } else {\r\n            fetch('https://choice-champ-backend.glitch.me/user', {\r\n                method: 'POST',\r\n                headers: {\r\n                    'Content-Type': 'application/json'\r\n                },\r\n                body: JSON.stringify({\r\n                    username: data.usernameRequired,\r\n                    password: data.passwordRequired\r\n                })\r\n            })\r\n            .then(response => {\r\n                status = response.status;\r\n                return response.json()\r\n            })\r\n            .then(body => {\r\n                if(status === 200) {\r\n                auth.login();\r\n                auth.userIdSetter(body.userId);\r\n\r\n                // Set the userId to local storage so it can be used in other backend calls\r\n                localStorage.setItem('userId', body.userId);\r\n\r\n                navigate('/welcome/info');\r\n                } else {\r\n                    setErrorMessage(body.errMsg);\r\n                }\r\n            })\r\n            .catch(err => {\r\n                console.log(err);\r\n            });\r\n        }\r\n    }\r\n\r\n    const switchModeHandler = () => {\r\n        setIsLoginMode(prevMode => !prevMode);\r\n        setErrorMessage('');\r\n        setValue('usernameRequired', '');\r\n        setValue('passwordRequired', '');\r\n\r\n        // Clean useForm errors\r\n        errors.usernameRequired = false;\r\n        errors.passwordRequired = false;\r\n    }\r\n\r\n    const navJoin = () => {\r\n        navigate('/party/joinParty');\r\n    }\r\n\r\n    return (\r\n        <div className='center'>\r\n            <form onSubmit={handleSubmit(onSubmit)}>\r\n                \r\n                <img src='https://cdn.glitch.global/ebf12691-ad1e-4a83-81e2-641b9d7c5f64/Choice%20Champ%20Logo.svg?v=1727964938019' alt=\"Choice Champ Logo\" id=\"logo\" />\r\n                \r\n                <div className='seperator' />\r\n                \r\n                {\r\n                    isLoginMode && (\r\n                        <div>\r\n                            <h3>Welcome Back</h3>\r\n                            <h4>Login to account</h4>\r\n                        </div>\r\n                    )\r\n                }\r\n                {\r\n                    !isLoginMode && (\r\n                        <div>\r\n                            <h3>Welcome!</h3>\r\n                            <h4>Create account</h4>\r\n                        </div>\r\n                    )\r\n                }\r\n                <input id=\"username\" placeholder=\"Username\" {...register(\"usernameRequired\", { required: true, minLength: 5, maxLength: 20 }) }/>\r\n                {errors.usernameRequired && <p className='error'>A username of at least 5 characters is required</p>}\r\n                <input type='password' id=\"password\" placeholder=\"Password\" {...register(\"passwordRequired\", { required: true, minLength: 5 }) }/>\r\n                {errors.passwordRequired && <p className='error'>A password of at lease 5 characters is required</p>}\r\n                {\r\n                    isLoginMode && (\r\n                        <Button type=\"submit\">Login</Button>\r\n                    )\r\n                }\r\n                {\r\n                    !isLoginMode && (\r\n                        <Button type=\"submit\">Create</Button>\r\n                    )\r\n                }\r\n                <p className='auth-error-msg'>{errorMessage}</p>\r\n                <div className='switch'>\r\n                    { isLoginMode && (\r\n                        <div>\r\n                            <p>Don't have an account?</p>\r\n                            <p onClick={switchModeHandler} className=\"switch-link\">Create Account</p>\r\n                            <p onClick={navJoin} className=\"switch-link\">Join Code</p>\r\n                        </div>\r\n                    )}\r\n                    { !isLoginMode && (\r\n                    <div>\r\n                        <p>Already have an account?</p>\r\n                        <p onClick={switchModeHandler} className=\"switch-link\">Login</p>\r\n                    </div>\r\n                    )}\r\n\r\n                </div>\r\n            </form>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Auth;"],"names":["props","_useState","useState","_useState2","_slicedToArray","bounce","setBounce","_jsx","React","children","type","disabled","className","style","backgroundColor","animation","concat","onClick","setTimeout","auth","useContext","AuthContext","navigate","useNavigate","isLoginMode","setIsLoginMode","_useState3","_useState4","errorMessage","setErrorMessage","_useForm","useForm","register","handleSubmit","setValue","errors","formState","switchModeHandler","prevMode","usernameRequired","passwordRequired","_jsxs","onSubmit","data","status","fetch","method","headers","body","JSON","stringify","username","password","then","response","json","login","userIdSetter","userId","localStorage","setItem","errMsg","catch","err","console","log","src","alt","id","_objectSpread","placeholder","required","minLength","maxLength","Button"],"sourceRoot":""}