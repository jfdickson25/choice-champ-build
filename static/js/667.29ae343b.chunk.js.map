{"version":3,"file":"static/js/667.29ae343b.chunk.js","mappings":"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","sources":["collections/pages/Collections.js","shared/components/FormElements/Button.js"],"sourcesContent":["import React, { useEffect, useRef, useState, useContext } from 'react';\r\nimport { useParams, useNavigate, Link } from 'react-router-dom';\r\nimport { Dialog } from '@mui/material';\r\nimport Loading from '../../shared/components/Loading';\r\n\r\nimport edit from '../../shared/assets/img/edit.png';\r\nimport editing from '../../shared/assets/img/editing.png';\r\n\r\nimport './Collections.css';\r\nimport { AuthContext } from '../../shared/context/auth-context';\r\nimport Button from '../../shared/components/FormElements/Button';\r\n\r\nconst Collections = props => {\r\n    const auth = useContext(AuthContext);\r\n    let navigate = useNavigate();\r\n\r\n    /************************************************************\r\n     * Initial load and data needed. Here we grab the info we need\r\n     * from the params and set edit and our collections list\r\n     ***********************************************************/\r\n    // Grab the type from the parameters\r\n    let collectionsType = useParams().type;\r\n\r\n    // Variable for title depending on the category\r\n    const [title, setTitle] = useState('');\r\n    // State for collections\r\n    const [collections, setCollections] = useState([]);\r\n    const [isEdit, setIsEdit] = useState(false);\r\n    const [isLoading, setIsLoading] = useState(true);\r\n\r\n    // State for error messages\r\n    const [nameError, setNameError] = useState(null);\r\n    const [joinError, setJoinError] = useState('');\r\n    const [navingBack, setNavingBack] = useState(false);\r\n    const [pressingBtn, setPressingBtn] = useState(false);\r\n\r\n    // Empty array will only run on the initial render\r\n    useEffect(() => {\r\n        auth.showFooterHandler(true);\r\n        \r\n        // Set the title depending on the type\r\n        if(collectionsType === 'movie') {\r\n            setTitle('Movie Collections')\r\n        } else if(collectionsType === 'tv') {\r\n            setTitle('TV Collections')\r\n        } else if(collectionsType === 'game') {\r\n            setTitle('Game Collections')\r\n        } else if(collectionsType === 'board') {\r\n            setTitle('Board Game Collections')\r\n        }\r\n        \r\n        // Make a fetch post request to collections with the userId and setCollections to the response\r\n        fetch(`https://choice-champ-backend.glitch.me/collections/${collectionsType}/${auth.userId}`, {\r\n            method: 'GET',\r\n            headers: {\r\n                'Content-Type': 'application/json'\r\n            }\r\n        })\r\n        .then(res => res.json())\r\n        .then(data => {\r\n            setCollections(data.collections);\r\n            setIsLoading(false);\r\n        });\r\n    }, [auth, collectionsType]);\r\n\r\n    /************************************************************\r\n     * Logic for setting edit state and removing movies\r\n     ***********************************************************/\r\n     const isEditHandler = () => isEdit ? setIsEdit(false) : setIsEdit(true);\r\n\r\n     const handleRemoveCollection = (id) => {\r\n            // Send a fetch delete request to collections with the userId and the collection id\r\n            fetch(`https://choice-champ-backend.glitch.me/collections/${collectionsType}/${auth.userId}/${id}`, {\r\n                method: 'DELETE',\r\n                headers: {\r\n                    'Content-Type': 'application/json'\r\n                }\r\n            })\r\n            .then(data => {\r\n                // Remove the collection from the collections array\r\n                setCollections(collections.filter(collection => collection._id !== id));\r\n            })\r\n            .catch(err => {\r\n                console.log(err);\r\n            }\r\n        )\r\n     }\r\n\r\n\r\n    /************************************************************\r\n     * Logic for our dialog, including adding new categories\r\n     ***********************************************************/\r\n    // Modal state and functions\r\n    const [open, setOpen] = useState(false);\r\n    // Modal input state and function\r\n    const inputCollectionRef = useRef();\r\n    const inputJoinRef = useRef();\r\n    const handleOpen = () => setOpen(true);\r\n\r\n    const handleClose = () => {\r\n        // Reset the value in the input\r\n        inputCollectionRef.current.value = '';\r\n        inputJoinRef.current.value = null;\r\n        setNameError(false);\r\n        setJoinError('');\r\n        setOpen(false);\r\n    }\r\n\r\n    const changeCollectionHandler = (event) => {\r\n        const value = event.target.value;\r\n\r\n        inputCollectionRef.current.value = value;\r\n    }\r\n\r\n    const changeJoinCodeHandler = (event) => {\r\n        const value = event.target.value;\r\n\r\n        inputJoinRef.current.value = value;\r\n    }\r\n\r\n    const handleAddCollection = () => {\r\n\r\n        // Only add if the input is not empty and the collection does not already exist\r\n        if(inputCollectionRef.current.value === '' || collections.find(collection => collection.name === inputCollectionRef.current.value)) {\r\n            setNameError(true);\r\n            return;\r\n        }\r\n\r\n        // Send a fetch post request to collections with the userId and the new collection name\r\n        fetch(`https://choice-champ-backend.glitch.me/collections/${auth.userId}`, {\r\n            method: 'POST',\r\n            headers: {\r\n                'Content-Type': 'application/json'\r\n            },\r\n            body: JSON.stringify({\r\n                name: inputCollectionRef.current.value,\r\n                type: collectionsType\r\n            })\r\n        })\r\n        .then(res => res.json())\r\n        .then(data => {\r\n            // Add the new collection to the collections array\r\n            setCollections([...collections, data.collection]);\r\n        })\r\n        .catch(err => {\r\n            console.log(err);\r\n        });\r\n\r\n\r\n        // Close the modal\r\n        handleClose();\r\n    }\r\n\r\n    const handleJoinCollection = () => {\r\n\r\n        // Check that the code is five digits long\r\n        if(inputJoinRef.current.value.length !== 5) {\r\n            setJoinError('Code must be 5 digits long');\r\n            return;\r\n        }\r\n\r\n        // Send a fetch post request to collections with the userId and the new collection name\r\n        fetch(`https://choice-champ-backend.glitch.me/collections/join/${inputJoinRef.current.value}/${collectionsType}/${auth.userId}`, {\r\n            method: 'GET',\r\n            headers: {\r\n                'Content-Type': 'application/json'\r\n            }\r\n        })\r\n        .then(res => res.json())\r\n        .then(data => {\r\n            if (data.errMsg) {\r\n                setJoinError(data.errMsg);\r\n                return;\r\n            } else {\r\n                // Add the new collection to the collections array\r\n                setCollections([...collections, data.collection]);\r\n                // Close the modal\r\n                handleClose();\r\n            }\r\n        })\r\n        .catch(err => {\r\n            console.log(err);\r\n        });\r\n    }\r\n\r\n    const navBack = () => {\r\n        setNavingBack(true);\r\n        setTimeout(() => {\r\n            setNavingBack(false);\r\n            navigate('/collections');\r\n        }, 1000);\r\n    }\r\n\r\n    const moveLeft = (id) => {\r\n        // Find the collection with the id parameter\r\n        const collection = collections.find(collection => collection._id === id);\r\n        // Move the collection to the left in the collections array\r\n        const index = collections.indexOf(collection);\r\n        if(index === 0) {\r\n            return;\r\n        }\r\n        const newCollections = [...collections];\r\n        newCollections.splice(index, 1);\r\n        newCollections.splice(index - 1, 0, collection);\r\n        setCollections(newCollections);\r\n\r\n        // Send a fetch post request with the userId and the collection id to move the collection left\r\n        fetch(`https://choice-champ-backend.glitch.me/collections/moveLeft/${collectionsType}/${auth.userId}/${id}`, {\r\n            method: 'POST',\r\n            headers: {\r\n                'Content-Type': 'application/json'\r\n            }\r\n        })\r\n        .then(data => {\r\n            setCollections(newCollections);\r\n        })\r\n        .catch(err => {\r\n            console.log(err);\r\n        });\r\n    }\r\n\r\n    const moveRight = (id) => {\r\n        // Find the collection with the id parameter\r\n        const collection = collections.find(collection => collection._id === id);\r\n        // Move the collection to the right in the collections array\r\n        const index = collections.indexOf(collection);\r\n        if(index === collections.length - 1) {\r\n            return;\r\n        }\r\n        const newCollections = [...collections];\r\n        newCollections.splice(index, 1);\r\n        newCollections.splice(index + 1, 0, collection);\r\n        setCollections(newCollections);\r\n\r\n        // Send a fetch post with the userId and collection id to move the collection to the right\r\n        fetch(`https://choice-champ-backend.glitch.me/collections/moveRight/${collectionsType}/${auth.userId}/${id}`, {\r\n            method: 'POST',\r\n            headers: {\r\n                'Content-Type': 'application/json'\r\n            }\r\n        })\r\n        .then(data => {\r\n            setCollections(newCollections);\r\n        })\r\n        .catch(err => {\r\n            console.log(err);\r\n        });\r\n    }\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <div className='content'>\r\n                {\r\n                    navingBack ? \r\n                    (<img src=\"https://cdn.glitch.global/ebf12691-ad1e-4a83-81e2-641b9d7c5f64/back-button-active.png?v=1702137193420\" alt=\"Back symbol\" className=\"top-left clickable\" style={{animation: 'button-press .75s'}} />) : \r\n                    (<img src=\"https://cdn.glitch.global/ebf12691-ad1e-4a83-81e2-641b9d7c5f64/back-button.png?v=1702137134668\" alt=\"Back symbol\" className=\"top-left clickable\" onClick={navBack} />)\r\n                }\r\n                <h2 className={`title color-${collectionsType}`}>{title}</h2>\r\n                <img src={ isEdit ? editing :  edit } className=\"edit clickable\" alt='Edit icon' onClick={isEditHandler} style={isEdit ? {animation: 'button-press .75s'} : null} />\r\n                {\r\n                    pressingBtn ?\r\n                    <button \r\n                        className={`add-btn backgroundColor-${collectionsType} backgroundColorPressed-${collectionsType}`}\r\n                        style={{animation: 'button-press .75s'}}>Add/Join Collection</button>\r\n                    :\r\n                    <button \r\n                        className={`add-btn backgroundColor-${collectionsType} clickable`}\r\n                        onClick={() => {\r\n                            setPressingBtn(true);\r\n                            setTimeout(() => {\r\n                                handleOpen();\r\n                                setPressingBtn(false);\r\n                            }, 750);\r\n                        }}>Add/Join Collection</button>\r\n                }\r\n\r\n                {\r\n                    isLoading ? <Loading type='beat' className='list-loading' size={20} /> : \r\n                    (<div className='collections-content'>\r\n                        {\r\n                            collections.length > 0 ? collections.map((collection, index) => (\r\n                                isEdit ? (\r\n                                    <div className='collections-item' key={collection._id}>\r\n                                        <img className='remove' alt=\"Remove Icon\" onClick={() => { handleRemoveCollection(collection._id) }} src='https://cdn.glitch.global/7cdfb78e-767d-42ef-b9ca-2f58981eb393/remove.png?v=1682136649433' />\r\n                                        { index !== 0 && <img className='left' alt=\"left arrow\" onClick={() => { moveLeft(collection._id) }} src='https://cdn.glitch.global/7cdfb78e-767d-42ef-b9ca-2f58981eb393/left.png?v=1692161740511' /> }\r\n                                        <div className={`collection-text-${collectionsType} collection-text`}>\r\n                                            {collection.name}\r\n                                        </div>\r\n                                        { index !== collections.length - 1 && <img className='right' alt=\"right arrow\" onClick={ () => { moveRight(collection._id) } } src='https://cdn.glitch.global/7cdfb78e-767d-42ef-b9ca-2f58981eb393/right.png?v=1692161745669' /> }\r\n                                    </div>\r\n                                ) : (\r\n                                    <Link to={`/collections/${collectionsType}/${collection.name}/${collection._id}`} className='collections-item' key={collection._id} >\r\n                                        <div className={`collection-text-${collectionsType} collection-text`}>\r\n                                            {collection.name}\r\n                                        </div>\r\n                                    </Link>\r\n                                )\r\n                            )) : <div className='no-collections-txt'>No Collections</div>\r\n                        }\r\n                    </div>)\r\n                }\r\n            </div>\r\n            <Dialog open={open} onClose={handleClose} fullWidth maxWidth='lg'>\r\n                <div className='dialog-content'>\r\n                    <div className='dialog-sub-content'>\r\n                        <input type=\"text\" placeholder={\"collection name\"} onChange={changeCollectionHandler} ref={inputCollectionRef}/>\r\n                        <Button onClick={handleAddCollection}>Create Collection</Button>\r\n                        {nameError && <p className='error' style={{textAlign: 'center'}}>Collection must have a name</p>}\r\n                        <p className='or'>OR</p>\r\n                        <input type=\"number\" min={10000} max={99999} placeholder={\"share code\"} onChange={changeJoinCodeHandler} ref={inputJoinRef}/>\r\n                        <Button onClick={handleJoinCollection}>Join Collection</Button>\r\n                        <p className='error' style={{textAlign: 'center'}}>{joinError}</p>\r\n                    </div>\r\n                </div>\r\n            </Dialog>\r\n        </React.Fragment>\r\n    );\r\n}\r\n\r\nexport default Collections;","import React, { useState } from 'react';\r\n\r\nimport './Button.css';\r\n\r\nconst Button = props => {\r\n    const [bounce, setBounce] = useState(false);\r\n\r\n    const action = () => {\r\n        if (props.onClick) {\r\n            setBounce(true);\r\n            setTimeout(() => {\r\n                setBounce(false);\r\n                props.onClick();\r\n            }, 1000);\r\n        }\r\n    }\r\n\r\n    return (\r\n        <React.Fragment>\r\n            { \r\n                bounce ? (\r\n                    <button \r\n                        type={props.type} \r\n                        disabled={props.disabled}\r\n                        className={props.className}\r\n                        style={ props.backgroundColor ? {animation: 'button-press .75s', backgroundColor: props.backgroundColor} : {animation: 'button-press .75s', backgroundColor: '#dd9b14' }}\r\n                    >\r\n                        {props.children}\r\n                    </button>\r\n                ) : (\r\n                    <button \r\n                        type={props.type} \r\n                        disabled={props.disabled}\r\n                        onClick={action}\r\n                        className={props.className}\r\n                    >\r\n                        {props.children}\r\n                    </button>\r\n\r\n            )}\r\n        </React.Fragment>\r\n    );\r\n}\r\n\r\nexport default Button;"],"names":["props","auth","useContext","AuthContext","navigate","useNavigate","collectionsType","useParams","type","_useState","useState","_useState2","_slicedToArray","title","setTitle","_useState3","_useState4","collections","setCollections","_useState5","_useState6","isEdit","setIsEdit","_useState7","_useState8","isLoading","setIsLoading","_useState9","_useState10","nameError","setNameError","_useState11","_useState12","joinError","setJoinError","_useState13","_useState14","navingBack","setNavingBack","_useState15","_useState16","pressingBtn","setPressingBtn","useEffect","showFooterHandler","fetch","concat","userId","method","headers","then","res","json","data","_useState17","_useState18","open","setOpen","inputCollectionRef","useRef","inputJoinRef","handleClose","current","value","_jsxs","React","children","className","_jsx","src","alt","style","animation","onClick","setTimeout","editing","edit","Loading","size","length","map","collection","index","id","_id","filter","catch","err","console","log","find","indexOf","newCollections","_toConsumableArray","splice","moveLeft","name","moveRight","Link","to","Dialog","onClose","fullWidth","maxWidth","placeholder","onChange","event","target","ref","Button","body","JSON","stringify","textAlign","min","max","errMsg","bounce","setBounce","disabled","backgroundColor"],"sourceRoot":""}