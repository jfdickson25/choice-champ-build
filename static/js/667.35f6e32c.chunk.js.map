{"version":3,"file":"static/js/667.35f6e32c.chunk.js","mappings":"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","sources":["shared/assets/img/back.svg","collections/pages/Collections.js","shared/components/FormElements/Button.js"],"sourcesContent":["var _rect, _path;\nvar _excluded = [\"title\", \"titleId\"];\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\nimport * as React from \"react\";\nfunction SvgBack(_ref, svgRef) {\n  var title = _ref.title,\n    titleId = _ref.titleId,\n    props = _objectWithoutProperties(_ref, _excluded);\n  return /*#__PURE__*/React.createElement(\"svg\", _extends({\n    fill: \"none\",\n    height: 40,\n    viewBox: \"0 0 40 40\",\n    width: 40,\n    xmlns: \"http://www.w3.org/2000/svg\",\n    ref: svgRef,\n    \"aria-labelledby\": titleId\n  }, props), title ? /*#__PURE__*/React.createElement(\"title\", {\n    id: titleId\n  }, title) : null, _rect || (_rect = /*#__PURE__*/React.createElement(\"rect\", {\n    height: 39,\n    rx: 19.5,\n    stroke: \"#fff\",\n    width: 39,\n    x: 0.5,\n    y: 0.5\n  })), _path || (_path = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"m17 20-.7071-.7071-.7071.7071.7071.7071zm5.2929-6.7071-6 6 1.4142 1.4142 6-6zm-6 7.4142 6 6 1.4142-1.4142-6-6z\",\n    fill: \"#fff\"\n  })));\n}\nvar ForwardRef = /*#__PURE__*/React.forwardRef(SvgBack);\nexport default __webpack_public_path__ + \"static/media/back.130646437979786be8370a1fdf68655a.svg\";\nexport { ForwardRef as ReactComponent };","import React, { useEffect, useRef, useState, useContext } from 'react';\r\nimport { useParams, useNavigate, Link } from 'react-router-dom';\r\nimport { Dialog } from '@mui/material';\r\nimport Loading from '../../shared/components/Loading';\r\n\r\nimport back from '../../shared/assets/img/back.svg';\r\nimport add from '../../shared/assets/img/add.png';\r\nimport edit from '../../shared/assets/img/edit.png';\r\nimport editing from '../../shared/assets/img/editing.png';\r\n\r\nimport './Collections.css';\r\nimport { AuthContext } from '../../shared/context/auth-context';\r\nimport Button from '../../shared/components/FormElements/Button';\r\n\r\nconst Collections = props => {\r\n    const auth = useContext(AuthContext);\r\n    let navigate = useNavigate();\r\n\r\n    /************************************************************\r\n     * Initial load and data needed. Here we grab the info we need\r\n     * from the params and set edit and our collections list\r\n     ***********************************************************/\r\n    // Grab the type from the parameters\r\n    let collectionsType = useParams().type;\r\n\r\n    // Variable for title depending on the category\r\n    const [title, setTitle] = useState('');\r\n    // State for collections\r\n    const [collections, setCollections] = useState([]);\r\n    const [isEdit, setIsEdit] = useState(false);\r\n    const [isLoading, setIsLoading] = useState(true);\r\n\r\n    // State for error messages\r\n    const [nameError, setNameError] = useState(null);\r\n    const [joinError, setJoinError] = useState('');\r\n\r\n    // Empty array will only run on the initial render\r\n    useEffect(() => {\r\n        auth.showFooterHandler(true);\r\n        \r\n        // Set the title depending on the type\r\n        if(collectionsType === 'movie') {\r\n            setTitle('Movie Collections')\r\n        } else if(collectionsType === 'tv') {\r\n            setTitle('TV Collections')\r\n        } else if(collectionsType === 'game') {\r\n            setTitle('Game Collections')\r\n        } else if(collectionsType === 'board') {\r\n            setTitle('Board Game Collections')\r\n        }\r\n        \r\n        // Make a fetch post request to collections with the userId and setCollections to the response\r\n        fetch(`https://choice-champ-backend.glitch.me/collections/${collectionsType}/${auth.userId}`, {\r\n            method: 'GET',\r\n            headers: {\r\n                'Content-Type': 'application/json'\r\n            }\r\n        })\r\n        .then(res => res.json())\r\n        .then(data => {\r\n            setCollections(data.collections);\r\n            setIsLoading(false);\r\n        });\r\n    }, [collectionsType]);\r\n\r\n    /************************************************************\r\n     * Logic for setting edit state and removing movies\r\n     ***********************************************************/\r\n     const isEditHandler = () => isEdit ? setIsEdit(false) : setIsEdit(true);\r\n\r\n     const handleRemoveCollection = (id) => {\r\n            // Send a fetch delete request to collections with the userId and the collection id\r\n            fetch(`https://choice-champ-backend.glitch.me/collections/${collectionsType}/${auth.userId}/${id}`, {\r\n                method: 'DELETE',\r\n                headers: {\r\n                    'Content-Type': 'application/json'\r\n                }\r\n            })\r\n            .then(data => {\r\n                // Remove the collection from the collections array\r\n                setCollections(collections.filter(collection => collection._id !== id));\r\n            })\r\n            .catch(err => {\r\n                console.log(err);\r\n            }\r\n        )\r\n     }\r\n\r\n\r\n    /************************************************************\r\n     * Logic for our dialog, including adding new categories\r\n     ***********************************************************/\r\n    // Modal state and functions\r\n    const [open, setOpen] = useState(false);\r\n    // Modal input state and function\r\n    const inputCollectionRef = useRef();\r\n    const inputJoinRef = useRef();\r\n    const handleOpen = () => setOpen(true);\r\n\r\n    const handleClose = () => {\r\n        // Reset the value in the input\r\n        inputCollectionRef.current.value = '';\r\n        inputJoinRef.current.value = null;\r\n        setNameError(false);\r\n        setJoinError('');\r\n        setOpen(false);\r\n    }\r\n\r\n    const changeCollectionHandler = (event) => {\r\n        const value = event.target.value;\r\n\r\n        inputCollectionRef.current.value = value;\r\n    }\r\n\r\n    const changeJoinCodeHandler = (event) => {\r\n        const value = event.target.value;\r\n\r\n        inputJoinRef.current.value = value;\r\n    }\r\n\r\n    const handleAddCollection = () => {\r\n\r\n        // Only add if the input is not empty and the collection does not already exist\r\n        if(inputCollectionRef.current.value === '' || collections.find(collection => collection.name === inputCollectionRef.current.value)) {\r\n            setNameError(true);\r\n            return;\r\n        }\r\n\r\n        // Send a fetch post request to collections with the userId and the new collection name\r\n        fetch(`https://choice-champ-backend.glitch.me/collections/${auth.userId}`, {\r\n            method: 'POST',\r\n            headers: {\r\n                'Content-Type': 'application/json'\r\n            },\r\n            body: JSON.stringify({\r\n                name: inputCollectionRef.current.value,\r\n                type: collectionsType\r\n            })\r\n        })\r\n        .then(res => res.json())\r\n        .then(data => {\r\n            // Add the new collection to the collections array\r\n            setCollections([...collections, data.collection]);\r\n        })\r\n        .catch(err => {\r\n            console.log(err);\r\n        });\r\n\r\n\r\n        // Close the modal\r\n        handleClose();\r\n    }\r\n\r\n    const handleJoinCollection = () => {\r\n\r\n        // Check that the code is five digits long\r\n        if(inputJoinRef.current.value.length !== 5) {\r\n            setJoinError('Code must be 5 digits long');\r\n            return;\r\n        }\r\n\r\n        // Send a fetch post request to collections with the userId and the new collection name\r\n        fetch(`https://choice-champ-backend.glitch.me/collections/join/${inputJoinRef.current.value}/${collectionsType}/${auth.userId}`, {\r\n            method: 'GET',\r\n            headers: {\r\n                'Content-Type': 'application/json'\r\n            }\r\n        })\r\n        .then(res => res.json())\r\n        .then(data => {\r\n            if (data.errMsg) {\r\n                setJoinError(data.errMsg);\r\n                return;\r\n            } else {\r\n                // Add the new collection to the collections array\r\n                setCollections([...collections, data.collection]);\r\n                // Close the modal\r\n                handleClose();\r\n            }\r\n        })\r\n        .catch(err => {\r\n            console.log(err);\r\n        });\r\n    }\r\n\r\n    const navBack = () => {\r\n        navigate('/collections');\r\n    }\r\n\r\n    const moveLeft = (id) => {\r\n        // Find the collection with the id parameter\r\n        const collection = collections.find(collection => collection._id === id);\r\n        // Move the collection to the left in the collections array\r\n        const index = collections.indexOf(collection);\r\n        if(index === 0) {\r\n            return;\r\n        }\r\n        const newCollections = [...collections];\r\n        newCollections.splice(index, 1);\r\n        newCollections.splice(index - 1, 0, collection);\r\n        setCollections(newCollections);\r\n\r\n        // Send a fetch post request with the userId and the collection id to move the collection left\r\n        fetch(`https://choice-champ-backend.glitch.me/collections/moveLeft/${collectionsType}/${auth.userId}/${id}`, {\r\n            method: 'POST',\r\n            headers: {\r\n                'Content-Type': 'application/json'\r\n            }\r\n        })\r\n        .then(data => {\r\n            setCollections(newCollections);\r\n        })\r\n        .catch(err => {\r\n            console.log(err);\r\n        });\r\n    }\r\n\r\n    const moveRight = (id) => {\r\n        // Find the collection with the id parameter\r\n        const collection = collections.find(collection => collection._id === id);\r\n        // Move the collection to the right in the collections array\r\n        const index = collections.indexOf(collection);\r\n        if(index === collections.length - 1) {\r\n            return;\r\n        }\r\n        const newCollections = [...collections];\r\n        newCollections.splice(index, 1);\r\n        newCollections.splice(index + 1, 0, collection);\r\n        setCollections(newCollections);\r\n\r\n        // Send a fetch post with the userId and collection id to move the collection to the right\r\n        fetch(`https://choice-champ-backend.glitch.me/collections/moveRight/${collectionsType}/${auth.userId}/${id}`, {\r\n            method: 'POST',\r\n            headers: {\r\n                'Content-Type': 'application/json'\r\n            }\r\n        })\r\n        .then(data => {\r\n            setCollections(newCollections);\r\n        })\r\n        .catch(err => {\r\n            console.log(err);\r\n        });\r\n    }\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <div className='content'>\r\n                <img src={back} alt=\"Back symbol\" className=\"top-left\" onClick={navBack} />\r\n                <h2 className='title'>{title}</h2>\r\n                <img src={ isEdit ? editing :  edit } className=\"edit\" alt='Edit icon' onClick={isEditHandler} />\r\n                <img src={add} className='add' alt='Add icon' onClick={handleOpen} />\r\n\r\n                {\r\n                    isLoading ? <Loading type='beat' className='list-loading' size={20} /> : \r\n                    (<div className='collections-content'>\r\n                        {\r\n                            collections.length > 0 ? collections.map((collection, index) => (\r\n                                isEdit ? (\r\n                                    <div className='collections-item' key={collection._id}>\r\n                                        <img className='remove' alt=\"Remove Icon\" onClick={() => { handleRemoveCollection(collection._id) }} src='https://cdn.glitch.global/7cdfb78e-767d-42ef-b9ca-2f58981eb393/remove.png?v=1682136649433' />\r\n                                        { index !== 0 && <img className='left' onClick={() => { moveLeft(collection._id) }} src='https://cdn.glitch.global/7cdfb78e-767d-42ef-b9ca-2f58981eb393/left.png?v=1692161740511' /> }\r\n                                        <div className=\"collection-text\">\r\n                                            {collection.name}\r\n                                        </div>\r\n                                        { index !== collections.length - 1 && <img className='right' onClick={ () => { moveRight(collection._id) } } src='https://cdn.glitch.global/7cdfb78e-767d-42ef-b9ca-2f58981eb393/right.png?v=1692161745669' /> }\r\n                                    </div>\r\n                                ) : (\r\n                                    <Link to={`/collections/${collectionsType}/${collection.name}/${collection._id}`} className='collections-item' key={collection._id} >\r\n                                        <div className=\"collection-text\">\r\n                                            {collection.name}\r\n                                        </div>\r\n                                    </Link>\r\n                                )\r\n                            )) : <div style={{textAlign: 'center', gridColumn: '1/4', fontWeight: 'bold'}}>No Collections</div>\r\n                        }\r\n                    </div>)\r\n                }\r\n            </div>\r\n            <Dialog open={open} onClose={handleClose} fullWidth maxWidth='lg'>\r\n                <div className='dialog-content'>\r\n                    <div className='dialog-sub-content'>\r\n                        <input type=\"text\" placeholder={\"collection name\"} onChange={changeCollectionHandler} ref={inputCollectionRef}/>\r\n                        <Button onClick={handleAddCollection}>Create Collection</Button>\r\n                        {nameError && <p className='error' style={{textAlign: 'center'}}>Collection must have a name</p>}\r\n                        <p className='or'>OR</p>\r\n                        <input type=\"number\" min={10000} max={99999} placeholder={\"share code\"} onChange={changeJoinCodeHandler} ref={inputJoinRef}/>\r\n                        <Button onClick={handleJoinCollection}>Join Collection</Button>\r\n                        <p className='error' style={{textAlign: 'center'}}>{joinError}</p>\r\n                    </div>\r\n                </div>\r\n            </Dialog>\r\n        </React.Fragment>\r\n    );\r\n}\r\n\r\nexport default Collections;","import React from 'react';\r\n\r\nimport './Button.css';\r\n\r\nconst Button = props => {\r\n    return (\r\n        <button \r\n            type={props.type} \r\n            disabled={props.disabled}\r\n            onClick={props.onClick}\r\n            className={props.className}\r\n        >\r\n            {props.children}\r\n        </button>\r\n    );\r\n}\r\n\r\nexport default Button;"],"names":["props","auth","useContext","AuthContext","navigate","useNavigate","collectionsType","useParams","type","_useState","useState","_useState2","_slicedToArray","title","setTitle","_useState3","_useState4","collections","setCollections","_useState5","_useState6","isEdit","setIsEdit","_useState7","_useState8","isLoading","setIsLoading","_useState9","_useState10","nameError","setNameError","_useState11","_useState12","joinError","setJoinError","useEffect","showFooterHandler","fetch","concat","userId","method","headers","then","res","json","data","_useState13","_useState14","open","setOpen","inputCollectionRef","useRef","inputJoinRef","handleClose","current","value","_jsxs","React","children","className","_jsx","src","back","alt","onClick","editing","edit","add","Loading","size","length","map","collection","index","id","_id","filter","catch","err","console","log","find","indexOf","newCollections","_toConsumableArray","splice","moveLeft","name","moveRight","Link","to","style","textAlign","gridColumn","fontWeight","Dialog","onClose","fullWidth","maxWidth","placeholder","onChange","event","target","ref","Button","body","JSON","stringify","min","max","errMsg","disabled"],"sourceRoot":""}