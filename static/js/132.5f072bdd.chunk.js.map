{"version":3,"file":"static/js/132.5f072bdd.chunk.js","mappings":"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","sources":["shared/assets/img/back.svg","collection/pages/Details.js"],"sourcesContent":["var _rect, _path;\nvar _excluded = [\"title\", \"titleId\"];\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\nimport * as React from \"react\";\nfunction SvgBack(_ref, svgRef) {\n  var title = _ref.title,\n    titleId = _ref.titleId,\n    props = _objectWithoutProperties(_ref, _excluded);\n  return /*#__PURE__*/React.createElement(\"svg\", _extends({\n    fill: \"none\",\n    height: 40,\n    viewBox: \"0 0 40 40\",\n    width: 40,\n    xmlns: \"http://www.w3.org/2000/svg\",\n    ref: svgRef,\n    \"aria-labelledby\": titleId\n  }, props), title ? /*#__PURE__*/React.createElement(\"title\", {\n    id: titleId\n  }, title) : null, _rect || (_rect = /*#__PURE__*/React.createElement(\"rect\", {\n    height: 39,\n    rx: 19.5,\n    stroke: \"#fff\",\n    width: 39,\n    x: 0.5,\n    y: 0.5\n  })), _path || (_path = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"m17 20-.7071-.7071-.7071.7071.7071.7071zm5.2929-6.7071-6 6 1.4142 1.4142 6-6zm-6 7.4142 6 6 1.4142-1.4142-6-6z\",\n    fill: \"#fff\"\n  })));\n}\nvar ForwardRef = /*#__PURE__*/React.forwardRef(SvgBack);\nexport default __webpack_public_path__ + \"static/media/back.130646437979786be8370a1fdf68655a.svg\";\nexport { ForwardRef as ReactComponent };","import React, { useState, useEffect, useContext } from 'react';\r\nimport { useParams, useNavigate } from 'react-router-dom';\r\nimport { AuthContext } from '../../shared/context/auth-context';\r\nimport Loading from '../../shared/components/Loading';\r\n\r\nimport './Details.css';\r\nimport circle from '../../shared/assets/img/circle.png';\r\nimport check from '../../shared/assets/img/check.png';\r\nimport back from '../../shared/assets/img/back.svg';\r\n\r\nconst Details = () => {\r\n    const auth = useContext(AuthContext);\r\n    let navigate = useNavigate();\r\n\r\n    /************************************************************\r\n     * Initial load and data needed. Here we grab the info we need\r\n     * from the params and set edit and our movies list\r\n     ***********************************************************/\r\n    // Grab the collection name and id from the parameters\r\n    let collectionType = useParams().type;\r\n    let collectionName = useParams().name;\r\n    let collectionId = useParams().collectionId;\r\n    let itemId = useParams().itemId;\r\n\r\n    const [details, setDetails] = useState({});\r\n    const [providers, setProviders] = useState({}); // List of providers to watch\r\n    const [loading, setLoading] = useState(false); // Loading state for when we are fetching data\r\n    const [navingBack, setNavingBack] = useState(false);\r\n    const [collectionList, setCollectionList] = useState([]);\r\n    const [loadingCollectionList, setLoadingCollectionList] = useState(false);\r\n    const [currentCollectionExists, setCurrentCollectionExists] = useState(true);\r\n\r\n    useEffect(() => {\r\n        auth.showFooterHandler(false);\r\n        setLoading(true);\r\n        setLoadingCollectionList(true);\r\n        // Get all the items in the collection to check if any items in the search are already in the collection\r\n        fetch(`https://choice-champ-backend.glitch.me/media/getInfo/${collectionType}/${itemId}`, {\r\n            method: 'GET',\r\n            headers: {\r\n                'Content-Type': 'application/json'\r\n            }\r\n        })\r\n        .then(res => res.json())\r\n        .then(data => {\r\n            // Remove all the html tags from the overview string\r\n            // This is specifically for board games because the overview is in html\r\n            if(collectionType === 'board') {\r\n                const regex = /(<([^>]+)>)/gi;\r\n                let string = data.media.details.overview.replace(regex, \" \");\r\n                let string2 = string.replace(/&mdash;/g, \"-\");\r\n                let string3 = string2.replace(/&nbsp;/g, \" \");\r\n                let string4 = string3.replace(/&quot;/g, '\"');\r\n                let string5 = string4.replace(/&amp;/g, \"&\");\r\n                let string6 = string5.replace(/&rsquo;/g, \"'\");\r\n                \r\n                data.media.details.overview = string6;\r\n            }\r\n\r\n            setDetails(data.media.details);\r\n\r\n            if(collectionType !== 'board' || collectionType !== 'game') {\r\n                // Set the providers to the providers object\r\n                setProviders(data.media.providers);\r\n            } \r\n            \r\n            if (collectionType === 'game') {\r\n                setProviders({\r\n                    platforms: data.media.providers.platforms\r\n                });\r\n            }\r\n\r\n            setLoading(false);\r\n        });\r\n\r\n        fetch(`https://choice-champ-backend.glitch.me/collections/collectionList/${collectionType}/${itemId}/${auth.userId}`, {\r\n            method: 'GET',\r\n            headers: {\r\n                'Content-Type': 'application/json'\r\n            }\r\n        })\r\n        .then(res => res.json())\r\n        .then(data => {\r\n            setCollectionList([...data.collections]);\r\n            setLoadingCollectionList(false);\r\n        });\r\n    }, []);\r\n\r\n    const navBack = () => {\r\n        setNavingBack(true);\r\n        setTimeout(() => {\r\n            setNavingBack(false);\r\n            if(currentCollectionExists) {\r\n                navigate(`/collections/${collectionType}/${collectionName}/${collectionId}#${itemId}`);\r\n            } else {\r\n                navigate(`/collections/${collectionType}/${collectionName}/${collectionId}`);\r\n            }\r\n        }, 1000);\r\n    }\r\n\r\n    const addToCollection = (addCollectionId, index) => {\r\n\r\n        let tempId = itemId;\r\n\r\n        // For collections that are not games or boards, we need to parse the id to an int\r\n        // this is because we grab the id from the url and it is a string\r\n        if(collectionType !== 'board') {\r\n            tempId = parseInt(tempId);\r\n        }\r\n\r\n        // Make a fetch post request to add an item to a collection\r\n        fetch(`https://choice-champ-backend.glitch.me/collections/items/${addCollectionId}`, {\r\n            method: 'POST',\r\n            headers: {\r\n                'Content-Type': 'application/json'\r\n            },\r\n            body: JSON.stringify([{\r\n                title: details.title,\r\n                id: tempId,\r\n                poster: details.poster\r\n            }])\r\n        })\r\n        .then(res => res.json())\r\n        .then(data => {\r\n            // Create a temp collection list to update the collection list\r\n            // Update the collection list with the new item id\r\n            let tempCollection = [...collectionList];\r\n            tempCollection[index].itemId = data.newItems[0]._id;\r\n            setCollectionList([...tempCollection]);\r\n        });\r\n    }\r\n\r\n    const removeFromCollection = (removeCollectionId, removeItemId) => {\r\n        // Make a fetch delete request to remove an item from a collection\r\n        fetch(`https://choice-champ-backend.glitch.me/collections/items/${removeCollectionId}/${removeItemId}`, {\r\n            method: 'DELETE',\r\n            headers: {\r\n                'Content-Type': 'application/json'\r\n            }\r\n        });\r\n    }\r\n\r\n    return (\r\n        <div className='content'>\r\n            {\r\n                navingBack ? \r\n                (<img src=\"https://cdn.glitch.global/ebf12691-ad1e-4a83-81e2-641b9d7c5f64/back-button-active.png?v=1702137193420\" alt=\"Back symbol\" className=\"top-left clickable\" style={{animation: 'button-press .75s'}} />) : \r\n                (<img src=\"https://cdn.glitch.global/ebf12691-ad1e-4a83-81e2-641b9d7c5f64/back-button.png?v=1702137134668\" alt=\"Back symbol\" className=\"top-left clickable\" onClick={navBack} />)\r\n            }\r\n            { \r\n                loading ? <Loading type='beat' className='list-loading' size={20} /> : \r\n                <React.Fragment>\r\n                    <div id=\"content-details\">\r\n                        <img\r\n                            className={ collectionType === 'game' ? 'details-img-game' :'details-img' }\r\n                            src={details.poster}\r\n                        />\r\n                        <div className='details-title'>{details.title}</div>\r\n                        {\r\n                                <div className='details-section'>\r\n                                    <span className='details-section-title'>\r\n                                        { (collectionType === 'game' || collectionType === 'board') && ' Play Time:' } \r\n                                        { collectionType === 'movie' && ' Runtime:' }\r\n                                        { collectionType === 'tv' && ' Seasons:' }\r\n                                    </span> \r\n                                    {\r\n                                        details.runtime > 0 ? details.runtime : 'N/A'\r\n                                    }\r\n                                    { (collectionType === 'game' && details.runtime > 0) && ' hour' } \r\n                                    { (collectionType === 'movie' || collectionType === 'board') && ' minute' } \r\n                                    { collectionType === 'tv' && ' season' }\r\n                                    { details.runtime > 1 && 's' }\r\n                                </div>\r\n                        }\r\n                        {\r\n                            collectionType === 'board' && (\r\n                                <React.Fragment>\r\n                                    <div className='details-section'>\r\n                                        <span className='details-section-title'>Min Players:</span> {details.minPlayers}\r\n                                    </div>\r\n                                    <div className='details-section'>\r\n                                        <span className='details-section-title'>Max Players:</span> {details.maxPlayers}\r\n                                    </div>\r\n                                </React.Fragment>\r\n                            )\r\n                        }\r\n                        <div className='details-section'>\r\n                            <div className='details-section-title'>Overview:</div>\r\n                            <div className='details-overview'>{details.overview}</div>\r\n                        </div>\r\n\r\n                        { \r\n                            \r\n                            (collectionType === 'movie' || collectionType === 'tv') && \r\n                            (\r\n                                <React.Fragment>\r\n                                    <div className='details-provider-title'>Stream:</div>\r\n                                    { \r\n                                        // Q: How can I check to see if the providers.stream array is empty?\r\n                                        // A: Use providers.stream.length\r\n                                        providers.stream ?\r\n                                        (\r\n                                            <div className='details-provider-list'>\r\n                                                {\r\n                                                    providers.stream.map(provider => (\r\n                                                        (<div className='details-provider-item' key={provider.provider_name}>\r\n                                                            <img className='provider-img' src={`https://image.tmdb.org/t/p/w500${provider.logo_path}`} alt={provider.provider_name} />\r\n                                                        </div>)\r\n                                                    ))\r\n                                                }\r\n                                            </div>\r\n                                        ) : (\r\n                                            <div className='providers-not-available'>Not available to stream</div>\r\n                                        )\r\n                                    }\r\n                                </React.Fragment>\r\n                            )\r\n                        }\r\n                        { \r\n                            \r\n                            (collectionType === 'game') && \r\n                            (\r\n                                <React.Fragment>\r\n                                    <div className='details-provider-title'>Platforms</div>\r\n                                    <div className='details-platforms'>\r\n                                        {\r\n                                            providers.platforms && (\r\n                                                providers.platforms.map((platform, index) => (\r\n                                                    (<span key={platform.platform.name}>\r\n                                                        {\r\n                                                            index === providers.platforms.length - 1 ? (\r\n                                                                platform.platform.name\r\n                                                            ) : \r\n                                                                platform.platform.name + ', '\r\n                                                        }\r\n                                                    </span>)\r\n                                                ))\r\n                                            )\r\n                                        }\r\n                                    </div>\r\n                                        \r\n                                </React.Fragment>\r\n                            )\r\n                        }\r\n                    </div>\r\n                </React.Fragment>\r\n            }\r\n            {\r\n                !loadingCollectionList ?\r\n                    (\r\n                        <div className='collections-list'>\r\n                            <div className='collections-list-title'>Collections:</div>\r\n                            {\r\n                                collectionList.map((collection, index) => (\r\n                                    <div className='collection-item' key={collection._id}>\r\n                                        <div className='collection-item-title'>{collection.name}</div>\r\n                                        {\r\n                                            collection.exists ? (\r\n                                                <img src={check} className='colleciton-item-status' onClick={() => { \r\n                                                    let tempCollectionList = [...collectionList];\r\n                                                    tempCollectionList[index].exists = false;\r\n                                                    if(tempCollectionList[index].collectionId === collectionId) {\r\n                                                        setCurrentCollectionExists(false); \r\n                                                    }\r\n\r\n                                                    removeFromCollection(tempCollectionList[index].collectionId, tempCollectionList[index].itemId);\r\n\r\n                                                    setCollectionList([...tempCollectionList]);\r\n                                                }} />\r\n                                            ) : (\r\n                                                <img src={circle} className='colleciton-item-status' onClick={() => { \r\n                                                    let tempCollectionList = [...collectionList];\r\n                                                    tempCollectionList[index].exists = true;\r\n                                                    if(tempCollectionList[index].collectionId === collectionId) {\r\n                                                        setCurrentCollectionExists(true); \r\n                                                    }\r\n\r\n                                                    addToCollection(tempCollectionList[index].collectionId, index);\r\n\r\n                                                    setCollectionList([...tempCollectionList]); \r\n                                                }} />\r\n                                            )\r\n                                        }\r\n                                    </div>\r\n                                ))\r\n                            }\r\n                        </div>\r\n                    ) : (\r\n                        <Loading type='beat' className='list-loading' size={20} />\r\n                    )\r\n            }\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Details;"],"names":["auth","useContext","AuthContext","navigate","useNavigate","collectionType","useParams","type","collectionName","name","collectionId","itemId","_useState","useState","_useState2","_slicedToArray","details","setDetails","_useState3","_useState4","providers","setProviders","_useState5","_useState6","loading","setLoading","_useState7","_useState8","navingBack","setNavingBack","_useState9","_useState10","collectionList","setCollectionList","_useState11","_useState12","loadingCollectionList","setLoadingCollectionList","_useState13","_useState14","currentCollectionExists","setCurrentCollectionExists","useEffect","showFooterHandler","fetch","concat","method","headers","then","res","json","data","string6","media","overview","replace","platforms","userId","_toConsumableArray","collections","_jsxs","className","children","_jsx","src","alt","style","animation","onClick","setTimeout","Loading","size","React","id","poster","title","runtime","minPlayers","maxPlayers","stream","map","provider","logo_path","provider_name","platform","index","length","collection","exists","check","removeCollectionId","removeItemId","tempCollectionList","circle","addCollectionId","tempId","parseInt","body","JSON","stringify","tempCollection","newItems","_id","addToCollection"],"sourceRoot":""}