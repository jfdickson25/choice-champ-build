{"version":3,"file":"static/js/699.f31f4e33.chunk.js","mappings":"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","sources":["shared/assets/img/back.svg","collection/pages/Collection.js"],"sourcesContent":["var _rect, _path;\nvar _excluded = [\"title\", \"titleId\"];\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\nimport * as React from \"react\";\nfunction SvgBack(_ref, svgRef) {\n  var title = _ref.title,\n    titleId = _ref.titleId,\n    props = _objectWithoutProperties(_ref, _excluded);\n  return /*#__PURE__*/React.createElement(\"svg\", _extends({\n    fill: \"none\",\n    height: 40,\n    viewBox: \"0 0 40 40\",\n    width: 40,\n    xmlns: \"http://www.w3.org/2000/svg\",\n    ref: svgRef,\n    \"aria-labelledby\": titleId\n  }, props), title ? /*#__PURE__*/React.createElement(\"title\", {\n    id: titleId\n  }, title) : null, _rect || (_rect = /*#__PURE__*/React.createElement(\"rect\", {\n    height: 39,\n    rx: 19.5,\n    stroke: \"#fff\",\n    width: 39,\n    x: 0.5,\n    y: 0.5\n  })), _path || (_path = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"m17 20-.7071-.7071-.7071.7071.7071.7071zm5.2929-6.7071-6 6 1.4142 1.4142 6-6zm-6 7.4142 6 6 1.4142-1.4142-6-6z\",\n    fill: \"#fff\"\n  })));\n}\nvar ForwardRef = /*#__PURE__*/React.forwardRef(SvgBack);\nexport default __webpack_public_path__ + \"static/media/back.130646437979786be8370a1fdf68655a.svg\";\nexport { ForwardRef as ReactComponent };","import React, { useEffect, useMemo, useState, useContext, useRef } from 'react';\r\nimport { useParams, useNavigate } from 'react-router-dom';\r\nimport { AuthContext } from '../../shared/context/auth-context';\r\nimport Loading from '../../shared/components/Loading';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faArrowDownAZ, faClock } from '@fortawesome/free-solid-svg-icons';\r\n\r\nimport back from '../../shared/assets/img/back.svg';\r\nimport add from '../../shared/assets/img/add.png';\r\nimport edit from '../../shared/assets/img/edit.png';\r\nimport editing from '../../shared/assets/img/editing.png';\r\n\r\nimport './Collection.css';\r\n\r\nconst Collection = ({ socket }) => {\r\n    const auth = useContext(AuthContext);\r\n    let navigate = useNavigate();\r\n    /************************************************************\r\n     * Initial load and data needed. Here we grab the info we need\r\n     * from the params and set edit and our items list\r\n     ***********************************************************/\r\n    // Grab the collection type, name and id from the parameters\r\n    let collectionType = useParams().type;\r\n    let collectionId = useParams().id;\r\n    let collectionNameParam = useParams().name;\r\n\r\n    const [items, setItems] = useState([]);\r\n    const [isEdit, setIsEdit] = useState(false);\r\n    const [shareCode, setShareCode] = useState(0);\r\n    const [isLoading, setIsLoading] = useState(true);\r\n    const [collectionName, setCollectionName] = useState(useParams().name);\r\n    const [showAlphabetical, setShowAlphabetical] = useState(false);\r\n    const [navingBack, setNavingBack] = useState(false);\r\n    const [navingAdd, setNavingAdd] = useState(false);\r\n\r\n    const itemsRef = useRef(items);\r\n\r\n    useEffect(() => {\r\n        auth.showFooterHandler(true);\r\n        // Make a fetch get request to get all the items in a collection\r\n        fetch(`https://choice-champ-backend.glitch.me/collections/items/${collectionId}`, {\r\n            method: 'GET',\r\n            headers: {\r\n                'Content-Type': 'application/json'\r\n            }\r\n        })\r\n        .then(res => res.json())\r\n        .then(data => {\r\n            setItems(data.items);\r\n            itemsRef.current = data.items;\r\n            setShareCode(data.shareCode);\r\n\r\n            // Give a little time for the items to load\r\n            setTimeout(() => {\r\n                setIsLoading(false);\r\n            }, 500);\r\n\r\n            // Join room with the collection id\r\n            socket.emit('join-room', collectionId);\r\n        });\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        socket.on('remove-item', (id) => {\r\n            // Find item with the id and remove it from the list\r\n            itemsRef.current = itemsRef.current.filter(item => item._id !== id);\r\n            setItems(itemsRef.current);\r\n        });\r\n\r\n        socket.on('watched-item', (id) => {\r\n            // Update the item with the given id to be watched\r\n            itemsRef.current = itemsRef.current.map(item => {\r\n                if(item._id === id && item.watched === false) {\r\n                    item.watched = true;\r\n                } else if(item._id === id && item.watched === true) {\r\n                    item.watched = false;\r\n                }\r\n\r\n                return item;\r\n            });\r\n\r\n            setItems(itemsRef.current);\r\n        });\r\n\r\n        socket.on('add-items', (newItems) => {\r\n            // Push all newItems onto itemsRef.current\r\n            let newArray = [...itemsRef.current, ...newItems];\r\n            itemsRef.current = newArray;\r\n            setItems(itemsRef.current);\r\n        });\r\n\r\n        return () => {\r\n            socket.off('remove-item');\r\n            socket.off('watched-item');\r\n            socket.off('add-items');\r\n        }\r\n    }, []);\r\n\r\n    /************************************************************\r\n     * Logic for setting edit state and removing items\r\n     ***********************************************************/\r\n    const isEditHandler = () => {\r\n        if(isEdit) {\r\n            // Check to make sure the collection name is not empty\r\n            if(collectionName !== '') {\r\n                // If collection name has changed make a fetch post request to update the collection name\r\n                if(collectionName !== collectionNameParam) {\r\n                    fetch(`https://choice-champ-backend.glitch.me/collections/name/${collectionId}`, {\r\n                        method: 'POST',\r\n                        headers: {\r\n                            'Content-Type': 'application/json'\r\n                        },\r\n                        body: JSON.stringify({\r\n                            name: collectionName\r\n                        })\r\n                    })\r\n                    .then(res => {\r\n                        setIsEdit(false);\r\n                    });\r\n                } else {\r\n                    setIsEdit(false);\r\n                }\r\n            } else {\r\n                alert('Collection name cannot be empty');\r\n            }\r\n        } else {\r\n            setIsEdit(true);\r\n        }\r\n    }\r\n\r\n    const removeItem = (id) => {\r\n        // Make a fetch delete request to remove an item from a collection\r\n        fetch(`https://choice-champ-backend.glitch.me/collections/items/${collectionId}/${id}`, {\r\n            method: 'DELETE',\r\n            headers: {\r\n                'Content-Type': 'application/json'\r\n            }\r\n        })\r\n        .then(res => {\r\n            setItems(items.filter(item => item._id !== id));\r\n            itemsRef.current = items;\r\n            // Emit to the server that an item has been removed\r\n            socket.emit('remove-remote-item', id, collectionId);\r\n        });\r\n    }\r\n\r\n    const navBack = () => {\r\n        socket.emit('leave-room', collectionId);\r\n        setNavingBack(true);\r\n        setTimeout(() => {\r\n            setNavingBack(false);\r\n            navigate(`/collections/${collectionType}`);\r\n        }, 1000);\r\n    }\r\n\r\n    const navAdd = () => {\r\n        setNavingAdd(true);\r\n        setTimeout(() => {\r\n            setNavingAdd(false);\r\n            navigate(`/collections/${collectionType}/${collectionName}/${collectionId}/add`);\r\n        }, 1000);\r\n    }\r\n\r\n    const navDetails = (id) => {\r\n        navigate(`/collections/${collectionType}/${collectionName}/${collectionId}/details/${id}`);\r\n    }\r\n\r\n    const updateWatched = (id, watched) => {\r\n        // Make a fetch post request to update the watched status of an item\r\n        fetch(`https://choice-champ-backend.glitch.me/collections/items/${collectionId}/${id}`, {\r\n            method: 'POST',\r\n            headers: {\r\n                'Content-Type': 'application/json'\r\n            },\r\n            body: JSON.stringify({\r\n                watched: !watched\r\n            })\r\n        })\r\n        .then(res => {\r\n            // Update the item with the given id to be watched\r\n            setItems(items.map(item => {\r\n                if(item._id === id && item.watched === false) {\r\n                    item.watched = true;\r\n                } else if(item._id === id && item.watched === true) {\r\n                    item.watched = false;\r\n                }\r\n\r\n                return item;\r\n            }));\r\n\r\n            itemsRef.current = items;\r\n\r\n            // Emit to the server that an item has been watched\r\n            socket.emit('watched-remote-item', id, collectionId);\r\n        });\r\n    }\r\n\r\n    /************************************************************\r\n     * Logic for creating a query from the search bar. I received\r\n     * help and direction from this youtube video Web dev simplified\r\n     * https://youtu.be/E1cklb4aeXA\r\n     ***********************************************************/\r\n    const [query, setQuery] = useState('');\r\n\r\n    // Q: Why do we use useMemo here?\r\n    // A: useMemo is used to optimize the filtering of items. It will only filter the items\r\n    // when the query changes. This is important because if we didn't use useMemo the items\r\n    // would be filtered on every render. This would be a waste of resources.\r\n    const filteredItems = useMemo(() => {\r\n        return items.filter(item => {\r\n            return item.title.toLowerCase().includes(query.toLowerCase());\r\n        })\r\n    }, [items, query]);\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <div className='content'>\r\n                { \r\n                    /* \r\n                        Q: What is the difference between a link and navlink?\r\n                        A: A link is used to navigate to a different page. \r\n                           A navlink is used to navigate to a different page\r\n                           but it also allows you to style the link based on\r\n                           if it is active or not.\r\n                    */ \r\n                }\r\n                <img src={back} alt=\"Back symbol\" className=\"top-left\" onClick={navBack} \r\n                    style={navingBack ? {animation: 'button-press .75s'} : null}\r\n                />\r\n                { isEdit \r\n                    ? (<input className='title' style={{gridColumn:\"5/14\", marginBottom: \"10px\"}} value={collectionName} onChange={e => setCollectionName(e.target.value)} />)\r\n                    : (<h2 className='title'>{collectionName}</h2>)\r\n                }\r\n\r\n                <img src={ isEdit ? editing :  edit } className=\"edit\" alt='Edit icon' onClick={isEditHandler} />\r\n                <div className='share-code'>share code: {shareCode}</div>\r\n                <img src={add} alt='Add icon' className='add' onClick={navAdd} \r\n                    style={navingAdd ? {animation: 'button-press .75s'} : null}\r\n                />\r\n                <input className='search-bar' placeholder='Search Collection' value={query} onChange={e => setQuery(e.target.value)}/>\r\n                <FontAwesomeIcon icon={faArrowDownAZ} size=\"xl\" onClick={() => {setShowAlphabetical(true)}} className={showAlphabetical ? 'active-categorize' : 'inactive-categorize'} />\r\n                <FontAwesomeIcon icon={faClock} size=\"xl\" onClick={() => {setShowAlphabetical(false)}} className={!showAlphabetical ? 'active-categorize' : 'inactive-categorize'} />\r\n                {\r\n                    isLoading ? <Loading type='beat' className='list-loading' size={20} /> : \r\n                        (\r\n                            <div className={collectionType === 'game' ? 'collection-content-game' : 'collection-content'}>\r\n                                {\r\n                                    (filteredItems.length === 0 && query === '') && <p className='no-items'>No items in this collection</p>\r\n                                }\r\n                                {\r\n                                    (filteredItems.length === 0 && query !== '') && <p className='no-items'>No items match search</p>\r\n                                }\r\n                                {\r\n                                    // Logic to check if we should show the items in alphabetical order or not\r\n                                    showAlphabetical ? (\r\n                                        [...filteredItems].sort((a, b) => a.title.localeCompare(b.title)).map(item => (\r\n                                           // Only show if the item is not watched\r\n                                           !item.watched ?\r\n                                                (<div className='item-section' key={item.itemId} onClick={ !isEdit ? () => { navDetails(item.itemId) } : null } >\r\n                                                    { \r\n                                                        !isEdit ? \r\n                                                            <img className={collectionType === 'movie' || collectionType === 'tv' ? 'item-img clickable' : collectionType === 'game' ? 'game-img clickable' : 'board-img clickable'} src={item.poster} />\r\n                                                            :\r\n                                                            <img className={collectionType === 'movie' || collectionType === 'tv' ? 'item-img' : collectionType === 'game' ? 'game-img' : 'board-img'} src={item.poster} />\r\n                                                    } \r\n                                                    { collectionType === 'game' || collectionType === 'board' && <p>{item.title}</p>}\r\n                                                    { isEdit ? (<img src={'https://cdn.glitch.global/7cdfb78e-767d-42ef-b9ca-2f58981eb393/remove.png?v=1682136649433'} alt={`${item.title} poster`} className='item-action' onClick={() => { removeItem(item._id) }} />) : null }\r\n                                                    { isEdit ? (<img src={item.watched ? 'https://cdn.glitch.global/7cdfb78e-767d-42ef-b9ca-2f58981eb393/watched.png?v=1682136650141' : 'https://cdn.glitch.global/7cdfb78e-767d-42ef-b9ca-2f58981eb393/unwatched.png?v=1682136649813'} alt={`${item.title} poster`} className='item-action-watched' onClick={() => {updateWatched(item._id)}} />) : null }\r\n                                                </div>\r\n                                                )\r\n                                            :   null\r\n                                        )) \r\n                                    ) : (\r\n                                        /* \r\n                                            Received help from this article: https://bobbyhadz.com/blog/react-map-array-reverse \r\n                                            We use the spread operator here because we want to make a copy of filteredItems. We don't want\r\n                                            to modify it\r\n                                        */ \r\n                                        [...filteredItems].reverse().map(item => (\r\n                                            // Only show if the item is not watched\r\n                                            !item.watched ?\r\n                                                (<div className='item-section' key={item.itemId} onClick={ !isEdit ? () => { navDetails(item.itemId) } : null } >\r\n                                                    { \r\n                                                        !isEdit ? \r\n                                                            <img className={collectionType === 'movie' || collectionType === 'tv' ? 'item-img clickable' : collectionType === 'game' ? 'game-img clickable' : 'board-img clickable'} src={item.poster} />\r\n                                                            :\r\n                                                            <img className={collectionType === 'movie' || collectionType === 'tv' ? 'item-img' : collectionType === 'game' ? 'game-img' : 'board-img'} src={item.poster} />\r\n                                                    }\r\n                                                    { collectionType === 'game' || collectionType === 'board' && <p>{item.title}</p>}\r\n                                                    { isEdit ? (<img src={'https://cdn.glitch.global/7cdfb78e-767d-42ef-b9ca-2f58981eb393/remove.png?v=1682136649433'} alt={`${item.title} poster`} className='item-action' onClick={() => { removeItem(item._id) }} />) : null }\r\n                                                    { isEdit ? (<img src={item.watched ? 'https://cdn.glitch.global/7cdfb78e-767d-42ef-b9ca-2f58981eb393/watched.png?v=1682136650141' : 'https://cdn.glitch.global/7cdfb78e-767d-42ef-b9ca-2f58981eb393/unwatched.png?v=1682136649813'} alt={`${item.title} poster`} className='item-action-watched' onClick={() => {updateWatched(item._id)}} />) : null }\r\n                                                </div>\r\n                                                )\r\n                                            :   null\r\n                                        ))\r\n                                    )\r\n                                }\r\n                                { \r\n                                    // Add a divider if there are watched items\r\n                                    filteredItems.filter(item => item.watched).length > 0 ? <div className={ collectionType === 'game' ? 'divider-game' : 'divider-other'}></div> : null \r\n                                }\r\n                                {\r\n                                    // Logic to check if we should show the items in alphabetical order or not\r\n                                    showAlphabetical ? (\r\n                                        [...filteredItems].sort((a, b) => a.title.localeCompare(b.title)).map(item => (\r\n                                                // Only show if the item is watched\r\n                                                item.watched ?\r\n                                                (\r\n                                                    <div className='item-section' key={item.itemId} onClick={ !isEdit ? () => { navDetails(item.itemId) } : null } >\r\n                                                        <img className={collectionType === 'movie' || collectionType === 'tv' ? 'item-img' : collectionType === 'game' ? 'game-img' : 'board-img'} src={item.poster} />{(collectionType === 'game' || collectionType === 'board') && <p>{item.title}</p>}\r\n                                                        { isEdit ? (<img src={'https://cdn.glitch.global/7cdfb78e-767d-42ef-b9ca-2f58981eb393/remove.png?v=1682136649433'} alt={`${item.title} poster`} className='item-action' onClick={() => { removeItem(item._id) }} />) : null }\r\n                                                        { isEdit ? (<img src={item.watched ? 'https://cdn.glitch.global/7cdfb78e-767d-42ef-b9ca-2f58981eb393/watched.png?v=1682136650141' : 'https://cdn.glitch.global/7cdfb78e-767d-42ef-b9ca-2f58981eb393/unwatched.png?v=1682136649813' } alt={`${item.title} poster`} className='item-action-watched' onClick={() => {updateWatched(item._id, item.watched)}} />) : null }\r\n                                                    </div>\r\n                                                )\r\n                                            : null\r\n                                        ))\r\n                                    ) : (\r\n\r\n                                        [...filteredItems].reverse().map(item => (\r\n                                            // Only show if the item is watched\r\n                                            item.watched ?\r\n                                                (\r\n                                                    <div className='item-section' key={item.itemId} onClick={ !isEdit ? () => { navDetails(item.itemId) } : null } >\r\n                                                        <img className={collectionType === 'movie' || collectionType === 'tv' ? 'item-img' : collectionType === 'game' ? 'game-img' : 'board-img'} src={item.poster} />{(collectionType === 'game' || collectionType === 'board') && <p>{item.title}</p>}\r\n                                                        { isEdit ? (<img src={'https://cdn.glitch.global/7cdfb78e-767d-42ef-b9ca-2f58981eb393/remove.png?v=1682136649433'} alt={`${item.title} poster`} className='item-action' onClick={() => { removeItem(item._id) }} />) : null }\r\n                                                        { isEdit ? (<img src={item.watched ? 'https://cdn.glitch.global/7cdfb78e-767d-42ef-b9ca-2f58981eb393/watched.png?v=1682136650141' : 'https://cdn.glitch.global/7cdfb78e-767d-42ef-b9ca-2f58981eb393/unwatched.png?v=1682136649813' } alt={`${item.title} poster`} className='item-action-watched' onClick={() => {updateWatched(item._id, item.watched)}} />) : null }\r\n                                                    </div>\r\n                                                )\r\n                                            : null\r\n                                        ))\r\n                                    )\r\n                                }\r\n                            </div>\r\n                        )\r\n                }\r\n            </div>\r\n        </React.Fragment>\r\n    );\r\n}\r\n\r\nexport default Collection;"],"names":["_ref","socket","auth","useContext","AuthContext","navigate","useNavigate","collectionType","useParams","type","collectionId","id","collectionNameParam","name","_useState","useState","_useState2","_slicedToArray","items","setItems","_useState3","_useState4","isEdit","setIsEdit","_useState5","_useState6","shareCode","setShareCode","_useState7","_useState8","isLoading","setIsLoading","_useState9","_useState10","collectionName","setCollectionName","_useState11","_useState12","showAlphabetical","setShowAlphabetical","_useState13","_useState14","navingBack","setNavingBack","_useState15","_useState16","navingAdd","setNavingAdd","itemsRef","useRef","useEffect","showFooterHandler","fetch","concat","method","headers","then","res","json","data","current","setTimeout","emit","on","filter","item","_id","map","watched","newItems","newArray","_toConsumableArray","off","removeItem","navDetails","updateWatched","body","JSON","stringify","_useState17","_useState18","query","setQuery","filteredItems","useMemo","title","toLowerCase","includes","_jsx","React","children","_jsxs","className","src","back","alt","onClick","style","animation","gridColumn","marginBottom","value","onChange","e","target","editing","edit","alert","add","placeholder","FontAwesomeIcon","icon","faArrowDownAZ","size","faClock","Loading","length","sort","a","b","localeCompare","itemId","poster","reverse"],"sourceRoot":""}