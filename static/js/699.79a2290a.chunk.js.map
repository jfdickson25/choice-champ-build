{"version":3,"file":"static/js/699.79a2290a.chunk.js","mappings":"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","sources":["collection/pages/Collection.js"],"sourcesContent":["import React, { useEffect, useMemo, useState, useContext, useRef } from 'react';\r\nimport { useParams, useNavigate } from 'react-router-dom';\r\nimport { AuthContext } from '../../shared/context/auth-context';\r\nimport Loading from '../../shared/components/Loading';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faArrowDownAZ, faClock, faEye, faGamepad, faChessPawn } from '@fortawesome/free-solid-svg-icons';\r\n\r\nimport edit from '../../shared/assets/img/edit.png';\r\nimport editing from '../../shared/assets/img/editing.png';\r\n\r\nimport './Collection.css';\r\n\r\nconst Collection = ({ socket }) => {\r\n    const auth = useContext(AuthContext);\r\n    let navigate = useNavigate();\r\n    /************************************************************\r\n     * Initial load and data needed. Here we grab the info we need\r\n     * from the params and set edit and our items list\r\n     ***********************************************************/\r\n    // Grab the collection type, name and id from the parameters\r\n    let collectionType = useParams().type;\r\n    let collectionId = useParams().id;\r\n    let collectionNameParam = useParams().name;\r\n\r\n    const [items, setItems] = useState([]);\r\n    const [isEdit, setIsEdit] = useState(false);\r\n    const [shareCode, setShareCode] = useState(0);\r\n    const [isLoading, setIsLoading] = useState(true);\r\n    const [collectionName, setCollectionName] = useState(useParams().name);\r\n    const [showAlphabetical, setShowAlphabetical] = useState(false);\r\n    const [showWatched, setShowWatched] = useState(false);\r\n    const [navingBack, setNavingBack] = useState(false);\r\n    const [navingAdd, setNavingAdd] = useState(false);\r\n\r\n    const itemsRef = useRef(items);\r\n\r\n    // Grab filter query parameters from the url\r\n    const search = window.location.search;\r\n    const params = new URLSearchParams(search);\r\n    const filter = params.get('filter');\r\n    const hash = params.get('hash');\r\n\r\n    useEffect(() => {\r\n        auth.showFooterHandler(true);\r\n        // Make a fetch get request to get all the items in a collection\r\n        fetch(`https://choice-champ-backend.glitch.me/collections/items/${collectionId}`, {\r\n            method: 'GET',\r\n            headers: {\r\n                'Content-Type': 'application/json'\r\n            }\r\n        })\r\n        .then(res => res.json())\r\n        .then(data => {\r\n            setItems(data.items);\r\n            itemsRef.current = data.items;\r\n            setShareCode(data.shareCode);\r\n\r\n            // Check if there is a filter in the url if there is set the filter\r\n            if(filter === 'alphabetical') {\r\n                setShowAlphabetical(true);\r\n            } else if(filter === 'watched') {\r\n                setShowWatched(true);\r\n            }\r\n\r\n            // Give a little time for the items to load\r\n            setTimeout(() => {\r\n                setIsLoading(false);\r\n\r\n                // If there is a hash in the url, scroll to that element\r\n                if(hash) {\r\n                    // Add a little more time for the items to load\r\n                    setTimeout(() => {\r\n                            // If there is a hash in the url, scroll to that element\r\n                            const element = document.getElementById(hash);\r\n                            element.scrollIntoView({ behavior: \"smooth\" });\r\n                    }, 500);\r\n                }\r\n            }, 500);\r\n\r\n            // Join room with the collection id\r\n            socket.emit('join-room', collectionId);\r\n        });\r\n    }, [auth, collectionId, socket]);\r\n\r\n    useEffect(() => {\r\n        socket.on('remove-item', (id) => {\r\n            // Find item with the id and remove it from the list\r\n            itemsRef.current = itemsRef.current.filter(item => item._id !== id);\r\n            setItems(itemsRef.current);\r\n        });\r\n\r\n        socket.on('watched-item', (id) => {\r\n            // Update the item with the given id to be watched\r\n            itemsRef.current = itemsRef.current.map(item => {\r\n                if(item._id === id && item.watched === false) {\r\n                    item.watched = true;\r\n                } else if(item._id === id && item.watched === true) {\r\n                    item.watched = false;\r\n                }\r\n\r\n                return item;\r\n            });\r\n\r\n            setItems(itemsRef.current);\r\n        });\r\n\r\n        socket.on('add-item', (newItem) => {\r\n            // Add the new item to the list\r\n            itemsRef.current = [...itemsRef.current, newItem];\r\n            setItems(itemsRef.current);\r\n        });\r\n\r\n        return () => {\r\n            socket.off('remove-item');\r\n            socket.off('watched-item');\r\n            socket.off('add-item');\r\n        }\r\n    }, [socket]);\r\n\r\n    /************************************************************\r\n     * Logic for setting edit state and removing items\r\n     ***********************************************************/\r\n    const isEditHandler = () => {\r\n        if(isEdit) {\r\n            // Check to make sure the collection name is not empty\r\n            if(collectionName !== '') {\r\n                // If collection name has changed make a fetch post request to update the collection name\r\n                if(collectionName !== collectionNameParam) {\r\n                    fetch(`https://choice-champ-backend.glitch.me/collections/name/${collectionId}`, {\r\n                        method: 'POST',\r\n                        headers: {\r\n                            'Content-Type': 'application/json'\r\n                        },\r\n                        body: JSON.stringify({\r\n                            name: collectionName\r\n                        })\r\n                    })\r\n                    .then(res => {\r\n                        setIsEdit(false);\r\n                    });\r\n                } else {\r\n                    setIsEdit(false);\r\n                }\r\n            } else {\r\n                alert('Collection name cannot be empty');\r\n            }\r\n        } else {\r\n            setIsEdit(true);\r\n        }\r\n    }\r\n\r\n    const removeItem = (id) => {\r\n        // Make a fetch delete request to remove an item from a collection\r\n        fetch(`https://choice-champ-backend.glitch.me/collections/items/${collectionId}/${id}`, {\r\n            method: 'DELETE',\r\n            headers: {\r\n                'Content-Type': 'application/json'\r\n            }\r\n        })\r\n        .then(res => {\r\n            itemsRef.current = itemsRef.current.filter(item => item._id !== id);\r\n            setItems(itemsRef.current);\r\n            // Emit to the server that an item has been removed\r\n            socket.emit('remove-remote-item', id, collectionId);\r\n        });\r\n    }\r\n\r\n    const navBack = () => {\r\n        socket.emit('leave-room', collectionId);\r\n        setNavingBack(true);\r\n        setTimeout(() => {\r\n            setNavingBack(false);\r\n            navigate(`/collections/${collectionType}`);\r\n        }, 1000);\r\n    }\r\n\r\n    const navAdd = () => {\r\n        setNavingAdd(true);\r\n        setTimeout(() => {\r\n            setNavingAdd(false);\r\n            navigate(`/collections/${collectionType}/${collectionName}/${collectionId}/add`);\r\n        }, 1000);\r\n    }\r\n\r\n    const navDetails = (id) => {\r\n        // Check if filter for alphabetical or watched is on\r\n        if(showAlphabetical || showWatched) {\r\n            navigate(`/collections/${collectionType}/${collectionName}/${collectionId}/details/${id}?filter=${showAlphabetical ? 'alphabetical' : 'watched'}`);\r\n        } else {\r\n            navigate(`/collections/${collectionType}/${collectionName}/${collectionId}/details/${id}`);\r\n        }\r\n    }\r\n\r\n    const updateWatched = (id, watched) => {\r\n        // Make a fetch post request to update the watched status of an item\r\n        fetch(`https://choice-champ-backend.glitch.me/collections/items/${collectionId}/${id}`, {\r\n            method: 'POST',\r\n            headers: {\r\n                'Content-Type': 'application/json'\r\n            },\r\n            body: JSON.stringify({\r\n                watched: !watched\r\n            })\r\n        })\r\n        .then(res => {\r\n            // Update the item with the given id to be watched\r\n            setItems(items.map(item => {\r\n                if(item._id === id && item.watched === false) {\r\n                    item.watched = true;\r\n                    item.timestamp = Math.floor(Date.now() / 1000);\r\n                } else if(item._id === id && item.watched === true) {\r\n                    item.watched = false;\r\n                    // Remove the timestamp if the item is unwatched\r\n                    item.timestamp = undefined;\r\n                }\r\n\r\n                return item;\r\n            }));\r\n\r\n            itemsRef.current = items;\r\n\r\n            // Emit to the server that an item has been watched\r\n            socket.emit('watched-remote-item', id, collectionId);\r\n        });\r\n    }\r\n\r\n    /************************************************************\r\n     * Logic for creating a query from the search bar. I received\r\n     * help and direction from this youtube video Web dev simplified\r\n     * https://youtu.be/E1cklb4aeXA\r\n     ***********************************************************/\r\n    const [query, setQuery] = useState('');\r\n\r\n    // Q: Why do we use useMemo here?\r\n    // A: useMemo is used to optimize the filtering of items. It will only filter the items\r\n    // when the query changes. This is important because if we didn't use useMemo the items\r\n    // would be filtered on every render. This would be a waste of resources.\r\n    const filteredItems = useMemo(() => {\r\n        return items.filter(item => {\r\n            return item.title.toLowerCase().includes(query.toLowerCase());\r\n        })\r\n    }, [items, query]);\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <div className='content'>\r\n                { \r\n                    /* \r\n                        Q: What is the difference between a link and navlink?\r\n                        A: A link is used to navigate to a different page. \r\n                           A navlink is used to navigate to a different page\r\n                           but it also allows you to style the link based on\r\n                           if it is active or not.\r\n                    */ \r\n                }\r\n                {\r\n                    navingBack ? \r\n                    (<img src=\"https://cdn.glitch.global/ebf12691-ad1e-4a83-81e2-641b9d7c5f64/back-button-active.png?v=1702137193420\" alt=\"Back symbol\" className=\"top-left clickable\" style={{animation: 'button-press .75s'}} />) : \r\n                    (<img src=\"https://cdn.glitch.global/ebf12691-ad1e-4a83-81e2-641b9d7c5f64/back-button.png?v=1702137134668\" alt=\"Back symbol\" className=\"top-left clickable\" onClick={navBack} />)\r\n                }\r\n                { isEdit \r\n                    ? (<input className='title' style={{gridColumn:\"5/14\", marginBottom: \"10px\"}} value={collectionName} onChange={e => setCollectionName(e.target.value)} />)\r\n                    : (<h2 className={`title color-${collectionType}`}>{collectionName}</h2>)\r\n                }\r\n\r\n                <img src={ isEdit ? editing :  edit } className=\"edit clickable\" alt='Edit icon' onClick={isEditHandler} style={isEdit ? {animation: 'button-press .75s'} : null} />\r\n                <div className='share-code'>share code: {shareCode}</div>\r\n                {\r\n                    navingAdd ?\r\n                    (<img src='https://cdn.glitch.global/ebf12691-ad1e-4a83-81e2-641b9d7c5f64/plus-button-active.png?v=1702137827635' alt='Add icon' className='add clickable' style={{animation: 'button-press .75s'}} />) :\r\n                    (<img src='https://cdn.glitch.global/ebf12691-ad1e-4a83-81e2-641b9d7c5f64/plus-button.png?v=1702138169050' alt='Add icon' className='add clickable' onClick={navAdd} />)\r\n                }\r\n                <input className='search-bar' placeholder='Search Collection' value={query} onChange={e => setQuery(e.target.value)}/>\r\n                <FontAwesomeIcon icon={faClock} size=\"xl\" onClick={() => {\r\n                    setShowAlphabetical(false);\r\n                    setShowWatched(false);\r\n                }} className={!showAlphabetical && !showWatched ? `active-categorize active-${collectionType} category-icon clickable` : 'category-icon clickable'} id='category-clock' />\r\n                <FontAwesomeIcon icon={faArrowDownAZ} size=\"xl\" onClick={() => {\r\n                    setShowAlphabetical(true);\r\n                    setShowWatched(false);\r\n                }} className={showAlphabetical ? `active-categorize active-${collectionType} category-icon clickable` : 'category-icon clickable'} id='category-alph' />\r\n                <FontAwesomeIcon icon={collectionType === 'game' ? faGamepad : collectionType === 'board' ? faChessPawn :faEye} size=\"xl\" onClick={() => {\r\n                    setShowWatched(true);\r\n                    setShowAlphabetical(false);\r\n                }} className={showWatched ? `active-categorize active-${collectionType} category-icon clickable` : 'category-icon clickable'} id='category-watch'/>\r\n                <span id='chrono-label' className={!showAlphabetical && !showWatched ? `category-label category-label-active-${collectionType}` : 'category-label'}>recent</span>\r\n                <span id='alph-label' className={(showAlphabetical) ? `category-label category-label-active-${collectionType}` : 'category-label'}>a-z</span>\r\n                <span id='watched-label' className={(showWatched) ? `category-label category-label-active-${collectionType}` : 'category-label'}>\r\n                    { collectionType === 'game' || collectionType === 'board' ? 'played' : 'watched'}\r\n                </span> \r\n                {\r\n                    isLoading ? <Loading type='beat' className='list-loading' size={20} /> : \r\n                        (\r\n                            <div className='collection-content'>\r\n                                {\r\n                                    (filteredItems.length === 0 && query === '' && !showWatched) && <p className='no-items'>No items in this collection</p>\r\n                                }\r\n                                {\r\n                                    (filteredItems.length === 0 && query !== '') && <p className='no-items'>No items match search</p>\r\n                                }\r\n                                {\r\n                                    // Logic to check if we should show the items in alphabetical order or not\r\n                                    showAlphabetical && !showWatched ? (\r\n                                        [...filteredItems].sort((a, b) => a.title.localeCompare(b.title)).map(item => (\r\n                                           // Only show if the item is not watched\r\n                                           !item.watched ?\r\n                                                (<div className='item-section' id={item.itemId} key={item.itemId} onClick={ !isEdit ? () => { navDetails(item.itemId) } : null } >\r\n                                                    { \r\n                                                        !isEdit ? \r\n                                                            <img alt={`${item.title} poster`} className={collectionType === 'movie' || collectionType === 'tv' || collectionType === 'game' ? 'item-img clickable' : 'board-img clickable'} src={item.poster} />\r\n                                                            :\r\n                                                            <img alt={`${item.title} poster`} className={collectionType === 'movie' || collectionType === 'tv' || collectionType === 'game' ? 'item-img' : 'board-img'} src={item.poster} />\r\n                                                    }\r\n                                                    { isEdit ? (<img src={'https://cdn.glitch.global/7cdfb78e-767d-42ef-b9ca-2f58981eb393/remove.png?v=1682136649433'} alt={`${item.title} poster`} className='item-action clickable' onClick={() => { removeItem(item._id) }} />) : null }\r\n                                                    { isEdit ? (\r\n                                                        <FontAwesomeIcon icon={collectionType === 'game' ? faGamepad : collectionType === 'board' ? faChessPawn :faEye} size=\"xl\" \r\n                                                        className='item-action-watched clickable' onClick={() => {updateWatched(item._id)}} /> \r\n                                                    ) : null }\r\n                                                </div>\r\n                                                )\r\n                                            :   null\r\n                                        )) \r\n                                    ) : (\r\n                                        /* \r\n                                            Received help from this article: https://bobbyhadz.com/blog/react-map-array-reverse \r\n                                            We use the spread operator here because we want to make a copy of filteredItems. We don't want\r\n                                            to modify it\r\n                                        */ \r\n                                        [...filteredItems].reverse().map(item => (\r\n                                            // Only show if the item is not watched\r\n                                            !item.watched && !showWatched ?\r\n                                                (<div className='item-section' id={item.itemId} key={item.itemId} onClick={ !isEdit ? () => { navDetails(item.itemId) } : null } >\r\n                                                    { \r\n                                                        !isEdit ? \r\n                                                            <img alt={`${item.title} poster`} className={collectionType === 'movie' || collectionType === 'tv' || collectionType === 'game' ? 'item-img clickable' : 'board-img clickable'} src={item.poster} />\r\n                                                            :\r\n                                                            <img alt={`${item.title} poster`} className={collectionType === 'movie' || collectionType === 'tv' || collectionType === 'game' ? 'item-img' : 'board-img'} src={item.poster} />\r\n                                                    }\r\n                                                    { isEdit ? (<img src={'https://cdn.glitch.global/7cdfb78e-767d-42ef-b9ca-2f58981eb393/remove.png?v=1682136649433'} alt={`${item.title} poster`} className='item-action clickable' onClick={() => { removeItem(item._id) }} />) : null }\r\n                                                    { isEdit ? (\r\n                                                        <FontAwesomeIcon icon={collectionType === 'game' ? faGamepad : collectionType === 'board' ? faChessPawn :faEye} size=\"xl\" \r\n                                                        className='item-action-watched clickable' onClick={() => {updateWatched(item._id)}} /> \r\n                                                    ) : null }\r\n                                                </div>\r\n                                                )\r\n                                            :   null\r\n                                        ))\r\n                                    )\r\n                                }\r\n                                {\r\n                                    // Logic to check if we should show the items in alphabetical order or not\r\n                                    showWatched && (\r\n                                        [...filteredItems].filter(item => item.watched).length === 0 && query === '' ? (\r\n                                            \r\n                                                collectionType === 'game' || collectionType === 'board' ? \r\n                                                <p className='no-items'>No played items</p>\r\n                                                :\r\n                                                <p className='no-items'>No watched items</p>\r\n                                        )\r\n                                        : \r\n                                        (\r\n                                            [...filteredItems]\r\n                                                .filter(item => item.watched)\r\n                                                .sort((a, b) => a.timestamp - b.timestamp)\r\n                                                .reverse().map(item => (\r\n                                                    <div className='item-section' id={item.itemId} key={item.itemId} onClick={ !isEdit ? () => { navDetails(item.itemId) } : null } >\r\n                                                        <img alt={`${item.title} poster`} className={collectionType === 'movie' || collectionType === 'tv' || collectionType === 'game' ? 'item-img' : 'board-img'} src={item.poster} />\r\n                                                        { isEdit ? (<img src={'https://cdn.glitch.global/7cdfb78e-767d-42ef-b9ca-2f58981eb393/remove.png?v=1682136649433'} alt={`${item.title} poster`} className='item-action clickable' onClick={() => { removeItem(item._id) }} />) : null }\r\n                                                        { isEdit ? (\r\n                                                            <FontAwesomeIcon icon={collectionType === 'game' ? faGamepad : collectionType === 'board' ? faChessPawn :faEye} size=\"xl\" \r\n                                                            className={`item-action-watched color-${collectionType} clickable`} onClick={() => {updateWatched(item._id, item.watched)}} /> \r\n                                                        ) : null }\r\n                                                    </div>\r\n                                            ))\r\n                                        )\r\n                                    )\r\n                                }\r\n                            </div>\r\n                        )\r\n                }\r\n            </div>\r\n        </React.Fragment>\r\n    );\r\n}\r\n\r\nexport default Collection;"],"names":["_ref","socket","auth","useContext","AuthContext","navigate","useNavigate","collectionType","useParams","type","collectionId","id","collectionNameParam","name","_useState","useState","_useState2","_slicedToArray","items","setItems","_useState3","_useState4","isEdit","setIsEdit","_useState5","_useState6","shareCode","setShareCode","_useState7","_useState8","isLoading","setIsLoading","_useState9","_useState10","collectionName","setCollectionName","_useState11","_useState12","showAlphabetical","setShowAlphabetical","_useState13","_useState14","showWatched","setShowWatched","_useState15","_useState16","navingBack","setNavingBack","_useState17","_useState18","navingAdd","setNavingAdd","itemsRef","useRef","search","window","location","params","URLSearchParams","filter","get","hash","useEffect","showFooterHandler","fetch","concat","method","headers","then","res","json","data","current","setTimeout","document","getElementById","scrollIntoView","behavior","emit","on","item","_id","map","watched","newItem","_toConsumableArray","off","removeItem","navDetails","updateWatched","body","JSON","stringify","timestamp","Math","floor","Date","now","undefined","_useState19","_useState20","query","setQuery","filteredItems","useMemo","title","toLowerCase","includes","_jsx","React","children","_jsxs","className","src","alt","style","animation","onClick","gridColumn","marginBottom","value","onChange","e","target","editing","edit","alert","placeholder","FontAwesomeIcon","icon","faClock","size","faArrowDownAZ","faGamepad","faChessPawn","faEye","Loading","length","sort","a","b","localeCompare","itemId","poster","reverse"],"sourceRoot":""}