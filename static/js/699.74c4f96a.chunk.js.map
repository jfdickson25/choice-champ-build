{"version":3,"file":"static/js/699.74c4f96a.chunk.js","mappings":"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","sources":["shared/assets/img/search.svg","collection/pages/Collection.js","shared/components/PlaceholderImg.js"],"sourcesContent":["var _g;\nvar _excluded = [\"title\", \"titleId\"];\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\nimport * as React from \"react\";\nfunction SvgSearch(_ref, svgRef) {\n  var title = _ref.title,\n    titleId = _ref.titleId,\n    props = _objectWithoutProperties(_ref, _excluded);\n  return /*#__PURE__*/React.createElement(\"svg\", _extends({\n    fill: \"none\",\n    height: 24,\n    viewBox: \"0 0 24 24\",\n    width: 24,\n    xmlns: \"http://www.w3.org/2000/svg\",\n    ref: svgRef,\n    \"aria-labelledby\": titleId\n  }, props), title ? /*#__PURE__*/React.createElement(\"title\", {\n    id: titleId\n  }, title) : null, _g || (_g = /*#__PURE__*/React.createElement(\"g\", {\n    stroke: \"#fff\",\n    strokeWidth: 1.2\n  }, /*#__PURE__*/React.createElement(\"circle\", {\n    cx: 11,\n    cy: 11,\n    r: 6\n  }), /*#__PURE__*/React.createElement(\"g\", {\n    strokeLinecap: \"round\"\n  }, /*#__PURE__*/React.createElement(\"path\", {\n    d: \"m11 8c-.394 0-.7841.0776-1.14805.22836-.36398.15077-.69469.37174-.97327.65032s-.49955.60929-.65032.97327c-.15076.36395-.22836.75405-.22836 1.14805\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"m20 20-3-3\"\n  })))));\n}\nvar ForwardRef = /*#__PURE__*/React.forwardRef(SvgSearch);\nexport default __webpack_public_path__ + \"static/media/search.1769d7a66264f66c9ae9cfe98c03017d.svg\";\nexport { ForwardRef as ReactComponent };","import React, { useEffect, useMemo, useState, useContext, useRef } from 'react';\r\nimport { useParams, useNavigate } from 'react-router-dom';\r\nimport { AuthContext } from '../../shared/context/auth-context';\r\nimport Loading from '../../shared/components/Loading';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faArrowDownAZ, faClock, faEye, faGamepad, faChessPawn, faXmark } from '@fortawesome/free-solid-svg-icons';\r\n\r\nimport edit from '../../shared/assets/img/edit.png';\r\nimport editing from '../../shared/assets/img/editing.png';\r\nimport searchIcon from '../../shared/assets/img/search.svg';\r\n\r\nimport './Collection.css';\r\nimport PlaceholderImg from '../../shared/components/PlaceholderImg';\r\n\r\nconst Collection = ({ socket }) => {\r\n    const auth = useContext(AuthContext);\r\n    let navigate = useNavigate();\r\n    /************************************************************\r\n     * Initial load and data needed. Here we grab the info we need\r\n     * from the params and set edit and our items list\r\n     ***********************************************************/\r\n    // Grab the collection type, name and id from the parameters\r\n    let collectionType = useParams().type;\r\n    let collectionId = useParams().id;\r\n\r\n    // Grab filter query parameters from the url\r\n    const search = window.location.search;\r\n    const params = new URLSearchParams(search);\r\n    const filter = params.get('filter');\r\n    const hash = params.get('hash');\r\n\r\n    const [items, setItems] = useState([]);\r\n    const [isEdit, setIsEdit] = useState(false);\r\n    const [shareCode, setShareCode] = useState(0);\r\n    const [isLoading, setIsLoading] = useState(true);\r\n    const [currentCollectionName, setCurrentCollectionName] = useState('');\r\n    const [collectionName, setCollectionName] = useState('');\r\n    const [showAlphabetical, setShowAlphabetical] = useState(() => {\r\n        if(filter === 'alphabetical') {\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    });\r\n    const [showWatched, setShowWatched] = useState(() => {\r\n        if(filter === 'watched') {\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    });\r\n    const [navingBack, setNavingBack] = useState(false);\r\n    const [navingAdd, setNavingAdd] = useState(false);\r\n    const [collectionTypeColor, setCollectionTypeColor] = useState('#FCB016');\r\n\r\n    const itemsRef = useRef(items);\r\n\r\n    useEffect(() => {\r\n        auth.showFooterHandler(true);\r\n\r\n        if(collectionType === 'movie') {\r\n            setCollectionTypeColor('#FCB016');\r\n        } else if (collectionType === 'tv') {\r\n            setCollectionTypeColor('#FF4D4D');\r\n        } else if (collectionType === 'game') {\r\n            setCollectionTypeColor('#2482C5');\r\n        } else if (collectionType === 'board') {\r\n            setCollectionTypeColor('#45B859');\r\n        }\r\n\r\n        // Make a fetch get request to get all the items in a collection\r\n        fetch(`https://choice-champ-backend.glitch.me/collections/items/${collectionId}`, {\r\n            method: 'GET',\r\n            headers: {\r\n                'Content-Type': 'application/json'\r\n            }\r\n        })\r\n        .then(res => res.json())\r\n        .then(data => {\r\n            setItems(data.items);\r\n            itemsRef.current = data.items;\r\n            setShareCode(data.shareCode);\r\n            setCurrentCollectionName(data.name);\r\n            setCollectionName(data.name);\r\n\r\n            // Check if there is a filter in the url if there is set the filter\r\n            if(filter === 'alphabetical') {\r\n                setShowAlphabetical(true);\r\n            } else if(filter === 'watched') {\r\n                setShowWatched(true);\r\n            }\r\n\r\n            // Give a little time for the items to load\r\n            setTimeout(() => {\r\n                setIsLoading(false);\r\n\r\n                // If there is a hash in the url, scroll to that element\r\n                if(hash) {\r\n                    // Add a little more time for the items to load\r\n                    setTimeout(() => {\r\n                            // If there is a hash in the url, scroll to that element\r\n                            const element = document.getElementById(hash);\r\n                            element.scrollIntoView({ behavior: \"smooth\" });\r\n                    }, 500);\r\n                }\r\n            }, 500);\r\n\r\n            // Join room with the collection id\r\n            socket.emit('join-room', collectionId);\r\n        });\r\n    }, [auth, collectionId, socket]);\r\n\r\n    useEffect(() => {\r\n        socket.on('remove-item', (id) => {\r\n            // Find item with the id and remove it from the list\r\n            itemsRef.current = itemsRef.current.filter(item => item._id !== id);\r\n            setItems(itemsRef.current);\r\n        });\r\n\r\n        socket.on('watched-item', (id) => {\r\n            // Update the item with the given id to be watched\r\n            itemsRef.current = itemsRef.current.map(item => {\r\n                if(item._id === id && item.watched === false) {\r\n                    item.watched = true;\r\n                } else if(item._id === id && item.watched === true) {\r\n                    item.watched = false;\r\n                }\r\n\r\n                return item;\r\n            });\r\n\r\n            setItems(itemsRef.current);\r\n        });\r\n\r\n        socket.on('add-item', (newItem) => {\r\n            // Add the new item to the list\r\n            itemsRef.current = [...itemsRef.current, newItem];\r\n            setItems(itemsRef.current);\r\n        });\r\n\r\n        return () => {\r\n            socket.off('remove-item');\r\n            socket.off('watched-item');\r\n            socket.off('add-item');\r\n        }\r\n    }, [socket]);\r\n\r\n    /************************************************************\r\n     * Logic for setting edit state and removing items\r\n     ***********************************************************/\r\n    const isEditHandler = () => {\r\n        if(isEdit) {\r\n            // Check to make sure the collection name is not empty\r\n            if(collectionName !== '') {\r\n                // If collection name has changed make a fetch post request to update the collection name\r\n                if(collectionName !== currentCollectionName) {\r\n                    fetch(`https://choice-champ-backend.glitch.me/collections/name/${collectionId}`, {\r\n                        method: 'POST',\r\n                        headers: {\r\n                            'Content-Type': 'application/json'\r\n                        },\r\n                        body: JSON.stringify({\r\n                            name: collectionName\r\n                        })\r\n                    })\r\n                    .then(res => {\r\n                        setIsEdit(false);\r\n                        setCurrentCollectionName(collectionName);\r\n                    });\r\n                } else {\r\n                    setIsEdit(false);\r\n                }\r\n            } else {\r\n                alert('Collection name cannot be empty');\r\n            }\r\n        } else {\r\n            setIsEdit(true);\r\n        }\r\n    }\r\n\r\n    const removeItem = (id) => {\r\n        // Make a fetch delete request to remove an item from a collection\r\n        fetch(`https://choice-champ-backend.glitch.me/collections/items/${collectionId}/${id}`, {\r\n            method: 'DELETE',\r\n            headers: {\r\n                'Content-Type': 'application/json'\r\n            }\r\n        })\r\n        .then(res => {\r\n            itemsRef.current = itemsRef.current.filter(item => item._id !== id);\r\n            setItems(itemsRef.current);\r\n            // Emit to the server that an item has been removed\r\n            socket.emit('remove-remote-item', id, collectionId);\r\n        });\r\n    }\r\n\r\n    const navBack = () => {\r\n        socket.emit('leave-room', collectionId);\r\n        setNavingBack(true);\r\n        setTimeout(() => {\r\n            setNavingBack(false);\r\n            navigate(`/collections/${collectionType}`);\r\n        }, 1000);\r\n    }\r\n\r\n    const navAdd = () => {\r\n        setNavingAdd(true);\r\n        setTimeout(() => {\r\n            setNavingAdd(false);\r\n            navigate(`/collections/${collectionType}/${collectionId}/add`);\r\n        }, 1000);\r\n    }\r\n\r\n    const navDetails = (id) => {\r\n        // Check if filter for alphabetical or watched is on\r\n        if(showAlphabetical || showWatched) {\r\n            navigate(`/collections/${collectionType}/${collectionId}/details/${id}?filter=${showAlphabetical ? 'alphabetical' : 'watched'}`);\r\n        } else {\r\n            navigate(`/collections/${collectionType}/${collectionId}/details/${id}`);\r\n        }\r\n    }\r\n\r\n    const updateWatched = (id, watched) => {\r\n        // Make a fetch post request to update the watched status of an item\r\n        fetch(`https://choice-champ-backend.glitch.me/collections/items/${collectionId}/${id}`, {\r\n            method: 'POST',\r\n            headers: {\r\n                'Content-Type': 'application/json'\r\n            },\r\n            body: JSON.stringify({\r\n                watched: !watched\r\n            })\r\n        })\r\n        .then(res => {\r\n            // Update the item with the given id to be watched\r\n            setItems(items.map(item => {\r\n                if(item._id === id && item.watched === false) {\r\n                    item.watched = true;\r\n                    item.timestamp = Math.floor(Date.now() / 1000);\r\n                } else if(item._id === id && item.watched === true) {\r\n                    item.watched = false;\r\n                    // Remove the timestamp if the item is unwatched\r\n                    item.timestamp = undefined;\r\n                }\r\n\r\n                return item;\r\n            }));\r\n\r\n            itemsRef.current = items;\r\n\r\n            // Emit to the server that an item has been watched\r\n            socket.emit('watched-remote-item', id, collectionId);\r\n        });\r\n    }\r\n\r\n    /************************************************************\r\n     * Logic for creating a query from the search bar. I received\r\n     * help and direction from this youtube video Web dev simplified\r\n     * https://youtu.be/E1cklb4aeXA\r\n     ***********************************************************/\r\n    const [query, setQuery] = useState('');\r\n\r\n    // Q: Why do we use useMemo here?\r\n    // A: useMemo is used to optimize the filtering of items. It will only filter the items\r\n    // when the query changes. This is important because if we didn't use useMemo the items\r\n    // would be filtered on every render. This would be a waste of resources.\r\n    const filteredItems = useMemo(() => {\r\n        return items.filter(item => {\r\n            return item.title.toLowerCase().includes(query.toLowerCase());\r\n        })\r\n    }, [items, query]);\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <div className='content'>\r\n                { \r\n                    /* \r\n                        Q: What is the difference between a link and navlink?\r\n                        A: A link is used to navigate to a different page. \r\n                           A navlink is used to navigate to a different page\r\n                           but it also allows you to style the link based on\r\n                           if it is active or not.\r\n                    */ \r\n                }\r\n                {\r\n                    navingBack ? \r\n                    (<img src=\"https://cdn.glitch.global/ebf12691-ad1e-4a83-81e2-641b9d7c5f64/back-button-active.png?v=1702137193420\" alt=\"Back symbol\" className=\"top-left clickable\" style={{animation: 'button-press .75s'}} />) : \r\n                    (<img src=\"https://cdn.glitch.global/ebf12691-ad1e-4a83-81e2-641b9d7c5f64/back-button.png?v=1702137134668\" alt=\"Back symbol\" className=\"top-left clickable\" onClick={navBack} />)\r\n                }\r\n                { isEdit \r\n                    ? (<input className='title' style={{gridColumn:\"5/14\", marginBottom: \"10px\"}} value={collectionName} onChange={e => setCollectionName(e.target.value)} />)\r\n                    : (<h2 className={`title color-${collectionType}`}>{collectionName}</h2>)\r\n                }\r\n\r\n                <img src={ isEdit ? editing :  edit } className=\"edit clickable\" alt='Edit icon' onClick={isEditHandler} style={isEdit ? {animation: 'button-press .75s'} : null} />\r\n                <div className='share-code'>share code: {shareCode}</div>\r\n                {\r\n                    navingAdd ?\r\n                    <button \r\n                        className={`add-btn backgroundColor-${collectionType} backgroundColorPressed-${collectionType}`}\r\n                        style={{animation: 'button-press .75s'}}>Add { collectionType === 'movie' ? 'Movie' : collectionType === 'game' || collectionType === 'board' ? 'Game' : 'Show'}</button>\r\n                    :\r\n                    <button \r\n                        className={`add-btn backgroundColor-${collectionType} clickable`}\r\n                        onClick={navAdd}>Add { collectionType === 'movie' ? 'Movie' : collectionType === 'game' || collectionType === 'board' ? 'Game' : 'Show'}</button>\r\n                }\r\n                <div className='search-bar-container'>\r\n                    <img src={searchIcon} alt='Search icon' className='search-icon' />\r\n                    <input className='search-bar' placeholder='Search Collection' value={query} onChange={e => setQuery(e.target.value)}/>\r\n                    {\r\n                        query !== '' &&\r\n                        <FontAwesomeIcon icon={faXmark} size=\"lg\" className='clear-search clickable' onClick={() => setQuery('')} />\r\n                    }\r\n                </div>\r\n                <FontAwesomeIcon icon={faClock} size=\"xl\" onClick={() => {\r\n                    setShowAlphabetical(false);\r\n                    setShowWatched(false);\r\n                }} className={!showAlphabetical && !showWatched ? `active-categorize active-${collectionType} category-icon clickable` : 'category-icon clickable'} id='category-clock' />\r\n                <FontAwesomeIcon icon={faArrowDownAZ} size=\"xl\" onClick={() => {\r\n                    setShowAlphabetical(true);\r\n                    setShowWatched(false);\r\n                }} className={showAlphabetical ? `active-categorize active-${collectionType} category-icon clickable` : 'category-icon clickable'} id='category-alph' />\r\n                <FontAwesomeIcon icon={collectionType === 'game' ? faGamepad : collectionType === 'board' ? faChessPawn :faEye} size=\"xl\" onClick={() => {\r\n                    setShowWatched(true);\r\n                    setShowAlphabetical(false);\r\n                }} className={showWatched ? `active-categorize active-${collectionType} category-icon clickable` : 'category-icon clickable'} id='category-watch'/>\r\n                <span id='chrono-label' className={!showAlphabetical && !showWatched ? `category-label category-label-active-${collectionType}` : 'category-label'}>recent</span>\r\n                <span id='alph-label' className={(showAlphabetical) ? `category-label category-label-active-${collectionType}` : 'category-label'}>a-z</span>\r\n                <span id='watched-label' className={(showWatched) ? `category-label category-label-active-${collectionType}` : 'category-label'}>\r\n                    { collectionType === 'game' || collectionType === 'board' ? 'played' : 'watched'}\r\n                </span> \r\n                {\r\n                    isLoading ? <Loading color={collectionTypeColor} type='beat' className='list-loading' size={20} /> : \r\n                        (\r\n                            <div className='collection-content'>\r\n                                {\r\n                                    (filteredItems.length === 0 && query === '' && !showWatched) && <p className='no-items'>No items in this collection</p>\r\n                                }\r\n                                {\r\n                                    (filteredItems.length === 0 && query !== '') && <p className='no-items'>No items match search</p>\r\n                                }\r\n                                {\r\n                                    // Logic to check if we should show the items in alphabetical order or not\r\n                                    showAlphabetical && !showWatched ? (\r\n                                        [...filteredItems].sort((a, b) => a.title.localeCompare(b.title)).map(item => (\r\n                                           // Only show if the item is not watched\r\n                                           !item.watched ?\r\n                                                (<div className='item-section' id={item.itemId} key={item.itemId} onClick={ !isEdit ? () => { navDetails(item.itemId) } : null } >\r\n                                                    { \r\n                                                        !isEdit ? \r\n                                                            <PlaceholderImg voted={null} finished={null} alt={`${item.title} poster`} collectionColor={collectionTypeColor} classNames='item-img clickable' src={item.poster} />\r\n                                                            :\r\n                                                            <PlaceholderImg voted={null} finished={null} alt={`${item.title} poster`} collectionColor={collectionTypeColor} classNames='item-img' src={item.poster} />\r\n                                                    }\r\n                                                    { isEdit ? (<img src={'https://cdn.glitch.global/7cdfb78e-767d-42ef-b9ca-2f58981eb393/remove.png?v=1682136649433'} alt={`${item.title} poster`} className='item-action clickable' onClick={() => { removeItem(item._id) }} />) : null }\r\n                                                    { isEdit ? (\r\n                                                        <FontAwesomeIcon icon={collectionType === 'game' ? faGamepad : collectionType === 'board' ? faChessPawn :faEye} size=\"xl\" \r\n                                                        className='item-action-watched clickable' onClick={() => {updateWatched(item._id)}} /> \r\n                                                    ) : null }\r\n                                                </div>\r\n                                                )\r\n                                            :   null\r\n                                        )) \r\n                                    ) : (\r\n                                        /* \r\n                                            Received help from this article: https://bobbyhadz.com/blog/react-map-array-reverse \r\n                                            We use the spread operator here because we want to make a copy of filteredItems. We don't want\r\n                                            to modify it\r\n                                        */ \r\n                                        [...filteredItems].reverse().map(item => (\r\n                                            // Only show if the item is not watched\r\n                                            !item.watched && !showWatched ?\r\n                                                (<div className='item-section' id={item.itemId} key={item.itemId} onClick={ !isEdit ? () => { navDetails(item.itemId) } : null } >\r\n                                                    { \r\n                                                        !isEdit ? \r\n                                                            <PlaceholderImg voted={null} finished={null} alt={`${item.title} poster`} collectionColor={collectionTypeColor} classNames='item-img clickable' src={item.poster} />\r\n                                                            :\r\n                                                            <PlaceholderImg voted={null} finished={null} alt={`${item.title} poster`} collectionColor={collectionTypeColor} classNames='item-img' src={item.poster} />\r\n                                                    }\r\n                                                    { isEdit ? (<img src={'https://cdn.glitch.global/7cdfb78e-767d-42ef-b9ca-2f58981eb393/remove.png?v=1682136649433'} alt={`${item.title} poster`} className='item-action clickable' onClick={() => { removeItem(item._id) }} />) : null }\r\n                                                    { isEdit ? (\r\n                                                        <FontAwesomeIcon icon={collectionType === 'game' ? faGamepad : collectionType === 'board' ? faChessPawn :faEye} size=\"xl\" \r\n                                                        className='item-action-watched clickable' onClick={() => {updateWatched(item._id)}} /> \r\n                                                    ) : null }\r\n                                                </div>\r\n                                                )\r\n                                            :   null\r\n                                        ))\r\n                                    )\r\n                                }\r\n                                {\r\n                                    // Logic to check if we should show the items in alphabetical order or not\r\n                                    showWatched && (\r\n                                        [...filteredItems].filter(item => item.watched).length === 0 && query === '' ? (\r\n                                            \r\n                                                collectionType === 'game' || collectionType === 'board' ? \r\n                                                <p className='no-items'>No played items</p>\r\n                                                :\r\n                                                <p className='no-items'>No watched items</p>\r\n                                        )\r\n                                        : \r\n                                        (\r\n                                            [...filteredItems]\r\n                                                .filter(item => item.watched)\r\n                                                .sort((a, b) => a.timestamp - b.timestamp)\r\n                                                .reverse().map(item => (\r\n                                                    <div className='item-section' id={item.itemId} key={item.itemId} onClick={ !isEdit ? () => { navDetails(item.itemId) } : null } >\r\n                                                        { \r\n                                                            !isEdit ? \r\n                                                            <PlaceholderImg voted={null} finished={null} alt={`${item.title} poster`} collectionColor={collectionTypeColor} classNames='item-img clickable' src={item.poster} />\r\n                                                            :\r\n                                                            <PlaceholderImg voted={null} finished={null} alt={`${item.title} poster`} collectionColor={collectionTypeColor} classNames='item-img' src={item.poster} />\r\n                                                        }\r\n                                                        { isEdit ? (<img src={'https://cdn.glitch.global/7cdfb78e-767d-42ef-b9ca-2f58981eb393/remove.png?v=1682136649433'} alt={`${item.title} poster`} className='item-action clickable' onClick={() => { removeItem(item._id) }} />) : null }\r\n                                                        { isEdit ? (\r\n                                                            <FontAwesomeIcon icon={collectionType === 'game' ? faGamepad : collectionType === 'board' ? faChessPawn :faEye} size=\"xl\" \r\n                                                            className={`item-action-watched color-${collectionType} clickable`} onClick={() => {updateWatched(item._id, item.watched)}} /> \r\n                                                        ) : null }\r\n                                                    </div>\r\n                                            ))\r\n                                        )\r\n                                    )\r\n                                }\r\n                            </div>\r\n                        )\r\n                }\r\n            </div>\r\n        </React.Fragment>\r\n    );\r\n}\r\n\r\nexport default Collection;","import React, { useState } from 'react';\r\nimport Loading from './Loading';\r\n\r\nconst PlaceholderImg = ({ src, alt, classNames, collectionColor, voted, finished }) => {\r\n    const [loaded, setLoaded] = useState(false);\r\n\r\n    return (\r\n        <div>\r\n            {!loaded && <Loading color={collectionColor} type='beat' className='item-loading' size={20} />}\r\n            <img\r\n                src={src}\r\n                className={classNames}\r\n                alt={alt}\r\n                style={!loaded ? { display: 'none' } : (voted && !finished) ? { border: '5px solid #FCB016' } : null}\r\n                onLoad={() => setLoaded(true)}\r\n            />\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default PlaceholderImg;"],"names":["_ref","socket","auth","useContext","AuthContext","navigate","useNavigate","collectionType","useParams","type","collectionId","id","search","window","location","params","URLSearchParams","filter","get","hash","_useState","useState","_useState2","_slicedToArray","items","setItems","_useState3","_useState4","isEdit","setIsEdit","_useState5","_useState6","shareCode","setShareCode","_useState7","_useState8","isLoading","setIsLoading","_useState9","_useState10","currentCollectionName","setCurrentCollectionName","_useState11","_useState12","collectionName","setCollectionName","_useState13","_useState14","showAlphabetical","setShowAlphabetical","_useState15","_useState16","showWatched","setShowWatched","_useState17","_useState18","navingBack","setNavingBack","_useState19","_useState20","navingAdd","setNavingAdd","_useState21","_useState22","collectionTypeColor","setCollectionTypeColor","itemsRef","useRef","useEffect","showFooterHandler","fetch","concat","method","headers","then","res","json","data","current","name","setTimeout","document","getElementById","scrollIntoView","behavior","emit","on","item","_id","map","watched","newItem","_toConsumableArray","off","removeItem","navDetails","updateWatched","body","JSON","stringify","timestamp","Math","floor","Date","now","undefined","_useState23","_useState24","query","setQuery","filteredItems","useMemo","title","toLowerCase","includes","_jsx","React","children","_jsxs","className","src","alt","style","animation","onClick","gridColumn","marginBottom","value","onChange","e","target","editing","edit","alert","searchIcon","placeholder","FontAwesomeIcon","icon","faXmark","size","faClock","faArrowDownAZ","faGamepad","faChessPawn","faEye","Loading","color","length","sort","a","b","localeCompare","itemId","PlaceholderImg","voted","finished","collectionColor","classNames","poster","reverse","loaded","setLoaded","border","display","onLoad"],"sourceRoot":""}